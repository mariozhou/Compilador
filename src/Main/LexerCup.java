/* The following code was generated by JFlex 1.4.3 on 9/10/21 11:40 PM */

package Main;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/10/21 11:40 PM from the specification file
 * <tt>C:/Users/TheTitan/Desktop/AUTO2/Compilador-Base-master/src/Main/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\11\2\0\1\3\22\0\1\3\1\71\1\0\1\10"+
    "\2\0\1\75\1\12\1\77\1\100\1\74\1\72\1\6\1\73\1\5"+
    "\1\13\12\2\1\105\1\7\1\70\1\66\1\67\2\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\63\1\44\1\14\1\20\2\1\1\52\1\56"+
    "\1\40\1\54\1\27\1\1\1\37\1\46\1\42\1\60\1\1\1\61"+
    "\3\1\1\101\1\0\1\102\1\0\1\1\1\0\1\24\1\36\1\45"+
    "\1\51\1\17\1\55\1\53\1\47\1\22\1\1\1\57\1\25\1\16"+
    "\1\21\1\15\1\43\1\1\1\30\1\4\1\23\1\50\1\62\1\41"+
    "\1\64\1\65\1\26\1\103\1\76\1\104\123\0\1\105\37\0\1\105"+
    "\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\4\1\10\1\11\23\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\1\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\15\1\0\1\27\1\30\1\27\1\1"+
    "\2\0\1\31\1\32\4\2\1\33\3\2\1\34\30\2"+
    "\1\35\12\2\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\31\12\2\1\51"+
    "\24\2\1\52\7\2\1\53\7\2\1\54\6\2\1\55"+
    "\3\2\1\47\1\56\1\57\3\2\1\60\12\2\1\61"+
    "\4\2\1\62\6\2\1\63\1\64\3\2\1\65\1\66"+
    "\1\67\1\70\1\71\6\2\1\72\1\2\1\73\1\74"+
    "\3\2\1\75\11\2\1\76\4\2\1\77\1\100\1\101"+
    "\1\102\1\2\1\103\1\2\1\104\2\2\1\105\15\2"+
    "\1\106\3\2\1\107\1\110\3\2\1\111\1\112\1\2"+
    "\1\113\2\2\1\114\1\115\1\116\1\2\1\117\3\2"+
    "\1\120\5\2\1\121\1\2\1\122\1\2\1\123\6\2"+
    "\1\124\2\2\1\125\1\126\2\2\1\127\1\130\2\2"+
    "\1\131\1\132\1\133\1\2\1\134\1\2\1\135\1\136"+
    "\2\2\1\137\1\140\1\2\1\141\5\2\1\142\1\2"+
    "\1\143\1\2\1\144\4\2\1\145\1\146\1\147\1\2"+
    "\1\150\6\2\1\151\1\152\1\153\1\154\1\155\1\156"+
    "\1\2\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u01a4\0\u0992\0\u09d8"+
    "\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0230\0\u0b36\0\u01a4\0\u01a4"+
    "\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\214\0\u0c94\0\u0cda\0\u0d20"+
    "\0\214\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a"+
    "\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a"+
    "\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a"+
    "\0\u13b0\0\214\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554"+
    "\0\u159a\0\u15e0\0\u1626\0\u166c\0\u01a4\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u01a4\0\106\0\106\0\u16b2\0\u16f8\0\106"+
    "\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19fa\0\214\0\u1a40\0\u1a86\0\u1acc\0\u1b12"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42"+
    "\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72"+
    "\0\214\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c"+
    "\0\214\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\214\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\214"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\214\0\214\0\u2648\0\u268e"+
    "\0\u26d4\0\214\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878"+
    "\0\u28be\0\u2904\0\u294a\0\u2990\0\214\0\u29d6\0\u2a1c\0\u2a62"+
    "\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92"+
    "\0\214\0\214\0\u2cd8\0\u2d1e\0\u2d64\0\214\0\214\0\214"+
    "\0\214\0\214\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\214\0\214\0\u2fda\0\u3020\0\u3066\0\214"+
    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u32dc\0\214\0\u3322\0\u3368\0\u33ae\0\u33f4\0\214\0\214"+
    "\0\214\0\214\0\u343a\0\214\0\u3480\0\214\0\u34c6\0\u350c"+
    "\0\214\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6"+
    "\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\214\0\u38e0"+
    "\0\u3926\0\u396c\0\u39b2\0\214\0\u39f8\0\u3a3e\0\u3a84\0\214"+
    "\0\214\0\u3aca\0\214\0\u3b10\0\u3b56\0\214\0\214\0\214"+
    "\0\u3b9c\0\214\0\u3be2\0\u3c28\0\u3c6e\0\214\0\u3cb4\0\u3cfa"+
    "\0\u3d40\0\u3d86\0\u3dcc\0\214\0\u3e12\0\214\0\u3e58\0\u3e9e"+
    "\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\214\0\u4088"+
    "\0\u40ce\0\u4114\0\214\0\u415a\0\u41a0\0\214\0\214\0\u41e6"+
    "\0\u422c\0\214\0\214\0\214\0\u4272\0\214\0\u42b8\0\214"+
    "\0\214\0\u42fe\0\u4344\0\214\0\214\0\u438a\0\214\0\u43d0"+
    "\0\u4416\0\u445c\0\u44a2\0\u44e8\0\214\0\u452e\0\214\0\u4574"+
    "\0\214\0\u45ba\0\u4600\0\u4646\0\u468c\0\214\0\214\0\214"+
    "\0\u46d2\0\214\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876"+
    "\0\214\0\214\0\214\0\214\0\214\0\214\0\u48bc\0\214";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\5\1\13\1\14\1\15\3\3\1\16\6\3"+
    "\1\17\1\3\1\20\1\21\1\22\1\23\1\24\1\3"+
    "\1\25\1\26\1\3\1\27\1\3\1\30\1\3\1\31"+
    "\3\3\1\32\1\3\1\33\1\3\1\34\1\3\1\35"+
    "\1\36\1\3\1\37\2\3\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\3\2\1\0\5\2\1\0"+
    "\75\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\52\3\7\60\2\2\7\60\1\2\1\61\1\4\1\0"+
    "\1\61\1\62\2\60\1\2\1\0\2\60\3\61\1\63"+
    "\15\61\1\63\30\61\7\60\2\2\7\60\3\0\2\5"+
    "\4\0\1\5\74\0\1\2\2\3\1\5\1\6\3\60"+
    "\1\2\1\5\2\60\52\3\7\60\2\2\7\60\1\2"+
    "\2\60\1\0\4\60\1\2\1\0\63\60\2\2\7\60"+
    "\11\12\1\0\74\12\1\64\2\65\1\66\3\65\1\60"+
    "\1\64\1\66\1\67\62\65\2\64\7\65\1\2\2\60"+
    "\1\0\4\60\1\2\1\0\1\60\1\70\61\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\1\3\1\71\50\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\72\3\60\1\2\1\0\2\60\2\3"+
    "\1\73\2\3\1\74\33\3\1\75\10\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\1\3\1\76\12\3\1\77\35\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\11\3\1\100\17\3\1\101\14\3\1\102\3\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\1\3\1\103\50\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\1\3\1\104\6\3\1\105\1\106\40\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\1\3\1\107\1\3\1\110\2\3\1\111"+
    "\43\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\5\3\1\112\3\3\1\113"+
    "\40\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\1\3\1\114\1\3\1\115"+
    "\46\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\3\3\1\116\46\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\3\3\1\117\10\3\1\120\16\3\1\121"+
    "\16\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\3\3\1\122\46\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\2\3\1\123\1\124\3\3\1\125\1\126"+
    "\22\3\1\127\16\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\1\3\1\130"+
    "\4\3\1\131\43\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\5\3\1\132"+
    "\21\3\1\133\11\3\1\134\10\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\1\3\1\135\4\3\1\136\43\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\5\3\1\137\44\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\6\3\1\140"+
    "\24\3\1\141\16\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\1\3\1\142"+
    "\6\3\1\143\1\144\40\3\7\60\2\2\7\60\1\2"+
    "\2\60\1\0\4\60\1\2\1\0\54\60\1\145\1\146"+
    "\5\60\2\2\7\60\1\2\2\60\1\0\4\60\1\2"+
    "\1\0\54\60\1\147\6\60\2\2\7\60\1\2\2\60"+
    "\1\0\4\60\1\2\1\0\54\60\1\150\6\60\2\2"+
    "\7\60\1\2\2\60\1\0\4\60\1\2\1\0\54\60"+
    "\1\151\6\60\2\2\7\60\1\2\2\60\1\0\4\60"+
    "\1\2\1\0\60\60\1\152\2\60\2\2\7\60\1\2"+
    "\2\60\1\0\4\60\1\2\1\0\61\60\1\153\1\60"+
    "\2\2\7\60\3\2\1\0\5\2\1\0\63\2\1\154"+
    "\13\2\1\0\5\2\1\0\64\2\1\155\10\2\2\61"+
    "\1\0\1\61\3\60\1\2\1\0\2\60\52\61\7\60"+
    "\2\2\7\60\1\2\1\60\1\62\1\0\4\60\1\2"+
    "\1\0\5\60\1\156\15\60\1\156\37\60\2\2\7\60"+
    "\1\2\2\61\1\0\1\61\3\60\1\2\1\0\2\60"+
    "\52\61\4\60\2\157\1\60\2\2\7\60\3\64\1\66"+
    "\3\64\1\2\1\64\1\66\1\160\73\64\7\66\1\0"+
    "\2\66\1\161\73\66\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\2\3\1\162\47\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\4\3\1\163\12\3\1\164\12\3\1\165\3\3"+
    "\1\166\1\3\1\167\1\3\1\170\1\3\1\171\5\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\27\3\1\172\22\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\6\3\1\173\1\174\42\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\14\3\1\175\35\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\1\3\1\176"+
    "\50\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\10\3\1\177\41\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\10\3\1\200\41\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\1\3\1\201\50\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\11\3\1\202"+
    "\40\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\2\3\1\203\24\3\1\204"+
    "\22\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\1\3\1\205\50\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\1\3\1\206\50\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\7\3\1\207\1\3\1\210\27\3\1\211\4\3\1\212"+
    "\3\3\7\60\2\2\7\60\1\2\2\3\1\0\1\213"+
    "\3\60\1\2\1\0\2\60\52\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\10\3\1\214\41\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\215\3\60\1\2\1\0\2\60\52\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\1\3\1\216\50\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\7\3\1\217\21\3\1\220\20\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\25\3\1\221\24\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\2\3\1\222"+
    "\45\3\1\223\1\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\34\3\1\224"+
    "\15\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\3\3\1\225\2\3\1\226"+
    "\43\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\7\3\1\227\42\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\10\3\1\230\41\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\7\3\1\231\42\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\1\3\1\232"+
    "\6\3\1\233\41\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\46\3\1\234"+
    "\3\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\34\3\1\235\15\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\31\3\1\236\20\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\37\3\1\237\12\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\3\3\1\240"+
    "\46\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\41\3\1\241\10\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\46\3\1\242\3\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\31\3\1\243\20\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\11\3\1\244"+
    "\40\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\5\3\1\245\44\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\3\3\1\246\2\3\1\247\43\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\14\3\1\250\35\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\11\3\1\251\17\3\1\252\20\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\1\3\1\253\50\3\7\60\2\2\7\60\1\2\1\60"+
    "\1\254\1\0\4\60\1\2\1\0\60\60\2\254\1\60"+
    "\2\2\7\60\1\2\1\60\1\157\1\0\4\60\1\2"+
    "\1\0\63\60\2\2\7\60\106\0\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\3\3\1\255\46\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\5\3\1\256\44\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\11\3\1\257\40\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\1\3"+
    "\1\260\50\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\1\3\1\261\50\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\5\3\1\262\21\3\1\263\4\3"+
    "\1\264\15\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\1\3\1\265\50\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\5\3\1\266\44\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\1\3\1\267\50\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\7\3"+
    "\1\270\42\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\7\3\1\271\42\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\37\3\1\272\12\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\14\3\1\273\35\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\5\3"+
    "\1\274\44\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\11\3\1\275\40\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\1\3\1\276\50\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\3\3\1\277\46\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\7\3"+
    "\1\300\42\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\301\3\60\1\2\1\0\2\60\52\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\14\3\1\302\35\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\3\3"+
    "\1\303\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\3\3\1\304\46\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\10\3\1\305\41\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\6\3\1\306\43\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\27\3"+
    "\1\307\22\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\22\3\1\310\27\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\3\3\1\311\46\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\2\3\1\312\47\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\14\3"+
    "\1\313\35\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\1\3\1\314\1\3"+
    "\1\315\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\27\3\1\316\22\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\7\3\1\317\42\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\3\3\1\320\46\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\5\3"+
    "\1\321\44\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\322\3\60\1\2\1\0\2\60\52\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\26\3\1\323\23\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\14\3"+
    "\1\324\35\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\27\3\1\325\22\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\14\3\1\326\35\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\3\3\1\327\46\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\7\3"+
    "\1\330\42\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\43\3\1\331\6\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\33\3\1\332\16\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\5\3\1\333\44\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\3\3"+
    "\1\334\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\14\3\1\335\35\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\1\3\1\336\50\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\35\3\1\337\14\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\5\3"+
    "\1\340\44\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\341\3\60\1\2\1\0\2\60\11\3\1\342\40\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\343\3\60"+
    "\1\2\1\0\2\60\52\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\3\3"+
    "\1\344\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\10\3\1\345\41\3"+
    "\7\60\2\2\7\60\1\2\1\60\1\254\1\0\4\60"+
    "\1\2\1\0\63\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\1\3\1\346\50\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\34\3\1\347\15\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\31\3\1\350\20\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\3\3"+
    "\1\351\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\7\3\1\352\42\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\46\3\1\353\3\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\11\3\1\354\40\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\14\3"+
    "\1\355\35\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\6\3\1\356\43\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\15\3\1\357\1\360\1\361\1\362"+
    "\31\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\14\3\1\363\35\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\2\3\1\364\47\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\12\3\1\365\37\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\14\3\1\366"+
    "\35\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\14\3\1\367\35\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\34\3\1\370\15\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\3\3\1\371\46\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\22\3\1\372"+
    "\27\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\5\3\1\373\44\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\7\3\1\374\42\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\34\3\1\375\15\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\31\3\1\376"+
    "\20\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\11\3\1\377\40\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\11\3\1\u0100\40\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\1\3\1\u0101\50\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\14\3\1\u0102"+
    "\35\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\6\3\1\u0103\43\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\3\3\1\u0104\46\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\7\3\1\u0105\42\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\23\3\1\u0106"+
    "\26\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\7\3\1\u0107\42\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\47\3\1\u0108\2\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\35\3\1\u0109\14\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\15\3\1\u010a"+
    "\34\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\7\3\1\u010b\42\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\1\3\1\u010c\50\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\31\3\1\u010d\20\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\1\3\1\u010e"+
    "\50\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\7\3\1\u010f\42\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\3\3\1\u0110\46\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\3\3\1\u0111\46\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\17\3\1\u0112"+
    "\32\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\7\3\1\u0113\42\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\u0114\3\60\1\2"+
    "\1\0\2\60\52\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\5\3\1\u0115"+
    "\44\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\43\3\1\u0116\6\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\5\3\1\u0117\44\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\3\3\1\u0118\46\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\1\3\1\u0119"+
    "\50\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\7\3\1\u011a\42\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\10\3\1\u011b\41\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\10\3\1\u011c\41\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\10\3\1\u011d"+
    "\41\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\10\3\1\u011e\41\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\14\3\1\u011f\35\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\3\3\1\u0120\46\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\3\3\1\u0121"+
    "\46\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\3\3\1\u0122\46\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\11\3\1\u0123\40\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\3\3\1\u0124\46\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\10\3\1\u0125"+
    "\41\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\3\3\1\u0126\46\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\31\3\1\u0127\20\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\35\3\1\u0128\14\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\46\3\1\u0129"+
    "\3\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\2\3\1\u012a\47\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\17\3\1\u012b\32\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\3\3\1\u012c\46\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\10\3\1\u012d"+
    "\41\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\1\3\1\u012e\50\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\7\3\1\u012f\42\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\23\3\1\u0130\16\3\1\u0131\7\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\43\3\1\u0132\6\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\25\3\1\u0133"+
    "\24\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\11\3\1\u0134\40\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\33\3\1\u0135\16\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\3\3\1\u0136\46\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\35\3\1\u0137"+
    "\14\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\31\3\1\u0138\20\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\11\3\1\u0139\40\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\2\3\1\u013a\47\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\14\3\1\u013b"+
    "\35\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\3\3\1\u013c\46\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\11\3\1\u013d\40\3\7\60\2\2\7\60"+
    "\1\2\2\3\1\0\1\3\3\60\1\2\1\0\2\60"+
    "\14\3\1\u013e\35\3\7\60\2\2\7\60\1\2\2\3"+
    "\1\0\1\3\3\60\1\2\1\0\2\60\47\3\1\u013f"+
    "\2\3\7\60\2\2\7\60\1\2\2\3\1\0\1\3"+
    "\3\60\1\2\1\0\2\60\7\3\1\u0140\42\3\7\60"+
    "\2\2\7\60\1\2\2\3\1\0\1\3\3\60\1\2"+
    "\1\0\2\60\51\3\1\u0141\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\3\3"+
    "\1\u0142\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\26\3\1\u0143\23\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\3\3\1\u0144\46\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\27\3\1\u0145\22\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\10\3"+
    "\1\u0146\41\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\31\3\1\u0147\20\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\31\3\1\u0148\20\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\25\3\1\u0149\24\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\30\3"+
    "\1\u014a\21\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\1\3\1\u014b\50\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\15\3\1\u014c\34\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\3\3\1\u014d\46\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\3\3"+
    "\1\u014e\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\43\3\1\u014f\6\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\6\3\1\u0150\43\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\11\3\1\u0151\40\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\10\3"+
    "\1\u0152\41\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\35\3\1\u0153\14\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\6\3\1\u0154\43\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\2\3\1\u0155\47\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\3\3"+
    "\1\u0156\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\5\3\1\u0157\44\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\16\3\1\u0158\33\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\35\3\1\u0159\14\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\7\3"+
    "\1\u015a\42\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\31\3\1\u015b\20\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\12\3\1\u015c\37\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\31\3\1\u015d\20\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\3\3"+
    "\1\u015e\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\2\3\1\u015f\47\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\3\3\1\u0160\46\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\3\3\1\u0161\46\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\43\3"+
    "\1\u0162\6\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\3\3\1\u0163\46\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\3\3\1\u0164\46\3\7\60\2\2"+
    "\7\60\1\2\2\3\1\0\1\3\3\60\1\2\1\0"+
    "\2\60\14\3\1\u0165\35\3\7\60\2\2\7\60\1\2"+
    "\2\3\1\0\1\3\3\60\1\2\1\0\2\60\3\3"+
    "\1\u0166\46\3\7\60\2\2\7\60\1\2\2\3\1\0"+
    "\1\3\3\60\1\2\1\0\2\60\14\3\1\u0167\35\3"+
    "\7\60\2\2\7\60\1\2\2\3\1\0\1\3\3\60"+
    "\1\2\1\0\2\60\10\3\1\u0168\41\3\7\60\2\2"+
    "\7\60";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18690];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\56\1\1\0\4\1\2\0\72\1\1\11\367\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public Symbol token(int simbolo){
		// Lexema lexema = new Lexema( yytext() );
		return new Symbol(simbolo,yyline,yycolumn,yytext());
	}
	public Symbol token(int simbolo,String componenteLexico){
		// Cup.vars++;
		// Lexema lexema = new Lexema( yytext() );
		return new Symbol(simbolo,yyline,yycolumn,yytext());
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 78: 
          { return new Symbol(sym.IsMove, yychar, yyline, yytext());
          }
        case 112: break;
        case 54: 
          { return new Symbol(sym.Text, yychar, yyline, yytext());
          }
        case 113: break;
        case 81: 
          { return new Symbol(sym.Device, yychar, yyline, yytext());
          }
        case 114: break;
        case 69: 
          { return new Symbol(sym.Close, yychar, yyline, yytext());
          }
        case 115: break;
        case 62: 
          { return new Symbol(sym.IsOut, yychar, yyline, yytext());
          }
        case 116: break;
        case 35: 
          { return new Symbol(sym.Inc, yychar, yyline, yytext());
          }
        case 117: break;
        case 70: 
          { return new Symbol(sym.Start, yychar, yyline, yytext());
          }
        case 118: break;
        case 53: 
          { return new Symbol(sym.Temp, yychar, yyline, yytext());
          }
        case 119: break;
        case 45: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 120: break;
        case 77: 
          { return new Symbol(sym.IsOpen, yychar, yyline, yytext());
          }
        case 121: break;
        case 18: 
          { return new Symbol(sym.Parentesis_der, yychar, yyline, yytext());
          }
        case 122: break;
        case 39: 
          { return new Symbol(sym.Numero_Euler_Flotante, yychar, yyline, yytext());
          }
        case 123: break;
        case 68: 
          { return new Symbol(sym.Color, yychar, yyline, yytext());
          }
        case 124: break;
        case 96: 
          { return new Symbol(sym.GetTemp, yychar, yyline, yytext());
          }
        case 125: break;
        case 75: 
          { return new Symbol(sym.Float, yychar, yyline, yytext());
          }
        case 126: break;
        case 98: 
          { return new Symbol(sym.Whistle, yychar, yyline, yytext());
          }
        case 127: break;
        case 107: 
          { return new Symbol(sym.Initialize, yychar, yyline, yytext());
          }
        case 128: break;
        case 57: 
          { return new Symbol(sym.This, yychar, yyline, yytext());
          }
        case 129: break;
        case 31: 
          { return new Symbol(sym.AsignacionArrow, yychar, yyline, yytext());
          }
        case 130: break;
        case 48: 
          { return new Symbol(sym.IsOn, yychar, yyline, yytext());
          }
        case 131: break;
        case 94: 
          { return new Symbol(sym.Display, yychar, yyline, yytext());
          }
        case 132: break;
        case 64: 
          { return new Symbol(sym.PortB, yychar, yyline, yytext());
          }
        case 133: break;
        case 93: 
          { return new Symbol(sym.Default, yychar, yyline, yytext());
          }
        case 134: break;
        case 80: 
          { return new Symbol(sym.Camera, yychar, yyline, yytext());
          }
        case 135: break;
        case 6: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 136: break;
        case 43: 
          { return new Symbol(sym.Set, yychar, yyline, yytext());
          }
        case 137: break;
        case 58: 
          { return new Symbol(sym.Lock, yychar, yyline, yytext());
          }
        case 138: break;
        case 36: 
          { return new Symbol(sym.Dec, yychar, yyline, yytext());
          }
        case 139: break;
        case 13: 
          { return new Symbol(sym.ERROR2, yychar, yyline, yytext());
          }
        case 140: break;
        case 4: 
          { /*Ignore*/
          }
        case 141: break;
        case 89: 
          { return new Symbol(sym.Program, yychar, yyline, yytext());
          }
        case 142: break;
        case 99: 
          { return new Symbol(sym.IsUnlock, yychar, yyline, yytext());
          }
        case 143: break;
        case 46: 
          { return new Symbol(sym.Home, yychar, yyline, yytext());
          }
        case 144: break;
        case 50: 
          { return new Symbol(sym.Door, yychar, yyline, yytext());
          }
        case 145: break;
        case 25: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 146: break;
        case 110: 
          { return new Symbol(sym.RecordTime, yychar, yyline, yytext());
          }
        case 147: break;
        case 44: 
          { return new Symbol(sym.Off, yychar, yyline, yytext());
          }
        case 148: break;
        case 108: 
          { return new Symbol(sym.DeleteFace, yychar, yyline, yytext());
          }
        case 149: break;
        case 82: 
          { return new Symbol(sym.Enable, yychar, yyline, yytext());
          }
        case 150: break;
        case 16: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 151: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 152: break;
        case 29: 
          { return new Symbol(sym.On, yychar, yyline, yytext());
          }
        case 153: break;
        case 21: 
          { return new Symbol(sym.Llave_izq, yychar, yyline, yytext());
          }
        case 154: break;
        case 101: 
          { return new Symbol(sym.SaveFace, yychar, yyline, yytext());
          }
        case 155: break;
        case 67: 
          { return new Symbol(sym.Alarm, yychar, yyline, yytext());
          }
        case 156: break;
        case 72: 
          { return new Symbol(sym.Micro, yychar, yyline, yytext());
          }
        case 157: break;
        case 38: 
          { return new Symbol(sym.Or, yychar, yyline, yytext());
          }
        case 158: break;
        case 65: 
          { return new Symbol(sym.PortC, yychar, yyline, yytext());
          }
        case 159: break;
        case 30: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 160: break;
        case 60: 
          { return new Symbol(sym.Move, yychar, yyline, yytext());
          }
        case 161: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 162: break;
        case 24: 
          { return new Symbol(sym.Numero_Flotante, yychar, yyline, yytext());
          }
        case 163: break;
        case 51: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 164: break;
        case 41: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 165: break;
        case 59: 
          { return new Symbol(sym.Open, yychar, yyline, yytext());
          }
        case 166: break;
        case 55: 
          { return new Symbol(sym.True, yychar, yyline, yytext());
          }
        case 167: break;
        case 42: 
          { return new Symbol(sym.New, yychar, yyline, yytext());
          }
        case 168: break;
        case 23: 
          { return new Symbol(sym.ERROR3, yychar, yyline, yytext());
          }
        case 169: break;
        case 111: 
          { return new Symbol(sym.SmartCamera, yychar, yyline, yytext());
          }
        case 170: break;
        case 37: 
          { return new Symbol(sym.And, yychar, yyline, yytext());
          }
        case 171: break;
        case 14: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 172: break;
        case 47: 
          { return new Symbol(sym.IsIn, yychar, yyline, yytext());
          }
        case 173: break;
        case 104: 
          { return new Symbol(sym.UnlockAt, yychar, yyline, yytext());
          }
        case 174: break;
        case 3: 
          { return new Symbol(sym.Numero_Entero, yychar, yyline, yytext());
          }
        case 175: break;
        case 12: 
          { return new Symbol(sym.Menor, yychar, yyline, yytext());
          }
        case 176: break;
        case 105: 
          { return new Symbol(sym.LightMode, yychar, yyline, yytext());
          }
        case 177: break;
        case 100: 
          { return new Symbol(sym.Doorbell, yychar, yyline, yytext());
          }
        case 178: break;
        case 91: 
          { return new Symbol(sym.Capture, yychar, yyline, yytext());
          }
        case 179: break;
        case 34: 
          { return new Symbol(sym.Diferente, yychar, yyline, yytext());
          }
        case 180: break;
        case 76: 
          { return new Symbol(sym.IsLock, yychar, yyline, yytext());
          }
        case 181: break;
        case 11: 
          { return new Symbol(sym.Mayor, yychar, yyline, yytext());
          }
        case 182: break;
        case 66: 
          { return new Symbol(sym.PortD, yychar, yyline, yytext());
          }
        case 183: break;
        case 92: 
          { return new Symbol(sym.Detener, yychar, yyline, yytext());
          }
        case 184: break;
        case 8: 
          { return new Symbol(sym.Comillas_simples, yychar, yyline, yytext());
          }
        case 185: break;
        case 61: 
          { return new Symbol(sym.When, yychar, yyline, yytext());
          }
        case 186: break;
        case 106: 
          { return new Symbol(sym.FaceCheck, yychar, yyline, yytext());
          }
        case 187: break;
        case 74: 
          { return new Symbol(sym.False, yychar, yyline, yytext());
          }
        case 188: break;
        case 33: 
          { return new Symbol(sym.Mayor_igual, yychar, yyline, yytext());
          }
        case 189: break;
        case 56: 
          { return new Symbol(sym.Then, yychar, yyline, yytext());
          }
        case 190: break;
        case 90: 
          { return new Symbol(sym.Avanzar, yychar, yyline, yytext());
          }
        case 191: break;
        case 27: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 192: break;
        case 84: 
          { return new Symbol(sym.LockAt, yychar, yyline, yytext());
          }
        case 193: break;
        case 22: 
          { return new Symbol(sym.Llave_der, yychar, yyline, yytext());
          }
        case 194: break;
        case 49: 
          { return new Symbol(sym.Bool, yychar, yyline, yytext());
          }
        case 195: break;
        case 5: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 196: break;
        case 19: 
          { return new Symbol(sym.Corchete_izq, yychar, yyline, yytext());
          }
        case 197: break;
        case 88: 
          { return new Symbol(sym.IsSound, yychar, yyline, yytext());
          }
        case 198: break;
        case 109: 
          { return new Symbol(sym.Retroceder, yychar, yyline, yytext());
          }
        case 199: break;
        case 9: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 200: break;
        case 102: 
          { return new Symbol(sym.Shutdown, yychar, yyline, yytext());
          }
        case 201: break;
        case 97: 
          { return new Symbol(sym.StopRec, yychar, yyline, yytext());
          }
        case 202: break;
        case 15: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 203: break;
        case 28: 
          { return new Symbol(sym.Ac, yychar, yyline, yytext());
          }
        case 204: break;
        case 85: 
          { return new Symbol(sym.Unlock, yychar, yyline, yytext());
          }
        case 205: break;
        case 7: 
          { return new Symbol(sym.PComa, yychar, yyline, yytext());
          }
        case 206: break;
        case 52: 
          { return new Symbol(sym.Room, yychar, yyline, yytext());
          }
        case 207: break;
        case 32: 
          { return new Symbol(sym.Menor_igual, yychar, yyline, yytext());
          }
        case 208: break;
        case 103: 
          { return new Symbol(sym.LightRGB, yychar, yyline, yytext());
          }
        case 209: break;
        case 86: 
          { return new Symbol(sym.Window, yychar, yyline, yytext());
          }
        case 210: break;
        case 83: 
          { return new Symbol(sym.Record, yychar, yyline, yytext());
          }
        case 211: break;
        case 17: 
          { return new Symbol(sym.Parentesis_izq, yychar, yyline, yytext());
          }
        case 212: break;
        case 63: 
          { return new Symbol(sym.PortA, yychar, yyline, yytext());
          }
        case 213: break;
        case 79: 
          { return new Symbol(sym.Import, yychar, yyline, yytext());
          }
        case 214: break;
        case 26: 
          { return new Symbol(sym.Libreria, yychar, yyline, yytext());
          }
        case 215: break;
        case 73: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 216: break;
        case 71: 
          { return new Symbol(sym.Light, yychar, yyline, yytext());
          }
        case 217: break;
        case 10: 
          { return new Symbol(sym.Asignacion, yychar, yyline, yytext());
          }
        case 218: break;
        case 20: 
          { return new Symbol(sym.Corchete_der, yychar, yyline, yytext());
          }
        case 219: break;
        case 87: 
          { return new Symbol(sym.IsClose, yychar, yyline, yytext());
          }
        case 220: break;
        case 95: 
          { return new Symbol(sym.Receive, yychar, yyline, yytext());
          }
        case 221: break;
        case 40: 
          { return new Symbol(sym.Numero_Euler, yychar, yyline, yytext());
          }
        case 222: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
