package Main;

import java.util.Hashtable;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.awt.Color;
import java.io.BufferedWriter;
import java_cup.runtime.*;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.util.Stack;



parser code
{:
    private Symbol s;
    int idenx; // num de fila
      ArrayList<String> listavalor1 = new ArrayList<String>();  // guarda tipos
      Stack<String> pila = new Stack(); // pilasemantica
 
 //  Hashtable<String, Lexema> tabla = new Hashtable<>();
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    
    public boolean valorTipo(ArrayList<String> list,String op){
        String x= list.get(list.size()-1);//ultimo elemento agregar en asignacion sera la id
        String v;
        
        switch(Operador(op)){
        case "arit":
            for (int i = 0; i < list.size(); i++) {
              if((list.get(i).equals("Text") || list.get(i).equals("Bool")) ) {
                System.out.println(list.get(i)+"");       
                System.out.println("false en arit");  
                   
                return false;    
                }
            }
            return vTipo(list);
       
        case "logico":
            for (int i = 0; i < list.size(); i++) {
              if((list.get(i).equals("Text") || list.get(i).equals("Int")|| list.get(i).equals("Float") ) ) {
            System.out.println(list.get(i)+"");       
            System.out.println("false en logica"); 
                    
                return false;    
                }
            }
            return vTipo(list);

        case "comp":
            for (int i = 0; i < list.size(); i++) {
              if((list.get(i).equals("Text") || list.get(i).equals("Bool")) ) {
            System.out.println(list.get(i)+"");       
            System.out.println("false en compara");  
                   
                return false;    
                }
            }
            return vTipo(list);
        case "igual":
            System.out.println("== op");  
            return vTipo(list);
        case "":
            System.out.println("sin op");  
            return vTipo(list);
        default:
            return vTipo(list);
        }  
    }

    public boolean vTipo(ArrayList<String> list){
        String x = list.get(list.size()-1);//ultimo elemento agregar en asignacion sera la id
        String v;
         
        for (int i = 0; i < list.size(); i++) {     
            v = list.get(i);
            if(v.equals(x)){
                System.out.println("wtf1 "+v+" "+x);  
            }else{
                System.out.println("wtf2 "+v+" "+x);  
                System.out.println("false en vtipo"); 
                return false;
                 }
            }
                listavalor1.clear();
                listavalor1.add(x);
            return true;
    }
    
    
  /*  private boolean Operador(String token) {
        return token.equals("+") || token.equals("-") || token.equals("*")
                || token.equals("/");
                
    }*/
    
    public String Operador(String token) {
        if( (token.equals("+") || token.equals("-") || token.equals("*")|| token.equals("/")) ){
            return "arit";    
        }if( (token.equals(">=") || token.equals("<=")|| token.equals("!=") || token.equals("<")|| token.equals(">") ) ){
            return "comp";     
        }if( (token.equals("||") || token.equals("&&")) ){
            return "logico";     
        }if(token.equals("==") ){
            return "igual"; // 
        }else{ return ""; } 
    }

    public String operar(String Izq, String op, String Der) {
        
        String a = Izq;
        String b = Der;

        switch (op) {
            case "+":
                return a+"+"+b;
            case "-":
                return a+"-"+b;
            case "*":
                return a+"*"+b;
            case "/":
                return a+"/"+b;
            default:
                return "false";
        }
        

    }

:};


//-------------------------------- TERMINALES -----------------------------------------------//

terminal
    PComa, Punto, Coma, Comillas_simples, Home, Initialize, PortA, PortB, PortC, PortD, Enable,
    GetTemp, Ac, Set, Start, Shutdown, Light, Off, On, LightRGB, LightMode, Color, Door, Open, New, 
    Close, Lock, Unlock, Window, IsOpen, IsClose, IsLock, IsUnlock, UnlockAt, LockAt, Camera, Temp,
    Record, StopRec, Move, IsMove, Alarm, Device, IsIn, IsOut, Int, Text, Float, Bool, Receive,
    Display, For, While, If, Else, When, Default, Asignacion, Igual, Menor, Mayor, Mayor_igual,
    Menor_igual, Diferente, Suma, Resta, Multiplicacion, Division, And, Or, Inc, Dec, Parentesis_izq,
    Parentesis_der, Corchete_izq, Corchete_der, Llave_izq, Llave_der, Identificador, Numero_Entero,
    Numero_Euler, Numero_Euler_Flotante, ERROR, Cadena, ERROR2, AsignacionArrow, SmartCamera, Program, 
    Numero_Flotante, This, Doorbell, FaceCheck, SaveFace, DeleteFace, True, False, IsOn, Then, Room, ERROR3,
    RecordTime, IsCamaraOff, Avanzar, Retroceder, Detener, IsSound, Whistle, Capture, CamaraOn, CamaraOff, MicroOn, 
    MicroOff, IsCamaraOn, IsOff, Micro, Libreria, Import,Dos_puntos
;

//-------------------------------- NO TERMINALES ----------------------------------------------//

non terminal INICIO, STMT_LIST, STMT, DECL, CIERRE, EXP, ENA_PORT, DEC_OBJETO, OBJETO, DECL_TIPO,
             ACT_PORT, OBJ_PARAMETROS, EXP_LIST, FUNC, FUNC_TYPE, FUNC_PARAMS, THIS_FUNC, THIS_FUNC_TYPE, IN_OUT,
             VALUE_IN, VALUE_OUT, IF_STMT, COND, COND_IF, COND_IF_2, IF_FUNC_TYPE, STMT_IF,IMPOR,
             DECLVA, DECLS, TIPO, FUNC_TYPE_IF, FOR_STMT,While_STMT, COND_FOR_2,EXP_2,VALOR
;

//-------------------------------- NO TERMINAL INICIAL ----------------------------------------//

precedence left Suma, Resta;
precedence left Multiplicacion, Division;

start with INICIO;

//-------------------------------- GRAMATICA --------------------------------------------------//

INICIO ::=

/* Sintaxis Correcta */

    Identificador:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO "+s+".Initialize(Camera{ STMT_LIST ]\n"); 
    :} Punto Initialize Parentesis_izq Camera Llave_izq STMT_LIST |

/* Método Initialize */

    Identificador error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ "+s+" error { STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e004 - Sintaxis del Metodo Initialize Erronea -> ");  
        Main.error = true;  
    :} STMT_LIST |

/* Error Fuera de Bloque */

    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    :} INICIO |
    ERROR:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    :} INICIO |
    ERROR2:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    :} INICIO |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - No se encontró el Metodo Initialize -> "); 
        Main.error = true; 
    :}
;

/* ------------------------------------ // LISTA DE SENTENCIAS // --------------------------------------------*/

STMT_LIST ::=

    IMPOR:s {:
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IMPOR STMT_LIST ]\n"); 
    :} STMT_LIST |

    DECLVA:s {:// declaraciones
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ DECLVA STMT_LIST ]\n"); 
    :} STMT_LIST |
  
  error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;   
    :} STMT_LIST |
    STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ STMT STMT_LIST ]\n"); 
    :} STMT_LIST |

    IF_STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IF_STMT STMT_LIST ]\n"); 
    :} STMT_LIST |

    FOR_STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ FOR_STMT STMT_LIST ]\n"); 
    :} STMT_LIST |
  
    While_STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [  While_STMT STMT_LIST ]\n"); 
    :} STMT_LIST |

    CIERRE:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ CIERRE ]\n"); 
    :}
;

/* ------------------------------------------- // Importa libreria watchdog// -----------------------------------------------------*/

IMPOR ::=
    Import Identificador:s  {:
        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" ]\n"); 
    :} PComa |
   
    Import Identificador:s Punto Identificador:a {:
        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" Punto "+a+" PComa ]\n"); 
    :} PComa
;

/* ------------------------------------------- // DECLARAR DE VARIABLE WATCHDOG// -----------------------------------------------------*/

DECLVA ::=
/*
    TIPO:a Identificador:s PComa{:
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLVA ::= [ TIPO "+s+" ]\n"); 
    //    Main.listaIdValor.add(s+"");
    :}   |
*/

    DECLS:s{:
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLVA ::= [ DECLS ]\n"); 
        
        :}  |

    Int:b Identificador:s PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Int "+s+" ]\n");
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(" ");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }  
        
    :}  |
    Text:b Identificador:s PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Text "+s+" ]\n");
        //llenar tablad de simbolo
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(" "); 
        
    :}  |
    Float:b Identificador:s PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Float "+s+" ]\n");
        //llenar tablad de simbolo
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(" "); 
    :}  |
    Bool:b Identificador:s PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Bool "+s+" ]\n");
        //llenar tablad de simbolo
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(" "); 
    :} 
;

        

/*
     Int Identificador:s Asignacion Numero_Flotante {:
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Se espera un Número entero "); 
        Main.error = true; 
    :}  PComa |
        
     Int Identificador:s Asignacion Numero_Entero {:
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Se espera un Número entero "); 
        Main.error = true; 

    :}  PComa
*/


DECLS ::=
    /*---------------    Int    ----------------------*/
  Int:b Identificador:s Asignacion Numero_Entero:a  {:
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Int "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
        
    :}  PComa |

  Int Identificador:s Asignacion error PComa {:
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Número entero "); 
        Main.error = true; 
    :}   |

    /*---------------    Text    ----------------------*/
  Text:b Identificador:s Asignacion Cadena:a PComa {:
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
      
    :}  |

  Text Identificador:s Asignacion error PComa{:
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Cadena "); 
        Main.error = true; 
    :}   |

    /*---------------    Float    ----------------------*/
  Float:b Identificador:s Asignacion Numero_Flotante:a PComa {:
         Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
       
    :}  |

  Float Identificador:s Asignacion error PComa{:
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Número real "); 
        Main.error = true; 
    :}   |

    /*---------------    Bool    ----------------------*/
  Bool:b Identificador:s Asignacion True:a PComa {:
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
  
    :}  |
  Bool:b Identificador:s Asignacion False:a PComa {:
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
    :}  |

  Bool Identificador:s Asignacion error PComa{:
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un True o False "); 
        Main.error = true; 
    :}   
;


/*
    Cadena:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    :} |
    Numero_Entero:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    :} |

    Int Identificador:s Asignacion error {:
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Se espera un número entero "); 
        Main.error = true; 
    :}  PComa 
*/


 

TIPO ::=
    Int:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Int ]\n");
     //   Main.listaIdValor.add(s+"");
    :} |
    Text:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Text ]\n");
     //   Main.listaIdValor.add(s+"");
        
    :} |
    Float:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Float ]\n");
   //     Main.listaIdValor.add(s+"");
    :} |
    Bool:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Bool ]\n");
     //   Main.listaIdValor.add(s+"");
    :} 
 
;

/*
DECLS ::=
    Cadena:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    :} |
    Numero_Entero:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    :} |
    Numero_Flotante:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    :} |
    False:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    :} |
    True:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    :} |

    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECLS ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e016 - Se espera un valor -> "); 
        Main.error = true;  
    :}
;
*/



/* ------------------------------------------- // CIERRE // -----------------------------------------------------*/

CIERRE ::= 
    Llave_der Parentesis_der PComa:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa ]\n"); 
    :}  |
    Llave_der Parentesis_der PComa error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    :}  |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    :}  |
    ERROR:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    :} |
    ERROR2:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    :} |
    STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    :} |
    IF_STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ IF_STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    :}
;

/* ---------------------------------------- // SENTENCIAS // ------------------------------------------------------*/

STMT ::=
    DECL:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ DECL ]\n"); 
    :}  |
    ACT_PORT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ ACT_PORT ]\n"); 
    :}  |
    FUNC:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ FUNC ]\n"); 
    :}  |
    IN_OUT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ IN_OUT ]\n"); 
    :} |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    :} PComa |
    ERROR:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    :} error PComa |
    ERROR3:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    :} error PComa
;

/* ------------------------------------------- // If  // ---------------------------------------------------------*/

IF_STMT ::=
    If:s COND_IF {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> IF_STMT ::= [ If COND_IF ; ]\n");
    :} 
;

COND_IF ::=
    Parentesis_izq:s COND Parentesis_der COND_IF_2 {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ ( COND ) COND_IF_2 ]\n");
    :} |
    error:s Parentesis_der COND_IF_2{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    :} |
    Parentesis_izq error:s COND_IF_2{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    :}
;

COND_IF_2 ::=
    Llave_izq:s STMT_IF {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ { IF_FUNC_TYPE }  ]\n");
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    :}
;

COND ::=
    EXP Igual:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
        System.out.println(3);
        System.out.println(parser.valorTipo(parser.listavalor1,a+"")+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();    
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }            
    :} |
    EXP Diferente:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        } 
    :} |
    EXP Mayor:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
    EXP Mayor_igual:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
    EXP Menor:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
    EXP Menor_igual:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
    EXP And:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
    EXP Or:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |

    IF_FUNC_TYPE Igual:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
   /* IF_FUNC_TYPE Diferente EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    :} |
    IF_FUNC_TYPE Mayor EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    :} |
    IF_FUNC_TYPE Mayor_igual EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    :} |
    IF_FUNC_TYPE Menor EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    :} |
    IF_FUNC_TYPE Menor_igual EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        
    :} |
*/
    IF_FUNC_TYPE And:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
    IF_FUNC_TYPE Or:a EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |

    EXP Igual:a IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
    EXP Diferente:a IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
/*
    EXP Mayor IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    :} |
    EXP Mayor_igual IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    :} |
    EXP Menor IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    :} |
    EXP Menor_igual IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |
*/
    EXP And:a IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
    EXP Or:a IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |

    IF_FUNC_TYPE Igual:a IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }          
    :} |
    IF_FUNC_TYPE And:a IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |
    IF_FUNC_TYPE Or:a IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        System.out.println(3);
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            System.out.println("tipos compatibles");
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    :} |

    IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ IF_FUNC_TYPE ]\n");
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e015 - Condición inválida -> "); 
        Main.error = true;  
    :}
;

STMT_IF ::=
    DECL:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ DECL STMT_IF ]\n"); 
    :}  STMT_IF |
    ACT_PORT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ACT_PORT STMT_IF]\n"); 
    :}  STMT_IF |
    FUNC:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ FUNC STMT_IF ]\n"); 
    :}  STMT_IF |
    IN_OUT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    :} STMT_IF |
    IF_STMT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    :} STMT_IF |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    :} PComa STMT_IF |
    ERROR:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    :} PComa STMT_IF |
    ERROR3:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR3 ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    :} PComa STMT_IF |

    Llave_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ } ]\n"); 
    :} |
    Llave_der Parentesis_der PComa:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ }); ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    :} |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ]\n");
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    :}
    
;

IF_FUNC_TYPE ::=
    
/* --------------------------------- FUNCIONES IF DE WATCHDOG  ----------------------------------------*/
    Micro:s Punto FUNC_TYPE_IF {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
    :}  |

    Camera:s Punto FUNC_TYPE_IF {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
    :}  |
     IsSound Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ IsSound() ]\n"); 
         parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
         System.out.println(1);
    :}  
;

/*--------------------------------------           FOR          --------------------------------------------------*/
FOR_STMT ::=
    For Parentesis_izq Int:b Identificador:s Asignacion Numero_Entero:a {:
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FOR_STMT ::= [ For(TIPO "+s+" = "+a+"; COND ;"+s+" Inc) ]\n");
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(a+""); 
    :} PComa COND PComa Identificador:c Inc Parentesis_der COND_FOR_2
;


COND_FOR_2 ::=
    Llave_izq:s STMT_IF {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ { STMT_IF }  ]\n");
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    :}
;

/*--------------------------------------           WHILE                    --------------------------------------------------*/
While_STMT ::=
    While Parentesis_izq COND Parentesis_der COND_FOR_2{:
     //   Main.arbolSin.add("( "+(sright+1)+" ) ---> While_STMT ::= [ While ( COND ) COND_FOR_2 ]\n");
    :} 
;




/*------------------------------FUNC_TYPE PARA IF DE WATCH para Camera y micro --------------------------------------*/
FUNC_TYPE_IF ::=
    IsOn Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsOn() ]\n"); 
        parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
        System.out.println(1);
    :}  |

    IsMove Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsMove() ]\n"); 
        parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
        System.out.println(1);
    :}  |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE_IF ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    :} 
;

/* ------------------------------------ // ENTRADA - SALIDA  // --------------------------------------------------*/

IN_OUT ::=
    Display:s VALUE_OUT  {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Display VALUE PComa ]\n"); 
    :} PComa |
    Receive:s Parentesis_izq VALUE_IN Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive VALUE PComa ]\n"); 
    :} PComa |
    Receive:s error {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis en el método Receive erronea -> "); 
        Main.error = true;   
    :} PComa
;

VALUE_OUT ::=
    Identificador:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    Numero_Entero:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    Cadena:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis erronea en el método Display -> "); 
        Main.error = true;  
    :}
;

VALUE_IN ::=
    Identificador:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    Numero_Entero:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    Cadena:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis erronea en el método Receive -> "); 
        Main.error = true;  
    :}
;

/* ------------------------------------ // FUNCIONES DE WATCH DOGS  // --------------------------------------------------*/


FUNC ::=
    RecordTime Parentesis_izq Numero_Entero:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ RecordTime("+s+"); ]\n"); 
    :} PComa |

    Micro:s Punto FUNC_TYPE {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    :}  |

    Camera:s Punto FUNC_TYPE {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    :}  |

    Capture Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Capture(); ]\n"); 
    :} PComa |

    Whistle Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Whistle(); ]\n"); 
    :} PComa |

    IsSound Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsSound(); ]\n"); 
    :} PComa |

    Detener Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Detener(); ]\n"); 
    :} PComa   |

    Avanzar Parentesis_izq FUNC_PARAMS Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Avanzar(FUNC_PARAMS); ]\n"); 
    :} PComa |

    Retroceder Parentesis_izq FUNC_PARAMS Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Retroceder(FUNC_PARAMS); ]\n"); 
    :} PComa |

    Punto error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Punto FUNC_TYPE ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    :}
;

FUNC_TYPE ::=

/*---------------------FUNCIONES_TYPE DE WATCHDOGS--------------------------*/

    IsOn Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOn(); ]\n"); 
    :} PComa |

    IsMove Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsMove(); ]\n"); 
    :} PComa |


/*--------------------------------------------------------------------------*/
  
    On Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ On(); ]\n"); 
    :} PComa |
    Off Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    :} PComa |

    Record Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Record(); ]\n"); 
    :} PComa |
    StopRec Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ StopRec(); ]\n"); 
    :} PComa |

    Move Parentesis_izq Cadena:s Coma Numero_Entero:a Coma Numero_Entero:b Parentesis_der{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Move("+s+","+a+","+b+"); ]\n"); 
    :} PComa |

  
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    :} PComa
;

FUNC_PARAMS ::=
    Numero_Entero:s Coma Numero_Entero:a{: 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+","+a+" ]\n"); 
    :} |

    Cadena:a Coma Numero_Entero:b Coma Numero_Entero:c{: 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", "+b+", "+c+" ]\n"); 
    :} |

    Cadena:s Coma THIS_FUNC {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+", THIS_FUNC ]\n"); 
    :} |
    Cadena:a Coma THIS_FUNC Coma Cadena:b{: 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", THIS_FUNC, "+b+" ]\n"); 
    :} |
    error:s{:
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e011 - Sintaxis erronea en la función Program -> "); 
        Main.error = true;  
    :} 
;

THIS_FUNC ::=
    This:s Punto THIS_FUNC_TYPE {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC ::= [ This Punto FUNC_TYPE ]\n"); 
    :}
;

THIS_FUNC_TYPE ::=
    GetTemp Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ GetTemp() ]\n"); 
    :} 
;

/* ------------------------------------ // ACTIVACIÓN DE PUERTO // --------------------------------------------------*/

ACT_PORT ::=
  
    PortD error:s PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    :}
;

ENA_PORT ::=
    Enable Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ Enable() ]\n"); 
    :} |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;  
    :}
;


/* ------------------------------------ // DECLARACIONES // ------------------------------------------------------------*/

DECL ::=
/*------------------------------ SUMA o SOLO ASIGNACION ---------------------------------*/
/*------------------------------- Int  ---------------------------------*/
 Identificador:s Asignacion VALOR:a PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");   
        parser.listavalor1.add(Main.returntipo(s+""));  //agregar Tipo a la arraylist
            if(Main.buscarid(s+"")  ){ //id declarada??
                if(parser.valorTipo(parser.listavalor1,"") ){ //tipos compatibles??
                    parser.listavalor1.clear();
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros "); 
                    Main.error = true;   
                    parser.listavalor1.clear();
                }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
                 parser.listavalor1.clear();
        }
:}   | 
 
      Identificador:s Asignacion EXP PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = EXP PComa ]\n");
        System.out.println(2);
        parser.listavalor1.add(Main.returntipo(s+""));  //agregar Tipo a la arraylist
            if(Main.buscarid(s+"")  ){
            /*    if(parser.valorTipo(parser.listavalor1,w+"") ){
                    parser.listavalor1.clear();
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles  "); 
                    Main.error = true;   
                    parser.listavalor1.clear();
                }*/
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
                 parser.listavalor1.clear();
        }
:}  
;

/*valoresde*/
/*
VALOR ::=
    Numero_Entero:s {:
    parser.listavalor1.add("Int");    //agregar Tipo a la arraylist
     System.out.println(1);
    :} |
    Cadena:s {: 
      Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Text ]\n");
      parser.listavalor1.add("Text");  //agregar Tipo a la arraylist
     
    :} |
    Numero_Flotante:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Float ]\n");
        parser.listavalor1.add("Float");  //agregar Tipo a la arraylist
       
    :} |
    True:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Bool ]\n");
        parser.listavalor1.add("Bool");  //agregar Tipo a la arraylist
   
    :} 
        |
    False:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Bool ]\n");
        parser.listavalor1.add("Bool");  //agregar Tipo a la arraylist
        
    :} 
;
*/

DECL_TIPO ::=
    EXP_LIST:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ EXP_LIST ]\n"); 
    :} |
    DEC_OBJETO:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ DEC_OBJETO ]\n"); 
    :} |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} PComa
;


/* ------------------------------------ // EXPRESIONES // --------------------------------------------------*/

EXP_LIST ::=
    EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP_LIST ::= [ EXP PComa ]\n");
    :} PComa
;

EXP ::= 
            EXP Suma:a EXP:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + EXP ]\n"); 
                if(parser.valorTipo(parser.listavalor1,a+"") ){

                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;     
                    parser.listavalor1.clear();
                }
            :} | 
            EXP Resta:a EXP:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - EXP ]\n");
                if(parser.valorTipo(parser.listavalor1,a+"") ){
                    System.out.println("tipos compatibles");
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;      
                    parser.listavalor1.clear();
                }
            :} | 
            EXP Multiplicacion:a EXP:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * EXP ]\n"); 
                if(parser.valorTipo(parser.listavalor1,a+"") ){

                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;     
                    parser.listavalor1.clear();
                }
            :} | 
            EXP Division:a EXP:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / EXP ]\n"); 
                if(parser.valorTipo(parser.listavalor1,a+"") ){

                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;     
                    parser.listavalor1.clear();
                }
            :} | 
            Parentesis_izq EXP Parentesis_der:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP ) ]\n"); 
                
            :}  |
            Numero_Entero:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listavalor1.add("Int");    //agregar Tipo a la arraylist
                System.out.println(1);
            :} |
            Numero_Flotante:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listavalor1.add("Float");    //agregar Tipo a la arraylist
             //   System.out.println(1);
              
            :} |
         
            Cadena:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listavalor1.add("Text");    //agregar Tipo a la arraylist
                System.out.println(1);
            :} |
            Identificador:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listavalor1.add(Main.returntipo(s+""));  //agregar Tipo a la arraylist
                System.out.println("id");
            :} |
            True:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ True ]\n");
                parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
             //   System.out.println(1);
            :} |
            False:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ False ]\n");
                parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
             //   System.out.println(1);
            :} |

            /* Errores */

            EXP Suma error:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            EXP Resta error:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            EXP Multiplicacion error:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            EXP Division error:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :}  |/*
            error:s Suma EXP {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ error + EXP ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;   
            :} | 
            error:s Resta EXP {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ error - EXP ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            error:s Multiplicacion EXP {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ error * EXP ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            error:s Division EXP {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ error / EXP ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} |*/ 
            Parentesis_izq EXP error:s Parentesis_der {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            :} | 
            Parentesis_izq error:s EXP Parentesis_der {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( error EXP ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            :} | 
            Parentesis_izq error:s Parentesis_der {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP ( error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            :}
;

EXP_2 ::=
     /*------------------------- valores ----------------*/
            Numero_Entero:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            :} |
            Numero_Flotante:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            :} |
            Cadena:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            :} |
            Identificador:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            :} |
            True:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ True ]\n");
            :} |
            False:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ False ]\n");
            :} 
;


/* ------------------------------------ // INSTANCIACIÓN // --------------------------------------------------*/

DEC_OBJETO ::=
    New:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New OBJETO ; ]\n"); 
    :} OBJETO PComa |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;   
    :} OBJETO PComa
;

OBJETO ::=
    Temp:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
  


    /* Errores */

    SmartCamera:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error | 
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> OBJETO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :}
;

OBJ_PARAMETROS ::=
    PortA Parentesis_izq Numero_Entero:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    :} Parentesis_der 
  
;


            
  