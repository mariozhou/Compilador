package Main;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

//-------------------------------- TERMINALES -----------------------------------------------//

terminal
    PComa, Punto, Coma, Comillas_simples, Home, Initialize, PortA, PortB, PortC, PortD, Enable,
    GetTemp, Ac, Set, Start, Shutdown, Light, Off, On, LightRGB, LightMode, Color, Door, Open, New, 
    Close, Lock, Unlock, Window, IsOpen, IsClose, IsLock, IsUnlock, UnlockAt, LockAt, Camera, Temp,
    Record, StopRec, Move, IsMove, Alarm, Device, IsIn, IsOut, Int, Text, Float, Bool, Receive,
    Display, For, While, If, Else, When, Default, Asignacion, Igual, Menor, Mayor, Mayor_igual,
    Menor_igual, Diferente, Suma, Resta, Multiplicacion, Division, And, Or, Inc, Dec, Parentesis_izq,
    Parentesis_der, Corchete_izq, Corchete_der, Llave_izq, Llave_der, Identificador, Numero_Entero,
    Numero_Euler, Numero_Euler_Flotante, ERROR, Cadena, ERROR2, AsignacionArrow, SmartCamera, Program, 
    Numero_Flotante, This, Doorbell, FaceCheck, SaveFace, DeleteFace, True, False, IsOn, Then, Room, ERROR3,
    RecordTime, IsCamaraOff, Avanzar, Retroceder, Detener, IsSound, Whistle, Capture, CamaraOn, CamaraOff, MicroOn, 
    MicroOff, IsCamaraOn, IsOff, Micro


;

//-------------------------------- NO TERMINALES ----------------------------------------------//

non terminal INICIO, STMT_LIST, STMT, DECL, CIERRE, EXP, ENA_PORT, DEC_OBJETO, OBJETO, DECL_TIPO,
             ACT_PORT, OBJ_PARAMETROS, EXP_LIST, FUNC, FUNC_TYPE, FUNC_PARAMS, THIS_FUNC, THIS_FUNC_TYPE, IN_OUT,
             VALUE_IN, VALUE_OUT, IF_STMT, COND, COND_IF, COND_IF_2, IF_FUNC_TYPE, STMT_IF
;

//-------------------------------- NO TERMINAL INICIAL ----------------------------------------//

precedence left Suma, Resta;
precedence left Multiplicacion, Division;

start with INICIO;

//-------------------------------- GRAMATICA --------------------------------------------------//

INICIO ::=

/* Sintaxis Correcta */

    Identificador:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO "+s+".Initialize(Home{ STMT_LIST ]\n"); 
    :} Punto Initialize Parentesis_izq Home Llave_izq STMT_LIST |

/* Método Initialize */

    Identificador error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ "+s+" error { STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e004 - Sintaxis del Metodo Initialize Erronea -> ");  
        Main.error = true;  
    :} STMT_LIST |

/* Error Fuera de Bloque */

    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    :} INICIO |
    ERROR:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    :} INICIO |
    ERROR2:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    :} INICIO |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - No se encontró el Metodo Initialize -> "); 
        Main.error = true; 
    :}
;

/* ------------------------------------ // LISTA DE SENTENCIAS // --------------------------------------------*/

STMT_LIST ::=
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;   
    :} STMT_LIST |
    STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ STMT STMT_LIST ]\n"); 
    :} STMT_LIST |
    IF_STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IF_STMT STMT_LIST ]\n"); 
    :} STMT_LIST |
    CIERRE:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ CIERRE ]\n"); 
    :}
;

/* ------------------------------------------- // CIERRE // -----------------------------------------------------*/

CIERRE ::= 
    Llave_der Parentesis_der PComa:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa ]\n"); 
    :}  |
    Llave_der Parentesis_der PComa error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    :}  |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    :}  |
    ERROR:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    :} |
    ERROR2:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    :} |
    STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    :} |
    IF_STMT:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ IF_STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    :}
;

/* ---------------------------------------- // SENTENCIAS // ------------------------------------------------------*/

STMT ::=
    DECL:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ DECL ]\n"); 
    :}  |
    ACT_PORT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ ACT_PORT ]\n"); 
    :}  |
    FUNC:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ FUNC ]\n"); 
    :}  |
    IN_OUT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ IN_OUT ]\n"); 
    :} |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    :} PComa |
    ERROR:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    :} error PComa |
    ERROR3:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    :} error PComa
;

/* ------------------------------------------- // If  // ---------------------------------------------------------*/

IF_STMT ::=
    If:s COND_IF {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> IF_STMT ::= [ If COND_IF ; ]\n");
    :} 
;

COND_IF ::=
    Parentesis_izq:s COND Parentesis_der COND_IF_2 {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ ( COND ) COND_IF_2 ]\n");
    :} |
    error:s Parentesis_der COND_IF_2{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    :} |
    Parentesis_izq error:s COND_IF_2{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    :}
;

COND_IF_2 ::=
    Llave_izq:s STMT_IF {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ { IF_FUNC_TYPE }  ]\n");
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    :}
;

COND ::=
    EXP Igual EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    :} |
    EXP Diferente EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    :} |
    EXP Mayor EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    :} |
    EXP Mayor_igual EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    :} |
    EXP Menor EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    :} |
    EXP Menor_igual EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |
    EXP And EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    :} |
    EXP Or EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |

    IF_FUNC_TYPE Igual EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    :} |
    IF_FUNC_TYPE Diferente EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    :} |
    IF_FUNC_TYPE Mayor EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    :} |
    IF_FUNC_TYPE Mayor_igual EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    :} |
    IF_FUNC_TYPE Menor EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    :} |
    IF_FUNC_TYPE Menor_igual EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |
    IF_FUNC_TYPE And EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    :} |
    IF_FUNC_TYPE Or EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |

    EXP Igual IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    :} |
    EXP Diferente IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    :} |
    EXP Mayor IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    :} |
    EXP Mayor_igual IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    :} |
    EXP Menor IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    :} |
    EXP Menor_igual IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |
    EXP And IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    :} |
    EXP Or IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |


    IF_FUNC_TYPE Igual IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    :} |
    IF_FUNC_TYPE Diferente IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    :} |
    IF_FUNC_TYPE Mayor IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    :} |
    IF_FUNC_TYPE Mayor_igual IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    :} |
    IF_FUNC_TYPE Menor IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    :} |
    IF_FUNC_TYPE Menor_igual IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |
    IF_FUNC_TYPE And IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |
    IF_FUNC_TYPE Or IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    :} |

    IF_FUNC_TYPE:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ IF_FUNC_TYPE ]\n");
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e015 - Condición inválida -> "); 
        Main.error = true;  
    :}
;

STMT_IF ::=
    DECL:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ DECL STMT_IF ]\n"); 
    :}  STMT_IF |
    ACT_PORT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ACT_PORT STMT_IF]\n"); 
    :}  STMT_IF |
    FUNC:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ FUNC STMT_IF ]\n"); 
    :}  STMT_IF |
    IN_OUT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    :} STMT_IF |
    IF_STMT:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    :} STMT_IF |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    :} PComa STMT_IF |
    ERROR:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    :} PComa STMT_IF |
    ERROR3:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR3 ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    :} PComa STMT_IF |
    Llave_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ } ]\n"); 
    :} |
    Llave_der Parentesis_der PComa:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ }); ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    :} |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ]\n");
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    :}
    
;

IF_FUNC_TYPE ::=
    Identificador:s Punto GetTemp Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".GetTemp() ]\n"); 
    :} |
    Identificador:s Punto Set Parentesis_izq Numero_Entero Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Set("+s+") ]\n"); 
    :} |

    Identificador:s Punto Set Parentesis_izq Identificador:a Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Set("+a+") ]\n"); 
    :} |

    Identificador:s Punto Start Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Start() ]\n"); 
    :} |
    Identificador:s Punto Shutdown Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Shutdown() ]\n"); 
    :} |
    Identificador:s Punto On Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".On() ]\n"); 
    :} |
    Identificador:s Punto Off Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Off() ]\n"); 
    :} |
    Identificador:s Punto LightMode Parentesis_izq Numero_Entero:a Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".LightMode("+a+") ]\n"); 
    :} |
    Identificador:s Punto Color Parentesis_izq Cadena:a Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Color("+a+") ]\n"); 
    :} |

    Identificador:s Punto LightMode Parentesis_izq Identificador:a Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".LightMode("+a+") ]\n"); 
    :} |
    Identificador:s Punto Color Parentesis_izq Identificador:a Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Color("+a+") ]\n"); 
    :} |

    Identificador:s Punto Open Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Open() ]\n"); 
    :} |
    Identificador:s Punto Close Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Close() ]\n"); 
    :} |
    Identificador:s Punto Lock Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Lock() ]\n"); 
    :} |
    Identificador:s Punto Unlock Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Unlock() ]\n"); 
    :} |
    Identificador:s Punto IsOpen Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".IsOpen() ]\n"); 
    :} |
    Identificador:s Punto IsClose Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIF_FUNC_TYPE ::= [ "+s+".IsClose() ]\n"); 
    :} |
    Identificador:s Punto IsLock Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+".IsLock() ]\n"); 
    :} |
    Identificador:s Punto IsOn Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+".IsLock() ]\n"); 
    :} |
    Identificador:s Punto IsUnlock Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".IsUnlock() ]\n"); 
    :} |
    Identificador:s Punto Doorbell Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Doorbell() ]\n"); 
    :} |
    Identificador:s Punto Record Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Record() ]\n"); 
    :} |
    Identificador:s Punto StopRec Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".StopRec() ]\n"); 
    :} |
    Identificador:a Punto Move Parentesis_izq Cadena:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+a+".Move("+s+") ]\n"); 
    :} |

    Identificador:a Punto Move Parentesis_izq Identificador:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+a+".Move("+s+") ]\n"); 
    :} |

    Identificador:s Punto FaceCheck Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".FaceCheck() ]\n"); 
    :} |
    Identificador:s Punto SaveFace Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".SaveFace() ]\n"); 
    :} |
    Identificador:s Punto DeleteFace Parentesis_izq Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".DeleteFace() ]\n"); 
    :}
;

/* ------------------------------------ // ENTRADA - SALIDA  // --------------------------------------------------*/

IN_OUT ::=
    Display:s VALUE_OUT  {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Display VALUE PComa ]\n"); 
    :} PComa |
    Receive:s Parentesis_izq VALUE_IN Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive VALUE PComa ]\n"); 
    :} PComa |
    Receive:s error {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis en el método Receive erronea -> "); 
        Main.error = true;   
    :} PComa
;

VALUE_OUT ::=
    Identificador:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    Numero_Entero:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    Cadena:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis erronea en el método Display -> "); 
        Main.error = true;  
    :}
;

VALUE_IN ::=
    Identificador:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    Numero_Entero:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    Cadena:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    :} |
    error:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis erronea en el método Receive -> "); 
        Main.error = true;  
    :}
;

/* ------------------------------------ // FUNCIONES  // --------------------------------------------------*/


FUNC ::=



/* --------------------------------- FUNCIONES DE WATCHDOG  ----------------------------------------*/
    Micro:s Punto FUNC_TYPE {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    :}  |

    Camera:s Punto FUNC_TYPE {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    :}  |

    RecordTime Parentesis_izq Numero_Entero:s Parentesis_der{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ RecordTime("+s+"); ]\n"); 
    :} PComa |
    
    Capture Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Capture(); ]\n"); 
    :} PComa |

    IsCamaraOn Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsCamaraOn(); ]\n"); 
    :} PComa |

    IsMove Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsMove(); ]\n"); 
    :} PComa |
  
    Whistle Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Whistle(); ]\n"); 
    :} PComa |

    MicroOn Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ MicroOn(); ]\n"); 
    :} PComa |

    MicroOff Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ MicroOff(); ]\n"); 
    :} PComa |
    IsSound Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsSound(); ]\n"); 
    :} PComa |
    Avanzar Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Avanzar(); ]\n"); 
    :} PComa |
    Retroceder Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Retroceder(); ]\n"); 
    :} PComa |
    Detener Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Detener(); ]\n"); 
    :} PComa  |

    CamaraOn Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ CamaraOn(); ]\n"); 
    :} PComa |

     On Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ On(); ]\n"); 
    :} PComa |

/*
    CamaraOff Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ CamaraOff(); ]\n"); 
    :} PComa |
*/

GetTemp Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ GetTemp(); ]\n"); 
    :} PComa |

    Move Parentesis_izq Cadena:s Parentesis_der{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Move("+s+"); ]\n"); 
    :} PComa 




;


FUNC_TYPE ::=
    GetTemp Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ GetTemp(); ]\n"); 
    :} PComa |
    Set Parentesis_izq Numero_Entero:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Set("+s+"); ]\n"); 
    :} PComa |

    Set Parentesis_izq Identificador:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Set("+s+"); ]\n"); 
    :} PComa |

    Program Parentesis_izq FUNC_PARAMS Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Program(FUNC_PARAMS); ]\n"); 
    :} PComa |
    
    Start Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    :} PComa |
    Shutdown Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    :} PComa |
    LightMode Parentesis_izq Numero_Entero:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ LightMode("+s+"); ]\n"); 
    :} PComa |
    Color Parentesis_izq Cadena:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Color("+s+"); ]\n"); 
    :} PComa |

    LightMode Parentesis_izq Identificador:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ LightMode("+s+"); ]\n"); 
    :} PComa |
    Color Parentesis_izq Identificador:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Color("+s+"); ]\n"); 
    :} PComa |

    Open Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Open(); ]\n"); 
    :} PComa |
    Close Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Close(); ]\n"); 
    :} PComa |
    Lock Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Lock(); ]\n"); 
    :} PComa |
    Unlock Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Unlock(); ]\n"); 
    :} PComa |
    IsOpen Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOpen(); ]\n"); 
    :} PComa |
    IsClose Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsClose(); ]\n"); 
    :} PComa |
    IsLock Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsLock(); ]\n"); 
    :} PComa |
    IsUnlock Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsUnlock(); ]\n"); 
    :} PComa |
    Doorbell Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Doorbell(); ]\n"); 
    :} PComa |
    Record Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Record(); ]\n"); 
    :} PComa |
    StopRec Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ StopRec(); ]\n"); 
    :} PComa |

   
/*
    Move Parentesis_izq Identificador:s Parentesis_der{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Move("+s+"); ]\n"); 
    :} PComa |
*/

    FaceCheck Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ FaceCheck(); ]\n"); 
    :} PComa |
    SaveFace Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ SaveFace(); ]\n"); 
    :} PComa |
    DeleteFace Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ DeleteFace(); ]\n"); 
    :} PComa |

/*--------------------FUNC_TYPE de  WATCHDOGS ---------------------------*/
     
    On Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ On(); ]\n"); 
    :} PComa |
    Off Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    :} PComa |
    
    Move Parentesis_izq Cadena:s Parentesis_der{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Move("+s+"); ]\n"); 
    :} PComa |
  

    IsOn Parentesis_izq Parentesis_der:s{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOn(); ]\n"); 
    :} PComa |




    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - SQintaxis errona en la Función -> "); 
        Main.error = true;  
    :} PComa

;



FUNC_PARAMS ::=
    Cadena:s Coma THIS_FUNC {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+", THIS_FUNC ]\n"); 
    :} |
    Cadena:a Coma THIS_FUNC Coma Cadena:b{: 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", THIS_FUNC, "+b+" ]\n"); 
    :} |

/*jkhhuhhj*/
    Cadena:a Coma Cadena:b Coma Cadena:c{: 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", "+b+", "+c+" ]\n"); 
    :} |

    error:s{:
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e011 - Sintaxis erronea en la función Program -> "); 
        Main.error = true;  
    :} 
;

THIS_FUNC ::=
    This:s Punto THIS_FUNC_TYPE {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC ::= [ This Punto FUNC_TYPE ]\n"); 
    :}
;

THIS_FUNC_TYPE ::=
    GetTemp Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ GetTemp() ]\n"); 
    :} |
    Set Parentesis_izq Numero_Entero:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Set("+s+") ]\n"); 
    :} |
    Start Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Start() ]\n"); 
    :} |
    Shutdown Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Shutdown() ]\n"); 
    :} |

    Set Parentesis_izq Identificador:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Set("+s+") ]\n"); 
    :} |

    On Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ On() ]\n"); 
    :} |
    Off Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Off() ]\n"); 
    :} |
    LightMode Parentesis_izq Numero_Entero:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ LightMode("+s+") ]\n"); 
    :} |
    Color Parentesis_izq Cadena:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Color("+s+") ]\n"); 
    :} |

    LightMode Parentesis_izq Identificador:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ LightMode("+s+") ]\n"); 
    :} |
    Color Parentesis_izq Identificador:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Color("+s+") ]\n"); 
    :} |

    Open Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Open() ]\n"); 
    :} |
    Close Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Close() ]\n"); 
    :} |
    Lock Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Lock() ]\n"); 
    :} |
    Unlock Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Unlock() ]\n"); 
    :} |
    IsOpen Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsOpen() ]\n"); 
    :} |
    IsClose Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsClose() ]\n"); 
    :} |
    IsLock Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsLock() ]\n"); 
    :} |
    IsUnlock Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsUnlock() ]\n"); 
    :} |
    Doorbell Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Doorbell() ]\n"); 
    :} |
    Record Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Record() ]\n"); 
    :} |
    StopRec Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ StopRec() ]\n"); 
    :} |
    Move Parentesis_izq Cadena:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Move("+s+") ]\n"); 
    :} |

  /*  Move Parentesis_izq Identificador:s Parentesis_der {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Move("+s+") ]\n"); 
    :} |
*/

    FaceCheck Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ FaceCheck() ]\n"); 
    :} |
    SaveFace Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ SaveFace() ]\n"); 
    :} |
    DeleteFace Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ DeleteFace() ]\n"); 
    :}
;

/* ------------------------------------ // ACTIVACIÓN DE PUERTO // --------------------------------------------------*/

ACT_PORT ::=
    PortA:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortA => ENA_PORT PComa ]\n"); 
    :} AsignacionArrow ENA_PORT PComa |
    PortB:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortB => ENA_PORT PComa ]\n"); 
    :} AsignacionArrow ENA_PORT PComa |
    PortC:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortC => ENA_PORT PComa ]\n"); 
    :} AsignacionArrow ENA_PORT PComa |
    PortD:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => ENA_PORT PComa ]\n"); 
    :} AsignacionArrow ENA_PORT PComa |

    /* Errores */

    PortA error:s PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortA => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    :} |
    PortB error:s PComa {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortB => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    :} |
    PortC error:s PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortC => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    :} |
    PortD error:s PComa{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    :}
;

ENA_PORT ::=
    Enable Parentesis_izq Parentesis_der:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ Enable() ]\n"); 
    :} |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;  
    :}
;

/* ------------------------------------ // DECLARACIONES // ------------------------------------------------------------*/

DECL ::=
    Identificador:s Asignacion DECL_TIPO{: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ "+s+" = DECL_TIPO ]\n");
        Main.listaIdValor.add(s+"");
    :}  |

    /* Errores */

    Temp:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Ac:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Light:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    LightRGB:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Door:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Window:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Camera:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Alarm:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Device:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    SmartCamera:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Home:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Initialize:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    PortA:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    PortB:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    PortC:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    PortD:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    New:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa |
    Enable:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} Asignacion error PComa 
;

DECL_TIPO ::=
    EXP_LIST:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ EXP_LIST ]\n"); 
    :} |
    DEC_OBJETO:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ DEC_OBJETO ]\n"); 
    :} |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    :} PComa
;

/* ------------------------------------ // INSTANCIACIÓN // --------------------------------------------------*/

DEC_OBJETO ::=
    New:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New OBJETO ; ]\n"); 
    :} OBJETO PComa |
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;   
    :} OBJETO PComa
;

OBJETO ::=
    Temp:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
    Ac:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Ac( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
    Light:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Light( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
    LightRGB:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ LightRGB( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
    Door:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Door( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
    Window:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Window( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
    Camera:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Camera( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
    Alarm:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Alarm( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
    Device:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Device( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |
    SmartCamera:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera( OBJ_PARAMETROS ) ]\n"); 
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der |



    /* Errores */

    Temp:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error |
    Ac:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Ac error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error |
    Light:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Light error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error |
    LightRGB:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ LightRGB error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error |
    Door:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Door error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error |
    Window:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Window error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error |
    Camera:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Camera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error |
    Alarm:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Alarm error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error |
    Device:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Device error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error |
    SmartCamera:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} error | /*
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ error( OBJ_PARAMETROS ) ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :} Parentesis_izq OBJ_PARAMETROS Parentesis_der | */
    error:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> OBJETO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    :}
;

OBJ_PARAMETROS ::=
    PortA Parentesis_izq Numero_Entero:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    :} Parentesis_der |
    PortB Parentesis_izq Numero_Entero:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortB ( "+s+" ) ]\n"); 
    :} Parentesis_der |
    PortC Parentesis_izq Numero_Entero:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortC ( "+s+" ) ]\n"); 
    :} Parentesis_der |
    PortD Parentesis_izq Numero_Entero:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortD ( "+s+" ) ]\n"); 
    :} Parentesis_der |

    PortA Parentesis_izq Identificador:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    :} Parentesis_der |
    PortB Parentesis_izq Identificador:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortB ( "+s+" ) ]\n"); 
    :} Parentesis_der |
    PortC Parentesis_izq Identificador:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortC ( "+s+" ) ]\n"); 
    :} Parentesis_der |
    PortD Parentesis_izq Identificador:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortD ( "+s+" ) ]\n"); 
    :} Parentesis_der
;

/* ------------------------------------ // EXPRESIONES // --------------------------------------------------*/

EXP_LIST ::=
    EXP:s {: 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP_LIST ::= [ EXP PComa ]\n");
    :} PComa
;
EXP ::= 
            EXP Suma EXP:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + EXP ]\n"); 
            :} | 
            EXP Resta EXP:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - EXP ]\n"); 
            :} | 
            EXP Multiplicacion EXP:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * EXP ]\n"); 
            :} | 
            EXP Division EXP:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / EXP ]\n"); 
            :} | 
            Parentesis_izq EXP Parentesis_der:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP ) ]\n"); 
            :}  |
            Numero_Entero:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            :} |
            Numero_Flotante:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            :} |
            Numero_Euler:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n"); 
            :} |
            Numero_Euler_Flotante:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            :} |
            Cadena:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            :} |
            Identificador:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            :} |
            True:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ True ]\n");
            :} |
            False:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ False ]\n");
            :} |

            /* Errores */

            EXP Suma error:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            EXP Resta error:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            EXP Multiplicacion error:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            EXP Division error:s {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :}  |/*
            error:s Suma EXP {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ error + EXP ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;   
            :} | 
            error:s Resta EXP {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ error - EXP ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            error:s Multiplicacion EXP {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ error * EXP ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} | 
            error:s Division EXP {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ error / EXP ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            :} |*/ 
            Parentesis_izq EXP error:s Parentesis_der {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            :} | 
            Parentesis_izq error:s EXP Parentesis_der {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( error EXP ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            :} | 
            Parentesis_izq error:s Parentesis_der {: 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP ( error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            :}
;