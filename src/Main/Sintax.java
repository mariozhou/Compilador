
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 24 23:50:39 MDT 2021
//----------------------------------------------------

package Main;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 24 23:50:39 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u018d\000\002\002\004\000\002\035\002\000\002\002" +
    "\012\000\002\036\002\000\002\002\006\000\002\037\002" +
    "\000\002\002\005\000\002\040\002\000\002\002\005\000" +
    "\002\041\002\000\002\002\005\000\002\002\003\000\002" +
    "\042\002\000\002\003\005\000\002\043\002\000\002\003" +
    "\005\000\002\044\002\000\002\003\005\000\002\003\003" +
    "\000\002\006\005\000\002\006\006\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\045\002\000\002\004\005" +
    "\000\002\046\002\000\002\004\006\000\002\047\002\000" +
    "\002\004\006\000\002\027\004\000\002\031\006\000\002" +
    "\031\005\000\002\031\005\000\002\031\003\000\002\032" +
    "\004\000\002\032\003\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\030\003\000\002" +
    "\050\002\000\002\034\005\000\002\051\002\000\002\034" +
    "\005\000\002\052\002\000\002\034\005\000\002\053\002" +
    "\000\002\034\005\000\002\054\002\000\002\034\005\000" +
    "\002\055\002\000\002\034\006\000\002\056\002\000\002" +
    "\034\006\000\002\057\002\000\002\034\006\000\002\034" +
    "\003\000\002\034\005\000\002\034\003\000\002\033\007" +
    "\000\002\033\010\000\002\033\010\000\002\033\007\000" +
    "\002\033\007\000\002\033\007\000\002\033\007\000\002" +
    "\033\010\000\002\033\010\000\002\033\010\000\002\033" +
    "\010\000\002\033\007\000\002\033\007\000\002\033\007" +
    "\000\002\033\007\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\033\007\000\002\033\007\000\002\033" +
    "\010\000\002\033\010\000\002\033\007\000\002\033\007" +
    "\000\002\033\007\000\002\060\002\000\002\024\006\000" +
    "\002\061\002\000\002\024\010\000\002\062\002\000\002" +
    "\024\006\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\017\005\000" +
    "\002\017\005\000\002\063\002\000\002\017\010\000\002" +
    "\064\002\000\002\017\007\000\002\065\002\000\002\017" +
    "\007\000\002\066\002\000\002\017\007\000\002\067\002" +
    "\000\002\017\007\000\002\070\002\000\002\017\007\000" +
    "\002\071\002\000\002\017\007\000\002\072\002\000\002" +
    "\017\007\000\002\073\002\000\002\017\007\000\002\074" +
    "\002\000\002\017\007\000\002\075\002\000\002\017\007" +
    "\000\002\076\002\000\002\017\007\000\002\077\002\000" +
    "\002\017\007\000\002\100\002\000\002\017\007\000\002" +
    "\101\002\000\002\017\010\000\002\102\002\000\002\020" +
    "\007\000\002\103\002\000\002\020\010\000\002\104\002" +
    "\000\002\020\010\000\002\105\002\000\002\020\010\000" +
    "\002\106\002\000\002\020\007\000\002\107\002\000\002" +
    "\020\007\000\002\110\002\000\002\020\010\000\002\111" +
    "\002\000\002\020\010\000\002\112\002\000\002\020\010" +
    "\000\002\113\002\000\002\020\010\000\002\114\002\000" +
    "\002\020\007\000\002\115\002\000\002\020\007\000\002" +
    "\116\002\000\002\020\007\000\002\117\002\000\002\020" +
    "\007\000\002\120\002\000\002\020\007\000\002\121\002" +
    "\000\002\020\007\000\002\122\002\000\002\020\007\000" +
    "\002\123\002\000\002\020\007\000\002\124\002\000\002" +
    "\020\007\000\002\125\002\000\002\020\007\000\002\126" +
    "\002\000\002\020\007\000\002\127\002\000\002\020\007" +
    "\000\002\130\002\000\002\020\007\000\002\131\002\000" +
    "\002\020\007\000\002\132\002\000\002\020\007\000\002" +
    "\133\002\000\002\020\007\000\002\134\002\000\002\020" +
    "\010\000\002\135\002\000\002\020\007\000\002\136\002" +
    "\000\002\020\005\000\002\021\005\000\002\021\007\000" +
    "\002\021\007\000\002\021\003\000\002\022\005\000\002" +
    "\023\005\000\002\023\006\000\002\023\005\000\002\023" +
    "\005\000\002\023\006\000\002\023\005\000\002\023\005" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\006\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\137\002\000\002\014\007\000\002\140\002\000\002\014" +
    "\007\000\002\141\002\000\002\014\007\000\002\142\002" +
    "\000\002\014\007\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\010\005\000\002" +
    "\010\003\000\002\005\005\000\002\143\002\000\002\005" +
    "\007\000\002\144\002\000\002\005\007\000\002\145\002" +
    "\000\002\005\007\000\002\146\002\000\002\005\007\000" +
    "\002\147\002\000\002\005\007\000\002\150\002\000\002" +
    "\005\007\000\002\151\002\000\002\005\007\000\002\152" +
    "\002\000\002\005\007\000\002\153\002\000\002\005\007" +
    "\000\002\154\002\000\002\005\007\000\002\155\002\000" +
    "\002\005\007\000\002\156\002\000\002\005\007\000\002" +
    "\157\002\000\002\005\007\000\002\160\002\000\002\005" +
    "\007\000\002\161\002\000\002\005\007\000\002\162\002" +
    "\000\002\005\007\000\002\163\002\000\002\005\007\000" +
    "\002\164\002\000\002\005\007\000\002\013\003\000\002" +
    "\013\003\000\002\165\002\000\002\013\005\000\002\166" +
    "\002\000\002\011\006\000\002\167\002\000\002\011\006" +
    "\000\002\170\002\000\002\012\007\000\002\171\002\000" +
    "\002\012\007\000\002\172\002\000\002\012\007\000\002" +
    "\173\002\000\002\012\007\000\002\174\002\000\002\012" +
    "\007\000\002\175\002\000\002\012\007\000\002\176\002" +
    "\000\002\012\007\000\002\177\002\000\002\012\007\000" +
    "\002\200\002\000\002\012\007\000\002\201\002\000\002" +
    "\012\007\000\002\202\002\000\002\012\005\000\002\203" +
    "\002\000\002\012\005\000\002\204\002\000\002\012\005" +
    "\000\002\205\002\000\002\012\005\000\002\206\002\000" +
    "\002\012\005\000\002\207\002\000\002\012\005\000\002" +
    "\210\002\000\002\012\005\000\002\211\002\000\002\012" +
    "\005\000\002\212\002\000\002\012\005\000\002\213\002" +
    "\000\002\012\005\000\002\012\003\000\002\214\002\000" +
    "\002\015\007\000\002\215\002\000\002\015\007\000\002" +
    "\216\002\000\002\015\007\000\002\217\002\000\002\015" +
    "\007\000\002\220\002\000\002\015\007\000\002\221\002" +
    "\000\002\015\007\000\002\222\002\000\002\015\007\000" +
    "\002\223\002\000\002\015\007\000\002\224\002\000\002" +
    "\016\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\006\000\002\007\006" +
    "\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0347\000\012\003\004\122\007\126\005\130\006\001" +
    "\002\000\014\002\ufff6\003\ufffc\122\ufffc\126\ufffc\130\ufffc" +
    "\001\002\000\012\003\ufffa\122\ufffa\126\ufffa\130\ufffa\001" +
    "\002\000\012\003\ufff8\122\ufff8\126\ufff8\130\ufff8\001\002" +
    "\000\006\003\012\005\000\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\130\003\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\024\ufffe\026\ufffe\027\ufffe\032\ufffe\034\ufffe" +
    "\040\ufffe\047\ufffe\050\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\065\ufffe\066\ufffe\071\ufffe\121\ufffe\122\ufffe\126\ufffe" +
    "\130\ufffe\132\ufffe\147\ufffe\150\ufffe\152\ufffe\153\ufffe\154" +
    "\ufffe\155\ufffe\156\ufffe\157\ufffe\160\ufffe\162\ufffe\163\ufffe" +
    "\164\ufffe\166\ufffe\001\002\000\004\005\014\001\002\000" +
    "\004\011\015\001\002\000\004\114\016\001\002\000\004" +
    "\010\017\001\002\000\004\120\020\001\002\000\130\003" +
    "\052\010\023\011\051\012\100\013\077\014\075\015\074" +
    "\016\062\017\054\020\066\024\031\026\022\027\026\032" +
    "\057\034\067\040\036\047\072\050\021\053\027\054\046" +
    "\055\101\056\043\065\103\066\050\071\024\121\055\122" +
    "\070\126\060\130\045\132\037\147\044\150\033\152\064" +
    "\153\042\154\025\155\073\156\056\157\047\160\071\162" +
    "\040\163\032\164\102\166\030\001\002\000\004\075\ufeef" +
    "\001\002\000\004\114\u033a\001\002\000\004\075\ufedb\001" +
    "\002\000\006\003\u0284\114\u0283\001\002\000\004\114\u027f" +
    "\001\002\000\004\075\ufee9\001\002\000\004\114\u0276\001" +
    "\002\000\004\005\u0274\001\002\000\004\075\ufeeb\001\002" +
    "\000\004\114\u026c\001\002\000\004\114\u0267\001\002\000" +
    "\132\002\uffe7\003\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\024\uffe7\026" +
    "\uffe7\027\uffe7\032\uffe7\034\uffe7\040\uffe7\047\uffe7\050\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\065\uffe7\066\uffe7\071" +
    "\uffe7\121\uffe7\122\uffe7\126\uffe7\130\uffe7\132\uffe7\147\uffe7" +
    "\150\uffe7\152\uffe7\153\uffe7\154\uffe7\155\uffe7\156\uffe7\157" +
    "\uffe7\160\uffe7\162\uffe7\163\uffe7\164\uffe7\166\uffe7\001\002" +
    "\000\004\002\uffff\001\002\000\004\075\ufee5\001\002\000" +
    "\004\075\ufedd\001\002\000\004\114\u025b\001\002\000\132" +
    "\002\uffe9\003\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\024\ufff3\026\ufff3" +
    "\027\ufff3\032\ufff3\034\ufff3\040\ufff3\047\ufff3\050\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\065\ufff3\066\ufff3\071\ufff3" +
    "\121\ufff3\122\ufff3\126\ufff3\130\ufff3\132\ufff3\147\ufff3\150" +
    "\ufff3\152\ufff3\153\ufff3\154\ufff3\155\ufff3\156\ufff3\157\ufff3" +
    "\160\ufff3\162\ufff3\163\ufff3\164\ufff3\166\ufff3\001\002\000" +
    "\004\114\u0255\001\002\000\004\075\ufedf\001\002\000\004" +
    "\003\uffdf\001\002\000\004\002\uffea\001\002\000\004\114" +
    "\u024a\001\002\000\004\114\u0246\001\002\000\012\003\u0240" +
    "\122\u0242\123\u0241\127\u0243\001\002\000\004\075\ufed9\001" +
    "\002\000\134\002\uffec\003\ufff5\004\uffe3\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\024\ufff5\026\ufff5\027\ufff5\032\ufff5\034\ufff5\040\ufff5" +
    "\047\ufff5\050\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\065" +
    "\ufff5\066\ufff5\071\ufff5\121\ufff5\122\ufff5\126\ufff5\130\ufff5" +
    "\132\ufff5\147\ufff5\150\ufff5\152\ufff5\153\ufff5\154\ufff5\155" +
    "\ufff5\156\ufff5\157\ufff5\160\ufff5\162\ufff5\163\ufff5\164\ufff5" +
    "\166\ufff5\001\002\000\132\002\uffe4\003\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\024\uffe4\026\uffe4\027\uffe4\032\uffe4\034\uffe4\040" +
    "\uffe4\047\uffe4\050\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\065\uffe4\066\uffe4\071\uffe4\121\uffe4\122\uffe4\126\uffe4\130" +
    "\uffe4\132\uffe4\147\uffe4\150\uffe4\152\uffe4\153\uffe4\154\uffe4" +
    "\155\uffe4\156\uffe4\157\uffe4\160\uffe4\162\uffe4\163\uffe4\164" +
    "\uffe4\166\uffe4\001\002\000\004\114\u0233\001\002\000\004" +
    "\115\u0230\001\002\000\004\114\u022c\001\002\000\004\075" +
    "\ufee7\001\002\000\006\002\uffeb\003\uffe1\001\002\000\132" +
    "\002\uffe6\003\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\024\uffe6\026\uffe6" +
    "\027\uffe6\032\uffe6\034\uffe6\040\uffe6\047\uffe6\050\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\065\uffe6\066\uffe6\071\uffe6" +
    "\121\uffe6\122\uffe6\126\uffe6\130\uffe6\132\uffe6\147\uffe6\150" +
    "\uffe6\152\uffe6\153\uffe6\154\uffe6\155\uffe6\156\uffe6\157\uffe6" +
    "\160\uffe6\162\uffe6\163\uffe6\164\uffe6\166\uffe6\001\002\000" +
    "\004\075\ufecd\001\002\000\132\002\uffe8\003\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\024\ufff1\026\ufff1\027\ufff1\032\ufff1\034\ufff1" +
    "\040\ufff1\047\ufff1\050\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\065\ufff1\066\ufff1\071\ufff1\121\ufff1\122\ufff1\126\ufff1" +
    "\130\ufff1\132\ufff1\147\ufff1\150\ufff1\152\ufff1\153\ufff1\154" +
    "\ufff1\155\ufff1\156\ufff1\157\ufff1\160\ufff1\162\ufff1\163\ufff1" +
    "\164\ufff1\166\ufff1\001\002\000\004\114\u021b\001\002\000" +
    "\132\002\uffe5\003\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\024\uffe5\026" +
    "\uffe5\027\uffe5\032\uffe5\034\uffe5\040\uffe5\047\uffe5\050\uffe5" +
    "\053\uffe5\054\uffe5\055\uffe5\056\uffe5\065\uffe5\066\uffe5\071" +
    "\uffe5\121\uffe5\122\uffe5\126\uffe5\130\uffe5\132\uffe5\147\uffe5" +
    "\150\uffe5\152\uffe5\153\uffe5\154\uffe5\155\uffe5\156\uffe5\157" +
    "\uffe5\160\uffe5\162\uffe5\163\uffe5\164\uffe5\166\uffe5\001\002" +
    "\000\004\075\ufeed\001\002\000\004\075\ufecf\001\002\000" +
    "\004\075\u017e\001\002\000\004\114\u017a\001\002\000\006" +
    "\005\211\075\ufee3\001\002\000\004\114\204\001\002\000" +
    "\010\003\173\075\ufed1\131\ufef8\001\002\000\010\003\161" +
    "\075\ufed3\131\ufefa\001\002\000\004\002\uffef\001\002\000" +
    "\010\003\150\075\ufed5\131\ufefc\001\002\000\010\003\131" +
    "\075\ufed7\131\ufefe\001\002\000\004\075\ufee1\001\002\000" +
    "\004\114\120\001\002\000\006\003\104\114\105\001\002" +
    "\000\004\004\uff81\001\002\000\012\003\107\122\111\123" +
    "\110\127\112\001\002\000\004\115\113\001\002\000\004" +
    "\115\uff78\001\002\000\004\115\uff7a\001\002\000\004\115" +
    "\uff7b\001\002\000\004\115\uff79\001\002\000\004\004\uff83" +
    "\001\002\000\004\004\115\001\002\000\132\002\uff82\003" +
    "\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82" +
    "\016\uff82\017\uff82\020\uff82\024\uff82\026\uff82\027\uff82\032" +
    "\uff82\034\uff82\040\uff82\047\uff82\050\uff82\053\uff82\054\uff82" +
    "\055\uff82\056\uff82\065\uff82\066\uff82\071\uff82\121\uff82\122" +
    "\uff82\126\uff82\130\uff82\132\uff82\147\uff82\150\uff82\152\uff82" +
    "\153\uff82\154\uff82\155\uff82\156\uff82\157\uff82\160\uff82\162" +
    "\uff82\163\uff82\164\uff82\166\uff82\001\002\000\004\004\117" +
    "\001\002\000\132\002\uff80\003\uff80\010\uff80\011\uff80\012" +
    "\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80" +
    "\024\uff80\026\uff80\027\uff80\032\uff80\034\uff80\040\uff80\047" +
    "\uff80\050\uff80\053\uff80\054\uff80\055\uff80\056\uff80\065\uff80" +
    "\066\uff80\071\uff80\121\uff80\122\uff80\126\uff80\130\uff80\132" +
    "\uff80\147\uff80\150\uff80\152\uff80\153\uff80\154\uff80\155\uff80" +
    "\156\uff80\157\uff80\160\uff80\162\uff80\163\uff80\164\uff80\166" +
    "\uff80\001\002\000\004\115\121\001\002\000\004\004\uff71" +
    "\001\002\000\004\004\123\001\002\000\132\002\uff70\003" +
    "\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70\015\uff70" +
    "\016\uff70\017\uff70\020\uff70\024\uff70\026\uff70\027\uff70\032" +
    "\uff70\034\uff70\040\uff70\047\uff70\050\uff70\053\uff70\054\uff70" +
    "\055\uff70\056\uff70\065\uff70\066\uff70\071\uff70\121\uff70\122" +
    "\uff70\126\uff70\130\uff70\132\uff70\147\uff70\150\uff70\152\uff70" +
    "\153\uff70\154\uff70\155\uff70\156\uff70\157\uff70\160\uff70\162" +
    "\uff70\163\uff70\164\uff70\166\uff70\001\002\000\004\075\125" +
    "\001\002\000\004\003\126\001\002\000\004\004\127\001" +
    "\002\000\132\002\ufee0\003\ufee0\010\ufee0\011\ufee0\012\ufee0" +
    "\013\ufee0\014\ufee0\015\ufee0\016\ufee0\017\ufee0\020\ufee0\024" +
    "\ufee0\026\ufee0\027\ufee0\032\ufee0\034\ufee0\040\ufee0\047\ufee0" +
    "\050\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0\065\ufee0\066" +
    "\ufee0\071\ufee0\121\ufee0\122\ufee0\126\ufee0\130\ufee0\132\ufee0" +
    "\147\ufee0\150\ufee0\152\ufee0\153\ufee0\154\ufee0\155\ufee0\156" +
    "\ufee0\157\ufee0\160\ufee0\162\ufee0\163\ufee0\164\ufee0\166\ufee0" +
    "\001\002\000\004\075\143\001\002\000\004\004\142\001" +
    "\002\000\004\131\133\001\002\000\006\003\135\016\134" +
    "\001\002\000\004\114\140\001\002\000\004\004\ufef1\001" +
    "\002\000\004\004\137\001\002\000\132\002\ufefd\003\ufefd" +
    "\010\ufefd\011\ufefd\012\ufefd\013\ufefd\014\ufefd\015\ufefd\016" +
    "\ufefd\017\ufefd\020\ufefd\024\ufefd\026\ufefd\027\ufefd\032\ufefd" +
    "\034\ufefd\040\ufefd\047\ufefd\050\ufefd\053\ufefd\054\ufefd\055" +
    "\ufefd\056\ufefd\065\ufefd\066\ufefd\071\ufefd\121\ufefd\122\ufefd" +
    "\126\ufefd\130\ufefd\132\ufefd\147\ufefd\150\ufefd\152\ufefd\153" +
    "\ufefd\154\ufefd\155\ufefd\156\ufefd\157\ufefd\160\ufefd\162\ufefd" +
    "\163\ufefd\164\ufefd\166\ufefd\001\002\000\004\115\141\001" +
    "\002\000\004\004\ufef2\001\002\000\132\002\ufef6\003\ufef6" +
    "\010\ufef6\011\ufef6\012\ufef6\013\ufef6\014\ufef6\015\ufef6\016" +
    "\ufef6\017\ufef6\020\ufef6\024\ufef6\026\ufef6\027\ufef6\032\ufef6" +
    "\034\ufef6\040\ufef6\047\ufef6\050\ufef6\053\ufef6\054\ufef6\055" +
    "\ufef6\056\ufef6\065\ufef6\066\ufef6\071\ufef6\121\ufef6\122\ufef6" +
    "\126\ufef6\130\ufef6\132\ufef6\147\ufef6\150\ufef6\152\ufef6\153" +
    "\ufef6\154\ufef6\155\ufef6\156\ufef6\157\ufef6\160\ufef6\162\ufef6" +
    "\163\ufef6\164\ufef6\166\ufef6\001\002\000\004\003\144\001" +
    "\002\000\004\004\145\001\002\000\132\002\ufed6\003\ufed6" +
    "\010\ufed6\011\ufed6\012\ufed6\013\ufed6\014\ufed6\015\ufed6\016" +
    "\ufed6\017\ufed6\020\ufed6\024\ufed6\026\ufed6\027\ufed6\032\ufed6" +
    "\034\ufed6\040\ufed6\047\ufed6\050\ufed6\053\ufed6\054\ufed6\055" +
    "\ufed6\056\ufed6\065\ufed6\066\ufed6\071\ufed6\121\ufed6\122\ufed6" +
    "\126\ufed6\130\ufed6\132\ufed6\147\ufed6\150\ufed6\152\ufed6\153" +
    "\ufed6\154\ufed6\155\ufed6\156\ufed6\157\ufed6\160\ufed6\162\ufed6" +
    "\163\ufed6\164\ufed6\166\ufed6\001\002\000\004\075\155\001" +
    "\002\000\004\131\152\001\002\000\004\004\151\001\002" +
    "\000\132\002\ufef5\003\ufef5\010\ufef5\011\ufef5\012\ufef5\013" +
    "\ufef5\014\ufef5\015\ufef5\016\ufef5\017\ufef5\020\ufef5\024\ufef5" +
    "\026\ufef5\027\ufef5\032\ufef5\034\ufef5\040\ufef5\047\ufef5\050" +
    "\ufef5\053\ufef5\054\ufef5\055\ufef5\056\ufef5\065\ufef5\066\ufef5" +
    "\071\ufef5\121\ufef5\122\ufef5\126\ufef5\130\ufef5\132\ufef5\147" +
    "\ufef5\150\ufef5\152\ufef5\153\ufef5\154\ufef5\155\ufef5\156\ufef5" +
    "\157\ufef5\160\ufef5\162\ufef5\163\ufef5\164\ufef5\166\ufef5\001" +
    "\002\000\006\003\135\016\134\001\002\000\004\004\154" +
    "\001\002\000\132\002\ufefb\003\ufefb\010\ufefb\011\ufefb\012" +
    "\ufefb\013\ufefb\014\ufefb\015\ufefb\016\ufefb\017\ufefb\020\ufefb" +
    "\024\ufefb\026\ufefb\027\ufefb\032\ufefb\034\ufefb\040\ufefb\047" +
    "\ufefb\050\ufefb\053\ufefb\054\ufefb\055\ufefb\056\ufefb\065\ufefb" +
    "\066\ufefb\071\ufefb\121\ufefb\122\ufefb\126\ufefb\130\ufefb\132" +
    "\ufefb\147\ufefb\150\ufefb\152\ufefb\153\ufefb\154\ufefb\155\ufefb" +
    "\156\ufefb\157\ufefb\160\ufefb\162\ufefb\163\ufefb\164\ufefb\166" +
    "\ufefb\001\002\000\004\003\156\001\002\000\004\004\157" +
    "\001\002\000\132\002\ufed4\003\ufed4\010\ufed4\011\ufed4\012" +
    "\ufed4\013\ufed4\014\ufed4\015\ufed4\016\ufed4\017\ufed4\020\ufed4" +
    "\024\ufed4\026\ufed4\027\ufed4\032\ufed4\034\ufed4\040\ufed4\047" +
    "\ufed4\050\ufed4\053\ufed4\054\ufed4\055\ufed4\056\ufed4\065\ufed4" +
    "\066\ufed4\071\ufed4\121\ufed4\122\ufed4\126\ufed4\130\ufed4\132" +
    "\ufed4\147\ufed4\150\ufed4\152\ufed4\153\ufed4\154\ufed4\155\ufed4" +
    "\156\ufed4\157\ufed4\160\ufed4\162\ufed4\163\ufed4\164\ufed4\166" +
    "\ufed4\001\002\000\004\131\167\001\002\000\004\004\166" +
    "\001\002\000\004\075\163\001\002\000\004\003\164\001" +
    "\002\000\004\004\165\001\002\000\132\002\ufed2\003\ufed2" +
    "\010\ufed2\011\ufed2\012\ufed2\013\ufed2\014\ufed2\015\ufed2\016" +
    "\ufed2\017\ufed2\020\ufed2\024\ufed2\026\ufed2\027\ufed2\032\ufed2" +
    "\034\ufed2\040\ufed2\047\ufed2\050\ufed2\053\ufed2\054\ufed2\055" +
    "\ufed2\056\ufed2\065\ufed2\066\ufed2\071\ufed2\121\ufed2\122\ufed2" +
    "\126\ufed2\130\ufed2\132\ufed2\147\ufed2\150\ufed2\152\ufed2\153" +
    "\ufed2\154\ufed2\155\ufed2\156\ufed2\157\ufed2\160\ufed2\162\ufed2" +
    "\163\ufed2\164\ufed2\166\ufed2\001\002\000\132\002\ufef4\003" +
    "\ufef4\010\ufef4\011\ufef4\012\ufef4\013\ufef4\014\ufef4\015\ufef4" +
    "\016\ufef4\017\ufef4\020\ufef4\024\ufef4\026\ufef4\027\ufef4\032" +
    "\ufef4\034\ufef4\040\ufef4\047\ufef4\050\ufef4\053\ufef4\054\ufef4" +
    "\055\ufef4\056\ufef4\065\ufef4\066\ufef4\071\ufef4\121\ufef4\122" +
    "\ufef4\126\ufef4\130\ufef4\132\ufef4\147\ufef4\150\ufef4\152\ufef4" +
    "\153\ufef4\154\ufef4\155\ufef4\156\ufef4\157\ufef4\160\ufef4\162" +
    "\ufef4\163\ufef4\164\ufef4\166\ufef4\001\002\000\006\003\135" +
    "\016\134\001\002\000\004\004\171\001\002\000\132\002" +
    "\ufef9\003\ufef9\010\ufef9\011\ufef9\012\ufef9\013\ufef9\014\ufef9" +
    "\015\ufef9\016\ufef9\017\ufef9\020\ufef9\024\ufef9\026\ufef9\027" +
    "\ufef9\032\ufef9\034\ufef9\040\ufef9\047\ufef9\050\ufef9\053\ufef9" +
    "\054\ufef9\055\ufef9\056\ufef9\065\ufef9\066\ufef9\071\ufef9\121" +
    "\ufef9\122\ufef9\126\ufef9\130\ufef9\132\ufef9\147\ufef9\150\ufef9" +
    "\152\ufef9\153\ufef9\154\ufef9\155\ufef9\156\ufef9\157\ufef9\160" +
    "\ufef9\162\ufef9\163\ufef9\164\ufef9\166\ufef9\001\002\000\004" +
    "\131\201\001\002\000\004\004\200\001\002\000\004\075" +
    "\175\001\002\000\004\003\176\001\002\000\004\004\177" +
    "\001\002\000\132\002\ufed0\003\ufed0\010\ufed0\011\ufed0\012" +
    "\ufed0\013\ufed0\014\ufed0\015\ufed0\016\ufed0\017\ufed0\020\ufed0" +
    "\024\ufed0\026\ufed0\027\ufed0\032\ufed0\034\ufed0\040\ufed0\047" +
    "\ufed0\050\ufed0\053\ufed0\054\ufed0\055\ufed0\056\ufed0\065\ufed0" +
    "\066\ufed0\071\ufed0\121\ufed0\122\ufed0\126\ufed0\130\ufed0\132" +
    "\ufed0\147\ufed0\150\ufed0\152\ufed0\153\ufed0\154\ufed0\155\ufed0" +
    "\156\ufed0\157\ufed0\160\ufed0\162\ufed0\163\ufed0\164\ufed0\166" +
    "\ufed0\001\002\000\132\002\ufef3\003\ufef3\010\ufef3\011\ufef3" +
    "\012\ufef3\013\ufef3\014\ufef3\015\ufef3\016\ufef3\017\ufef3\020" +
    "\ufef3\024\ufef3\026\ufef3\027\ufef3\032\ufef3\034\ufef3\040\ufef3" +
    "\047\ufef3\050\ufef3\053\ufef3\054\ufef3\055\ufef3\056\ufef3\065" +
    "\ufef3\066\ufef3\071\ufef3\121\ufef3\122\ufef3\126\ufef3\130\ufef3" +
    "\132\ufef3\147\ufef3\150\ufef3\152\ufef3\153\ufef3\154\ufef3\155" +
    "\ufef3\156\ufef3\157\ufef3\160\ufef3\162\ufef3\163\ufef3\164\ufef3" +
    "\166\ufef3\001\002\000\006\003\135\016\134\001\002\000" +
    "\004\004\203\001\002\000\132\002\ufef7\003\ufef7\010\ufef7" +
    "\011\ufef7\012\ufef7\013\ufef7\014\ufef7\015\ufef7\016\ufef7\017" +
    "\ufef7\020\ufef7\024\ufef7\026\ufef7\027\ufef7\032\ufef7\034\ufef7" +
    "\040\ufef7\047\ufef7\050\ufef7\053\ufef7\054\ufef7\055\ufef7\056" +
    "\ufef7\065\ufef7\066\ufef7\071\ufef7\121\ufef7\122\ufef7\126\ufef7" +
    "\130\ufef7\132\ufef7\147\ufef7\150\ufef7\152\ufef7\153\ufef7\154" +
    "\ufef7\155\ufef7\156\ufef7\157\ufef7\160\ufef7\162\ufef7\163\ufef7" +
    "\164\ufef7\166\ufef7\001\002\000\004\115\205\001\002\000" +
    "\004\004\uff67\001\002\000\004\004\207\001\002\000\132" +
    "\002\uff66\003\uff66\010\uff66\011\uff66\012\uff66\013\uff66\014" +
    "\uff66\015\uff66\016\uff66\017\uff66\020\uff66\024\uff66\026\uff66" +
    "\027\uff66\032\uff66\034\uff66\040\uff66\047\uff66\050\uff66\053" +
    "\uff66\054\uff66\055\uff66\056\uff66\065\uff66\066\uff66\071\uff66" +
    "\121\uff66\122\uff66\126\uff66\130\uff66\132\uff66\147\uff66\150" +
    "\uff66\152\uff66\153\uff66\154\uff66\155\uff66\156\uff66\157\uff66" +
    "\160\uff66\162\uff66\163\uff66\164\uff66\166\uff66\001\002\000" +
    "\004\075\u0177\001\002\000\066\003\231\017\243\021\235" +
    "\022\223\023\230\025\222\026\226\030\240\031\244\033" +
    "\234\035\236\036\216\037\214\041\224\042\221\043\237" +
    "\044\227\051\213\052\233\053\241\133\242\136\220\137" +
    "\217\140\215\141\225\144\212\001\002\000\004\114\u0173" +
    "\001\002\000\004\114\u016f\001\002\000\004\114\u016b\001" +
    "\002\000\004\114\u0167\001\002\000\004\114\u0163\001\002" +
    "\000\004\114\u015f\001\002\000\004\114\u015b\001\002\000" +
    "\004\114\u0157\001\002\000\004\114\u0153\001\002\000\004" +
    "\114\u014f\001\002\000\004\114\u014b\001\002\000\004\114" +
    "\u0147\001\002\000\004\114\u0143\001\002\000\004\114\u013f" +
    "\001\002\000\004\114\u013b\001\002\000\004\004\uff1f\001" +
    "\002\000\132\002\uff76\003\uff76\010\uff76\011\uff76\012\uff76" +
    "\013\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020\uff76\024" +
    "\uff76\026\uff76\027\uff76\032\uff76\034\uff76\040\uff76\047\uff76" +
    "\050\uff76\053\uff76\054\uff76\055\uff76\056\uff76\065\uff76\066" +
    "\uff76\071\uff76\121\uff76\122\uff76\126\uff76\130\uff76\132\uff76" +
    "\147\uff76\150\uff76\152\uff76\153\uff76\154\uff76\155\uff76\156" +
    "\uff76\157\uff76\160\uff76\162\uff76\163\uff76\164\uff76\166\uff76" +
    "\001\002\000\004\114\u0135\001\002\000\004\114\u0131\001" +
    "\002\000\004\114\u0128\001\002\000\004\114\u0124\001\002" +
    "\000\004\114\u0120\001\002\000\004\114\u0117\001\002\000" +
    "\004\114\u0112\001\002\000\004\114\262\001\002\000\004" +
    "\114\256\001\002\000\004\114\245\001\002\000\006\122" +
    "\246\127\247\001\002\000\004\115\253\001\002\000\004" +
    "\115\250\001\002\000\004\004\uff49\001\002\000\004\004" +
    "\252\001\002\000\132\002\uff48\003\uff48\010\uff48\011\uff48" +
    "\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48\017\uff48\020" +
    "\uff48\024\uff48\026\uff48\027\uff48\032\uff48\034\uff48\040\uff48" +
    "\047\uff48\050\uff48\053\uff48\054\uff48\055\uff48\056\uff48\065" +
    "\uff48\066\uff48\071\uff48\121\uff48\122\uff48\126\uff48\130\uff48" +
    "\132\uff48\147\uff48\150\uff48\152\uff48\153\uff48\154\uff48\155" +
    "\uff48\156\uff48\157\uff48\160\uff48\162\uff48\163\uff48\164\uff48" +
    "\166\uff48\001\002\000\004\004\uff45\001\002\000\004\004" +
    "\255\001\002\000\132\002\uff44\003\uff44\010\uff44\011\uff44" +
    "\012\uff44\013\uff44\014\uff44\015\uff44\016\uff44\017\uff44\020" +
    "\uff44\024\uff44\026\uff44\027\uff44\032\uff44\034\uff44\040\uff44" +
    "\047\uff44\050\uff44\053\uff44\054\uff44\055\uff44\056\uff44\065" +
    "\uff44\066\uff44\071\uff44\121\uff44\122\uff44\126\uff44\130\uff44" +
    "\132\uff44\147\uff44\150\uff44\152\uff44\153\uff44\154\uff44\155" +
    "\uff44\156\uff44\157\uff44\160\uff44\162\uff44\163\uff44\164\uff44" +
    "\166\uff44\001\002\000\004\115\257\001\002\000\004\004" +
    "\uff57\001\002\000\004\004\261\001\002\000\132\002\uff56" +
    "\003\uff56\010\uff56\011\uff56\012\uff56\013\uff56\014\uff56\015" +
    "\uff56\016\uff56\017\uff56\020\uff56\024\uff56\026\uff56\027\uff56" +
    "\032\uff56\034\uff56\040\uff56\047\uff56\050\uff56\053\uff56\054" +
    "\uff56\055\uff56\056\uff56\065\uff56\066\uff56\071\uff56\121\uff56" +
    "\122\uff56\126\uff56\130\uff56\132\uff56\147\uff56\150\uff56\152" +
    "\uff56\153\uff56\154\uff56\155\uff56\156\uff56\157\uff56\160\uff56" +
    "\162\uff56\163\uff56\164\uff56\166\uff56\001\002\000\006\003" +
    "\263\127\265\001\002\000\004\115\uff1a\001\002\000\004" +
    "\115\u010f\001\002\000\004\006\266\001\002\000\006\127" +
    "\271\135\270\001\002\000\006\006\u010d\115\uff1d\001\002" +
    "\000\004\005\274\001\002\000\004\006\272\001\002\000" +
    "\004\127\273\001\002\000\004\115\uff1b\001\002\000\060" +
    "\017\323\021\316\022\306\023\313\025\304\026\311\030" +
    "\321\031\324\033\315\035\317\036\300\037\276\041\307" +
    "\042\303\043\320\044\312\051\275\052\314\053\322\136" +
    "\302\137\301\140\277\141\310\001\002\000\004\114\u010b" +
    "\001\002\000\004\114\u0109\001\002\000\004\114\u0107\001" +
    "\002\000\004\114\u0105\001\002\000\004\114\u0103\001\002" +
    "\000\004\114\u0101\001\002\000\004\114\377\001\002\000" +
    "\004\114\375\001\002\000\006\006\uff19\115\uff19\001\002" +
    "\000\004\114\373\001\002\000\004\114\371\001\002\000" +
    "\004\114\367\001\002\000\004\114\365\001\002\000\004" +
    "\114\363\001\002\000\004\114\361\001\002\000\004\114" +
    "\357\001\002\000\004\114\355\001\002\000\004\114\350" +
    "\001\002\000\004\114\346\001\002\000\004\114\344\001" +
    "\002\000\004\114\337\001\002\000\004\114\334\001\002" +
    "\000\004\114\332\001\002\000\004\114\325\001\002\000" +
    "\006\122\326\127\327\001\002\000\004\115\331\001\002" +
    "\000\004\115\330\001\002\000\006\006\uff10\115\uff10\001" +
    "\002\000\006\006\uff0e\115\uff0e\001\002\000\004\115\333" +
    "\001\002\000\006\006\uff18\115\uff18\001\002\000\004\127" +
    "\335\001\002\000\004\115\336\001\002\000\006\006\uff02" +
    "\115\uff02\001\002\000\006\122\341\123\340\001\002\000" +
    "\004\115\343\001\002\000\004\115\342\001\002\000\006" +
    "\006\uff0f\115\uff0f\001\002\000\006\006\uff11\115\uff11\001" +
    "\002\000\004\115\345\001\002\000\006\006\uff07\115\uff07" +
    "\001\002\000\004\115\347\001\002\000\006\006\uff0c\115" +
    "\uff0c\001\002\000\006\122\352\123\351\001\002\000\004" +
    "\115\354\001\002\000\004\115\353\001\002\000\006\006" +
    "\uff14\115\uff14\001\002\000\006\006\uff17\115\uff17\001\002" +
    "\000\004\115\356\001\002\000\006\006\uff0d\115\uff0d\001" +
    "\002\000\004\115\360\001\002\000\006\006\uff03\115\uff03" +
    "\001\002\000\004\115\362\001\002\000\006\006\uff15\115" +
    "\uff15\001\002\000\004\115\364\001\002\000\006\006\uff06" +
    "\115\uff06\001\002\000\004\115\366\001\002\000\006\006" +
    "\uff13\115\uff13\001\002\000\004\115\370\001\002\000\006" +
    "\006\ufeff\115\ufeff\001\002\000\004\115\372\001\002\000" +
    "\006\006\uff09\115\uff09\001\002\000\004\115\374\001\002" +
    "\000\006\006\uff16\115\uff16\001\002\000\004\115\376\001" +
    "\002\000\006\006\uff12\115\uff12\001\002\000\004\115\u0100" +
    "\001\002\000\006\006\uff08\115\uff08\001\002\000\004\115" +
    "\u0102\001\002\000\006\006\uff05\115\uff05\001\002\000\004" +
    "\115\u0104\001\002\000\006\006\uff01\115\uff01\001\002\000" +
    "\004\115\u0106\001\002\000\006\006\uff0b\115\uff0b\001\002" +
    "\000\004\115\u0108\001\002\000\006\006\uff00\115\uff00\001" +
    "\002\000\004\115\u010a\001\002\000\006\006\uff0a\115\uff0a" +
    "\001\002\000\004\115\u010c\001\002\000\006\006\uff04\115" +
    "\uff04\001\002\000\004\127\u010e\001\002\000\004\115\uff1c" +
    "\001\002\000\004\004\uff51\001\002\000\004\004\u0111\001" +
    "\002\000\132\002\uff50\003\uff50\010\uff50\011\uff50\012\uff50" +
    "\013\uff50\014\uff50\015\uff50\016\uff50\017\uff50\020\uff50\024" +
    "\uff50\026\uff50\027\uff50\032\uff50\034\uff50\040\uff50\047\uff50" +
    "\050\uff50\053\uff50\054\uff50\055\uff50\056\uff50\065\uff50\066" +
    "\uff50\071\uff50\121\uff50\122\uff50\126\uff50\130\uff50\132\uff50" +
    "\147\uff50\150\uff50\152\uff50\153\uff50\154\uff50\155\uff50\156" +
    "\uff50\157\uff50\160\uff50\162\uff50\163\uff50\164\uff50\166\uff50" +
    "\001\002\000\004\127\u0113\001\002\000\004\115\u0114\001" +
    "\002\000\004\004\uff23\001\002\000\004\004\u0116\001\002" +
    "\000\132\002\uff22\003\uff22\010\uff22\011\uff22\012\uff22\013" +
    "\uff22\014\uff22\015\uff22\016\uff22\017\uff22\020\uff22\024\uff22" +
    "\026\uff22\027\uff22\032\uff22\034\uff22\040\uff22\047\uff22\050" +
    "\uff22\053\uff22\054\uff22\055\uff22\056\uff22\065\uff22\066\uff22" +
    "\071\uff22\121\uff22\122\uff22\126\uff22\130\uff22\132\uff22\147" +
    "\uff22\150\uff22\152\uff22\153\uff22\154\uff22\155\uff22\156\uff22" +
    "\157\uff22\160\uff22\162\uff22\163\uff22\164\uff22\166\uff22\001" +
    "\002\000\006\122\u0119\123\u0118\001\002\000\004\115\u011d" +
    "\001\002\000\004\115\u011a\001\002\000\004\004\uff47\001" +
    "\002\000\004\004\u011c\001\002\000\132\002\uff46\003\uff46" +
    "\010\uff46\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46\016" +
    "\uff46\017\uff46\020\uff46\024\uff46\026\uff46\027\uff46\032\uff46" +
    "\034\uff46\040\uff46\047\uff46\050\uff46\053\uff46\054\uff46\055" +
    "\uff46\056\uff46\065\uff46\066\uff46\071\uff46\121\uff46\122\uff46" +
    "\126\uff46\130\uff46\132\uff46\147\uff46\150\uff46\152\uff46\153" +
    "\uff46\154\uff46\155\uff46\156\uff46\157\uff46\160\uff46\162\uff46" +
    "\163\uff46\164\uff46\166\uff46\001\002\000\004\004\uff4b\001" +
    "\002\000\004\004\u011f\001\002\000\132\002\uff4a\003\uff4a" +
    "\010\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016" +
    "\uff4a\017\uff4a\020\uff4a\024\uff4a\026\uff4a\027\uff4a\032\uff4a" +
    "\034\uff4a\040\uff4a\047\uff4a\050\uff4a\053\uff4a\054\uff4a\055" +
    "\uff4a\056\uff4a\065\uff4a\066\uff4a\071\uff4a\121\uff4a\122\uff4a" +
    "\126\uff4a\130\uff4a\132\uff4a\147\uff4a\150\uff4a\152\uff4a\153" +
    "\uff4a\154\uff4a\155\uff4a\156\uff4a\157\uff4a\160\uff4a\162\uff4a" +
    "\163\uff4a\164\uff4a\166\uff4a\001\002\000\004\115\u0121\001" +
    "\002\000\004\004\uff37\001\002\000\004\004\u0123\001\002" +
    "\000\132\002\uff36\003\uff36\010\uff36\011\uff36\012\uff36\013" +
    "\uff36\014\uff36\015\uff36\016\uff36\017\uff36\020\uff36\024\uff36" +
    "\026\uff36\027\uff36\032\uff36\034\uff36\040\uff36\047\uff36\050" +
    "\uff36\053\uff36\054\uff36\055\uff36\056\uff36\065\uff36\066\uff36" +
    "\071\uff36\121\uff36\122\uff36\126\uff36\130\uff36\132\uff36\147" +
    "\uff36\150\uff36\152\uff36\153\uff36\154\uff36\155\uff36\156\uff36" +
    "\157\uff36\160\uff36\162\uff36\163\uff36\164\uff36\166\uff36\001" +
    "\002\000\004\115\u0125\001\002\000\004\004\uff41\001\002" +
    "\000\004\004\u0127\001\002\000\132\002\uff40\003\uff40\010" +
    "\uff40\011\uff40\012\uff40\013\uff40\014\uff40\015\uff40\016\uff40" +
    "\017\uff40\020\uff40\024\uff40\026\uff40\027\uff40\032\uff40\034" +
    "\uff40\040\uff40\047\uff40\050\uff40\053\uff40\054\uff40\055\uff40" +
    "\056\uff40\065\uff40\066\uff40\071\uff40\121\uff40\122\uff40\126" +
    "\uff40\130\uff40\132\uff40\147\uff40\150\uff40\152\uff40\153\uff40" +
    "\154\uff40\155\uff40\156\uff40\157\uff40\160\uff40\162\uff40\163" +
    "\uff40\164\uff40\166\uff40\001\002\000\006\122\u012a\123\u0129" +
    "\001\002\000\004\115\u012e\001\002\000\004\115\u012b\001" +
    "\002\000\004\004\uff53\001\002\000\004\004\u012d\001\002" +
    "\000\132\002\uff52\003\uff52\010\uff52\011\uff52\012\uff52\013" +
    "\uff52\014\uff52\015\uff52\016\uff52\017\uff52\020\uff52\024\uff52" +
    "\026\uff52\027\uff52\032\uff52\034\uff52\040\uff52\047\uff52\050" +
    "\uff52\053\uff52\054\uff52\055\uff52\056\uff52\065\uff52\066\uff52" +
    "\071\uff52\121\uff52\122\uff52\126\uff52\130\uff52\132\uff52\147" +
    "\uff52\150\uff52\152\uff52\153\uff52\154\uff52\155\uff52\156\uff52" +
    "\157\uff52\160\uff52\162\uff52\163\uff52\164\uff52\166\uff52\001" +
    "\002\000\004\004\uff55\001\002\000\004\004\u0130\001\002" +
    "\000\132\002\uff54\003\uff54\010\uff54\011\uff54\012\uff54\013" +
    "\uff54\014\uff54\015\uff54\016\uff54\017\uff54\020\uff54\024\uff54" +
    "\026\uff54\027\uff54\032\uff54\034\uff54\040\uff54\047\uff54\050" +
    "\uff54\053\uff54\054\uff54\055\uff54\056\uff54\065\uff54\066\uff54" +
    "\071\uff54\121\uff54\122\uff54\126\uff54\130\uff54\132\uff54\147" +
    "\uff54\150\uff54\152\uff54\153\uff54\154\uff54\155\uff54\156\uff54" +
    "\157\uff54\160\uff54\162\uff54\163\uff54\164\uff54\166\uff54\001" +
    "\002\000\004\115\u0132\001\002\000\004\004\uff43\001\002" +
    "\000\004\004\u0134\001\002\000\132\002\uff42\003\uff42\010" +
    "\uff42\011\uff42\012\uff42\013\uff42\014\uff42\015\uff42\016\uff42" +
    "\017\uff42\020\uff42\024\uff42\026\uff42\027\uff42\032\uff42\034" +
    "\uff42\040\uff42\047\uff42\050\uff42\053\uff42\054\uff42\055\uff42" +
    "\056\uff42\065\uff42\066\uff42\071\uff42\121\uff42\122\uff42\126" +
    "\uff42\130\uff42\132\uff42\147\uff42\150\uff42\152\uff42\153\uff42" +
    "\154\uff42\155\uff42\156\uff42\157\uff42\160\uff42\162\uff42\163" +
    "\uff42\164\uff42\166\uff42\001\002\000\004\115\u0136\001\002" +
    "\000\004\004\uff2f\001\002\000\004\004\u0138\001\002\000" +
    "\132\002\uff2e\003\uff2e\010\uff2e\011\uff2e\012\uff2e\013\uff2e" +
    "\014\uff2e\015\uff2e\016\uff2e\017\uff2e\020\uff2e\024\uff2e\026" +
    "\uff2e\027\uff2e\032\uff2e\034\uff2e\040\uff2e\047\uff2e\050\uff2e" +
    "\053\uff2e\054\uff2e\055\uff2e\056\uff2e\065\uff2e\066\uff2e\071" +
    "\uff2e\121\uff2e\122\uff2e\126\uff2e\130\uff2e\132\uff2e\147\uff2e" +
    "\150\uff2e\152\uff2e\153\uff2e\154\uff2e\155\uff2e\156\uff2e\157" +
    "\uff2e\160\uff2e\162\uff2e\163\uff2e\164\uff2e\166\uff2e\001\002" +
    "\000\004\004\u013a\001\002\000\132\002\uff1e\003\uff1e\010" +
    "\uff1e\011\uff1e\012\uff1e\013\uff1e\014\uff1e\015\uff1e\016\uff1e" +
    "\017\uff1e\020\uff1e\024\uff1e\026\uff1e\027\uff1e\032\uff1e\034" +
    "\uff1e\040\uff1e\047\uff1e\050\uff1e\053\uff1e\054\uff1e\055\uff1e" +
    "\056\uff1e\065\uff1e\066\uff1e\071\uff1e\121\uff1e\122\uff1e\126" +
    "\uff1e\130\uff1e\132\uff1e\147\uff1e\150\uff1e\152\uff1e\153\uff1e" +
    "\154\uff1e\155\uff1e\156\uff1e\157\uff1e\160\uff1e\162\uff1e\163" +
    "\uff1e\164\uff1e\166\uff1e\001\002\000\004\115\u013c\001\002" +
    "\000\004\004\uff4d\001\002\000\004\004\u013e\001\002\000" +
    "\132\002\uff4c\003\uff4c\010\uff4c\011\uff4c\012\uff4c\013\uff4c" +
    "\014\uff4c\015\uff4c\016\uff4c\017\uff4c\020\uff4c\024\uff4c\026" +
    "\uff4c\027\uff4c\032\uff4c\034\uff4c\040\uff4c\047\uff4c\050\uff4c" +
    "\053\uff4c\054\uff4c\055\uff4c\056\uff4c\065\uff4c\066\uff4c\071" +
    "\uff4c\121\uff4c\122\uff4c\126\uff4c\130\uff4c\132\uff4c\147\uff4c" +
    "\150\uff4c\152\uff4c\153\uff4c\154\uff4c\155\uff4c\156\uff4c\157" +
    "\uff4c\160\uff4c\162\uff4c\163\uff4c\164\uff4c\166\uff4c\001\002" +
    "\000\004\115\u0140\001\002\000\004\004\uff35\001\002\000" +
    "\004\004\u0142\001\002\000\132\002\uff34\003\uff34\010\uff34" +
    "\011\uff34\012\uff34\013\uff34\014\uff34\015\uff34\016\uff34\017" +
    "\uff34\020\uff34\024\uff34\026\uff34\027\uff34\032\uff34\034\uff34" +
    "\040\uff34\047\uff34\050\uff34\053\uff34\054\uff34\055\uff34\056" +
    "\uff34\065\uff34\066\uff34\071\uff34\121\uff34\122\uff34\126\uff34" +
    "\130\uff34\132\uff34\147\uff34\150\uff34\152\uff34\153\uff34\154" +
    "\uff34\155\uff34\156\uff34\157\uff34\160\uff34\162\uff34\163\uff34" +
    "\164\uff34\166\uff34\001\002\000\004\115\u0144\001\002\000" +
    "\004\004\uff27\001\002\000\004\004\u0146\001\002\000\132" +
    "\002\uff26\003\uff26\010\uff26\011\uff26\012\uff26\013\uff26\014" +
    "\uff26\015\uff26\016\uff26\017\uff26\020\uff26\024\uff26\026\uff26" +
    "\027\uff26\032\uff26\034\uff26\040\uff26\047\uff26\050\uff26\053" +
    "\uff26\054\uff26\055\uff26\056\uff26\065\uff26\066\uff26\071\uff26" +
    "\121\uff26\122\uff26\126\uff26\130\uff26\132\uff26\147\uff26\150" +
    "\uff26\152\uff26\153\uff26\154\uff26\155\uff26\156\uff26\157\uff26" +
    "\160\uff26\162\uff26\163\uff26\164\uff26\166\uff26\001\002\000" +
    "\004\115\u0148\001\002\000\004\004\uff29\001\002\000\004" +
    "\004\u014a\001\002\000\132\002\uff28\003\uff28\010\uff28\011" +
    "\uff28\012\uff28\013\uff28\014\uff28\015\uff28\016\uff28\017\uff28" +
    "\020\uff28\024\uff28\026\uff28\027\uff28\032\uff28\034\uff28\040" +
    "\uff28\047\uff28\050\uff28\053\uff28\054\uff28\055\uff28\056\uff28" +
    "\065\uff28\066\uff28\071\uff28\121\uff28\122\uff28\126\uff28\130" +
    "\uff28\132\uff28\147\uff28\150\uff28\152\uff28\153\uff28\154\uff28" +
    "\155\uff28\156\uff28\157\uff28\160\uff28\162\uff28\163\uff28\164" +
    "\uff28\166\uff28\001\002\000\004\115\u014c\001\002\000\004" +
    "\004\uff3b\001\002\000\004\004\u014e\001\002\000\132\002" +
    "\uff3a\003\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a\014\uff3a" +
    "\015\uff3a\016\uff3a\017\uff3a\020\uff3a\024\uff3a\026\uff3a\027" +
    "\uff3a\032\uff3a\034\uff3a\040\uff3a\047\uff3a\050\uff3a\053\uff3a" +
    "\054\uff3a\055\uff3a\056\uff3a\065\uff3a\066\uff3a\071\uff3a\121" +
    "\uff3a\122\uff3a\126\uff3a\130\uff3a\132\uff3a\147\uff3a\150\uff3a" +
    "\152\uff3a\153\uff3a\154\uff3a\155\uff3a\156\uff3a\157\uff3a\160" +
    "\uff3a\162\uff3a\163\uff3a\164\uff3a\166\uff3a\001\002\000\004" +
    "\115\u0150\001\002\000\004\004\uff4f\001\002\000\004\004" +
    "\u0152\001\002\000\132\002\uff4e\003\uff4e\010\uff4e\011\uff4e" +
    "\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\020" +
    "\uff4e\024\uff4e\026\uff4e\027\uff4e\032\uff4e\034\uff4e\040\uff4e" +
    "\047\uff4e\050\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e\065" +
    "\uff4e\066\uff4e\071\uff4e\121\uff4e\122\uff4e\126\uff4e\130\uff4e" +
    "\132\uff4e\147\uff4e\150\uff4e\152\uff4e\153\uff4e\154\uff4e\155" +
    "\uff4e\156\uff4e\157\uff4e\160\uff4e\162\uff4e\163\uff4e\164\uff4e" +
    "\166\uff4e\001\002\000\004\115\u0154\001\002\000\004\004" +
    "\uff25\001\002\000\004\004\u0156\001\002\000\132\002\uff24" +
    "\003\uff24\010\uff24\011\uff24\012\uff24\013\uff24\014\uff24\015" +
    "\uff24\016\uff24\017\uff24\020\uff24\024\uff24\026\uff24\027\uff24" +
    "\032\uff24\034\uff24\040\uff24\047\uff24\050\uff24\053\uff24\054" +
    "\uff24\055\uff24\056\uff24\065\uff24\066\uff24\071\uff24\121\uff24" +
    "\122\uff24\126\uff24\130\uff24\132\uff24\147\uff24\150\uff24\152" +
    "\uff24\153\uff24\154\uff24\155\uff24\156\uff24\157\uff24\160\uff24" +
    "\162\uff24\163\uff24\164\uff24\166\uff24\001\002\000\004\115" +
    "\u0158\001\002\000\004\004\uff39\001\002\000\004\004\u015a" +
    "\001\002\000\132\002\uff38\003\uff38\010\uff38\011\uff38\012" +
    "\uff38\013\uff38\014\uff38\015\uff38\016\uff38\017\uff38\020\uff38" +
    "\024\uff38\026\uff38\027\uff38\032\uff38\034\uff38\040\uff38\047" +
    "\uff38\050\uff38\053\uff38\054\uff38\055\uff38\056\uff38\065\uff38" +
    "\066\uff38\071\uff38\121\uff38\122\uff38\126\uff38\130\uff38\132" +
    "\uff38\147\uff38\150\uff38\152\uff38\153\uff38\154\uff38\155\uff38" +
    "\156\uff38\157\uff38\160\uff38\162\uff38\163\uff38\164\uff38\166" +
    "\uff38\001\002\000\004\115\u015c\001\002\000\004\004\uff33" +
    "\001\002\000\004\004\u015e\001\002\000\132\002\uff32\003" +
    "\uff32\010\uff32\011\uff32\012\uff32\013\uff32\014\uff32\015\uff32" +
    "\016\uff32\017\uff32\020\uff32\024\uff32\026\uff32\027\uff32\032" +
    "\uff32\034\uff32\040\uff32\047\uff32\050\uff32\053\uff32\054\uff32" +
    "\055\uff32\056\uff32\065\uff32\066\uff32\071\uff32\121\uff32\122" +
    "\uff32\126\uff32\130\uff32\132\uff32\147\uff32\150\uff32\152\uff32" +
    "\153\uff32\154\uff32\155\uff32\156\uff32\157\uff32\160\uff32\162" +
    "\uff32\163\uff32\164\uff32\166\uff32\001\002\000\004\115\u0160" +
    "\001\002\000\004\004\uff2d\001\002\000\004\004\u0162\001" +
    "\002\000\132\002\uff2c\003\uff2c\010\uff2c\011\uff2c\012\uff2c" +
    "\013\uff2c\014\uff2c\015\uff2c\016\uff2c\017\uff2c\020\uff2c\024" +
    "\uff2c\026\uff2c\027\uff2c\032\uff2c\034\uff2c\040\uff2c\047\uff2c" +
    "\050\uff2c\053\uff2c\054\uff2c\055\uff2c\056\uff2c\065\uff2c\066" +
    "\uff2c\071\uff2c\121\uff2c\122\uff2c\126\uff2c\130\uff2c\132\uff2c" +
    "\147\uff2c\150\uff2c\152\uff2c\153\uff2c\154\uff2c\155\uff2c\156" +
    "\uff2c\157\uff2c\160\uff2c\162\uff2c\163\uff2c\164\uff2c\166\uff2c" +
    "\001\002\000\004\115\u0164\001\002\000\004\004\uff3f\001" +
    "\002\000\004\004\u0166\001\002\000\132\002\uff3e\003\uff3e" +
    "\010\uff3e\011\uff3e\012\uff3e\013\uff3e\014\uff3e\015\uff3e\016" +
    "\uff3e\017\uff3e\020\uff3e\024\uff3e\026\uff3e\027\uff3e\032\uff3e" +
    "\034\uff3e\040\uff3e\047\uff3e\050\uff3e\053\uff3e\054\uff3e\055" +
    "\uff3e\056\uff3e\065\uff3e\066\uff3e\071\uff3e\121\uff3e\122\uff3e" +
    "\126\uff3e\130\uff3e\132\uff3e\147\uff3e\150\uff3e\152\uff3e\153" +
    "\uff3e\154\uff3e\155\uff3e\156\uff3e\157\uff3e\160\uff3e\162\uff3e" +
    "\163\uff3e\164\uff3e\166\uff3e\001\002\000\004\115\u0168\001" +
    "\002\000\004\004\uff2b\001\002\000\004\004\u016a\001\002" +
    "\000\132\002\uff2a\003\uff2a\010\uff2a\011\uff2a\012\uff2a\013" +
    "\uff2a\014\uff2a\015\uff2a\016\uff2a\017\uff2a\020\uff2a\024\uff2a" +
    "\026\uff2a\027\uff2a\032\uff2a\034\uff2a\040\uff2a\047\uff2a\050" +
    "\uff2a\053\uff2a\054\uff2a\055\uff2a\056\uff2a\065\uff2a\066\uff2a" +
    "\071\uff2a\121\uff2a\122\uff2a\126\uff2a\130\uff2a\132\uff2a\147" +
    "\uff2a\150\uff2a\152\uff2a\153\uff2a\154\uff2a\155\uff2a\156\uff2a" +
    "\157\uff2a\160\uff2a\162\uff2a\163\uff2a\164\uff2a\166\uff2a\001" +
    "\002\000\004\115\u016c\001\002\000\004\004\uff3d\001\002" +
    "\000\004\004\u016e\001\002\000\132\002\uff3c\003\uff3c\010" +
    "\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015\uff3c\016\uff3c" +
    "\017\uff3c\020\uff3c\024\uff3c\026\uff3c\027\uff3c\032\uff3c\034" +
    "\uff3c\040\uff3c\047\uff3c\050\uff3c\053\uff3c\054\uff3c\055\uff3c" +
    "\056\uff3c\065\uff3c\066\uff3c\071\uff3c\121\uff3c\122\uff3c\126" +
    "\uff3c\130\uff3c\132\uff3c\147\uff3c\150\uff3c\152\uff3c\153\uff3c" +
    "\154\uff3c\155\uff3c\156\uff3c\157\uff3c\160\uff3c\162\uff3c\163" +
    "\uff3c\164\uff3c\166\uff3c\001\002\000\004\115\u0170\001\002" +
    "\000\004\004\uff31\001\002\000\004\004\u0172\001\002\000" +
    "\132\002\uff30\003\uff30\010\uff30\011\uff30\012\uff30\013\uff30" +
    "\014\uff30\015\uff30\016\uff30\017\uff30\020\uff30\024\uff30\026" +
    "\uff30\027\uff30\032\uff30\034\uff30\040\uff30\047\uff30\050\uff30" +
    "\053\uff30\054\uff30\055\uff30\056\uff30\065\uff30\066\uff30\071" +
    "\uff30\121\uff30\122\uff30\126\uff30\130\uff30\132\uff30\147\uff30" +
    "\150\uff30\152\uff30\153\uff30\154\uff30\155\uff30\156\uff30\157" +
    "\uff30\160\uff30\162\uff30\163\uff30\164\uff30\166\uff30\001\002" +
    "\000\004\115\u0174\001\002\000\004\004\uff21\001\002\000" +
    "\004\004\u0176\001\002\000\132\002\uff20\003\uff20\010\uff20" +
    "\011\uff20\012\uff20\013\uff20\014\uff20\015\uff20\016\uff20\017" +
    "\uff20\020\uff20\024\uff20\026\uff20\027\uff20\032\uff20\034\uff20" +
    "\040\uff20\047\uff20\050\uff20\053\uff20\054\uff20\055\uff20\056" +
    "\uff20\065\uff20\066\uff20\071\uff20\121\uff20\122\uff20\126\uff20" +
    "\130\uff20\132\uff20\147\uff20\150\uff20\152\uff20\153\uff20\154" +
    "\uff20\155\uff20\156\uff20\157\uff20\160\uff20\162\uff20\163\uff20" +
    "\164\uff20\166\uff20\001\002\000\004\003\u0178\001\002\000" +
    "\004\004\u0179\001\002\000\132\002\ufee2\003\ufee2\010\ufee2" +
    "\011\ufee2\012\ufee2\013\ufee2\014\ufee2\015\ufee2\016\ufee2\017" +
    "\ufee2\020\ufee2\024\ufee2\026\ufee2\027\ufee2\032\ufee2\034\ufee2" +
    "\040\ufee2\047\ufee2\050\ufee2\053\ufee2\054\ufee2\055\ufee2\056" +
    "\ufee2\065\ufee2\066\ufee2\071\ufee2\121\ufee2\122\ufee2\126\ufee2" +
    "\130\ufee2\132\ufee2\147\ufee2\150\ufee2\152\ufee2\153\ufee2\154" +
    "\ufee2\155\ufee2\156\ufee2\157\ufee2\160\ufee2\162\ufee2\163\ufee2" +
    "\164\ufee2\166\ufee2\001\002\000\004\115\u017b\001\002\000" +
    "\004\004\uff5f\001\002\000\004\004\u017d\001\002\000\132" +
    "\002\uff5e\003\uff5e\010\uff5e\011\uff5e\012\uff5e\013\uff5e\014" +
    "\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\024\uff5e\026\uff5e" +
    "\027\uff5e\032\uff5e\034\uff5e\040\uff5e\047\uff5e\050\uff5e\053" +
    "\uff5e\054\uff5e\055\uff5e\056\uff5e\065\uff5e\066\uff5e\071\uff5e" +
    "\121\uff5e\122\uff5e\126\uff5e\130\uff5e\132\uff5e\147\uff5e\150" +
    "\uff5e\152\uff5e\153\uff5e\154\uff5e\155\uff5e\156\uff5e\157\uff5e" +
    "\160\uff5e\162\uff5e\163\uff5e\164\uff5e\166\uff5e\001\002\000" +
    "\030\003\u0188\034\u0184\114\u0186\122\u0187\123\u018c\124\u0185" +
    "\125\u0180\127\u0182\134\u0183\142\u018a\143\u0189\001\002\000" +
    "\132\002\ufef0\003\ufef0\010\ufef0\011\ufef0\012\ufef0\013\ufef0" +
    "\014\ufef0\015\ufef0\016\ufef0\017\ufef0\020\ufef0\024\ufef0\026" +
    "\ufef0\027\ufef0\032\ufef0\034\ufef0\040\ufef0\047\ufef0\050\ufef0" +
    "\053\ufef0\054\ufef0\055\ufef0\056\ufef0\065\ufef0\066\ufef0\071" +
    "\ufef0\121\ufef0\122\ufef0\126\ufef0\130\ufef0\132\ufef0\147\ufef0" +
    "\150\ufef0\152\ufef0\153\ufef0\154\ufef0\155\ufef0\156\ufef0\157" +
    "\ufef0\160\ufef0\162\ufef0\163\ufef0\164\ufef0\166\ufef0\001\002" +
    "\000\040\003\ufe80\004\ufe80\076\ufe80\077\ufe80\100\ufe80\101" +
    "\ufe80\102\ufe80\103\ufe80\104\ufe80\105\ufe80\106\ufe80\107\ufe80" +
    "\110\ufe80\111\ufe80\115\ufe80\001\002\000\132\002\ufecb\003" +
    "\ufecb\010\ufecb\011\ufecb\012\ufecb\013\ufecb\014\ufecb\015\ufecb" +
    "\016\ufecb\017\ufecb\020\ufecb\024\ufecb\026\ufecb\027\ufecb\032" +
    "\ufecb\034\ufecb\040\ufecb\047\ufecb\050\ufecb\053\ufecb\054\ufecb" +
    "\055\ufecb\056\ufecb\065\ufecb\066\ufecb\071\ufecb\121\ufecb\122" +
    "\ufecb\126\ufecb\130\ufecb\132\ufecb\147\ufecb\150\ufecb\152\ufecb" +
    "\153\ufecb\154\ufecb\155\ufecb\156\ufecb\157\ufecb\160\ufecb\162" +
    "\ufecb\163\ufecb\164\ufecb\166\ufecb\001\002\000\040\003\ufe7f" +
    "\004\ufe7f\076\ufe7f\077\ufe7f\100\ufe7f\101\ufe7f\102\ufe7f\103" +
    "\ufe7f\104\ufe7f\105\ufe7f\106\ufe7f\107\ufe7f\110\ufe7f\111\ufe7f" +
    "\115\ufe7f\001\002\000\040\003\ufe82\004\ufe82\076\ufe82\077" +
    "\ufe82\100\ufe82\101\ufe82\102\ufe82\103\ufe82\104\ufe82\105\ufe82" +
    "\106\ufe82\107\ufe82\110\ufe82\111\ufe82\115\ufe82\001\002\000" +
    "\030\003\ufec7\020\ufec7\024\ufec7\027\ufec7\032\ufec7\040\ufec7" +
    "\047\ufec7\050\ufec7\055\ufec7\056\ufec7\132\ufec7\001\002\000" +
    "\040\003\ufe81\004\ufe81\076\ufe81\077\ufe81\100\ufe81\101\ufe81" +
    "\102\ufe81\103\ufe81\104\ufe81\105\ufe81\106\ufe81\107\ufe81\110" +
    "\ufe81\111\ufe81\115\ufe81\001\002\000\026\003\u0208\114\u0186" +
    "\122\u0187\123\u018c\124\u0185\125\u0180\127\u0182\134\u0183\142" +
    "\u018a\143\u0189\001\002\000\040\003\ufe7e\004\ufe7e\076\ufe7e" +
    "\077\ufe7e\100\ufe7e\101\ufe7e\102\ufe7e\103\ufe7e\104\ufe7e\105" +
    "\ufe7e\106\ufe7e\107\ufe7e\110\ufe7e\111\ufe7e\115\ufe7e\001\002" +
    "\000\032\003\ufec5\004\ufec9\020\ufec5\024\ufec5\027\ufec5\032" +
    "\ufec5\040\ufec5\047\ufec5\050\ufec5\055\ufec5\056\ufec5\132\ufec5" +
    "\001\002\000\040\003\ufe7c\004\ufe7c\076\ufe7c\077\ufe7c\100" +
    "\ufe7c\101\ufe7c\102\ufe7c\103\ufe7c\104\ufe7c\105\ufe7c\106\ufe7c" +
    "\107\ufe7c\110\ufe7c\111\ufe7c\115\ufe7c\001\002\000\040\003" +
    "\ufe7d\004\ufe7d\076\ufe7d\077\ufe7d\100\ufe7d\101\ufe7d\102\ufe7d" +
    "\103\ufe7d\104\ufe7d\105\ufe7d\106\ufe7d\107\ufe7d\110\ufe7d\111" +
    "\ufe7d\115\ufe7d\001\002\000\132\002\ufeca\003\ufeca\010\ufeca" +
    "\011\ufeca\012\ufeca\013\ufeca\014\ufeca\015\ufeca\016\ufeca\017" +
    "\ufeca\020\ufeca\024\ufeca\026\ufeca\027\ufeca\032\ufeca\034\ufeca" +
    "\040\ufeca\047\ufeca\050\ufeca\053\ufeca\054\ufeca\055\ufeca\056" +
    "\ufeca\065\ufeca\066\ufeca\071\ufeca\121\ufeca\122\ufeca\126\ufeca" +
    "\130\ufeca\132\ufeca\147\ufeca\150\ufeca\152\ufeca\153\ufeca\154" +
    "\ufeca\155\ufeca\156\ufeca\157\ufeca\160\ufeca\162\ufeca\163\ufeca" +
    "\164\ufeca\166\ufeca\001\002\000\040\003\ufe83\004\ufe83\076" +
    "\ufe83\077\ufe83\100\ufe83\101\ufe83\102\ufe83\103\ufe83\104\ufe83" +
    "\105\ufe83\106\ufe83\107\ufe83\110\ufe83\111\ufe83\115\ufe83\001" +
    "\002\000\014\004\ufe8a\104\u0190\105\u018f\106\u0191\107\u018e" +
    "\001\002\000\026\003\u019a\114\u0186\122\u0187\123\u018c\124" +
    "\u0185\125\u0180\127\u0182\134\u0183\142\u018a\143\u0189\001\002" +
    "\000\026\003\u0198\114\u0186\122\u0187\123\u018c\124\u0185\125" +
    "\u0180\127\u0182\134\u0183\142\u018a\143\u0189\001\002\000\026" +
    "\003\u0196\114\u0186\122\u0187\123\u018c\124\u0185\125\u0180\127" +
    "\u0182\134\u0183\142\u018a\143\u0189\001\002\000\026\003\u0194" +
    "\114\u0186\122\u0187\123\u018c\124\u0185\125\u0180\127\u0182\134" +
    "\u0183\142\u018a\143\u0189\001\002\000\004\004\u0193\001\002" +
    "\000\132\002\ufe89\003\ufe89\010\ufe89\011\ufe89\012\ufe89\013" +
    "\ufe89\014\ufe89\015\ufe89\016\ufe89\017\ufe89\020\ufe89\024\ufe89" +
    "\026\ufe89\027\ufe89\032\ufe89\034\ufe89\040\ufe89\047\ufe89\050" +
    "\ufe89\053\ufe89\054\ufe89\055\ufe89\056\ufe89\065\ufe89\066\ufe89" +
    "\071\ufe89\121\ufe89\122\ufe89\126\ufe89\130\ufe89\132\ufe89\147" +
    "\ufe89\150\ufe89\152\ufe89\153\ufe89\154\ufe89\155\ufe89\156\ufe89" +
    "\157\ufe89\160\ufe89\162\ufe89\163\ufe89\164\ufe89\166\ufe89\001" +
    "\002\000\040\003\ufe79\004\ufe79\076\ufe79\077\ufe79\100\ufe79" +
    "\101\ufe79\102\ufe79\103\ufe79\104\ufe79\105\ufe79\106\ufe79\107" +
    "\ufe79\110\ufe79\111\ufe79\115\ufe79\001\002\000\040\003\ufe86" +
    "\004\ufe86\076\ufe86\077\ufe86\100\ufe86\101\ufe86\102\ufe86\103" +
    "\ufe86\104\ufe86\105\ufe86\106\ufe86\107\ufe86\110\ufe86\111\ufe86" +
    "\115\ufe86\001\002\000\040\003\ufe7b\004\ufe7b\076\ufe7b\077" +
    "\ufe7b\100\ufe7b\101\ufe7b\102\ufe7b\103\ufe7b\104\ufe7b\105\ufe7b" +
    "\106\ufe7b\107\ufe7b\110\ufe7b\111\ufe7b\115\ufe7b\001\002\000" +
    "\040\003\ufe88\004\ufe88\076\ufe88\077\ufe88\100\ufe88\101\ufe88" +
    "\102\ufe88\103\ufe88\104\ufe88\105\ufe88\106\u0191\107\u018e\110" +
    "\ufe88\111\ufe88\115\ufe88\001\002\000\040\003\ufe7a\004\ufe7a" +
    "\076\ufe7a\077\ufe7a\100\ufe7a\101\ufe7a\102\ufe7a\103\ufe7a\104" +
    "\ufe7a\105\ufe7a\106\ufe7a\107\ufe7a\110\ufe7a\111\ufe7a\115\ufe7a" +
    "\001\002\000\040\003\ufe87\004\ufe87\076\ufe87\077\ufe87\100" +
    "\ufe87\101\ufe87\102\ufe87\103\ufe87\104\ufe87\105\ufe87\106\u0191" +
    "\107\u018e\110\ufe87\111\ufe87\115\ufe87\001\002\000\040\003" +
    "\ufe78\004\ufe78\076\ufe78\077\ufe78\100\ufe78\101\ufe78\102\ufe78" +
    "\103\ufe78\104\ufe78\105\ufe78\106\ufe78\107\ufe78\110\ufe78\111" +
    "\ufe78\115\ufe78\001\002\000\040\003\ufe85\004\ufe85\076\ufe85" +
    "\077\ufe85\100\ufe85\101\ufe85\102\ufe85\103\ufe85\104\ufe85\105" +
    "\ufe85\106\ufe85\107\ufe85\110\ufe85\111\ufe85\115\ufe85\001\002" +
    "\000\030\003\u01a6\020\u019f\024\u01a1\027\u01aa\032\u01a7\040" +
    "\u01a9\047\u01a4\050\u01a2\055\u01a8\056\u01a0\132\u01a3\001\002" +
    "\000\004\004\u019e\001\002\000\132\002\ufec8\003\ufec8\010" +
    "\ufec8\011\ufec8\012\ufec8\013\ufec8\014\ufec8\015\ufec8\016\ufec8" +
    "\017\ufec8\020\ufec8\024\ufec8\026\ufec8\027\ufec8\032\ufec8\034" +
    "\ufec8\040\ufec8\047\ufec8\050\ufec8\053\ufec8\054\ufec8\055\ufec8" +
    "\056\ufec8\065\ufec8\066\ufec8\071\ufec8\121\ufec8\122\ufec8\126" +
    "\ufec8\130\ufec8\132\ufec8\147\ufec8\150\ufec8\152\ufec8\153\ufec8" +
    "\154\ufec8\155\ufec8\156\ufec8\157\ufec8\160\ufec8\162\ufec8\163" +
    "\ufec8\164\ufec8\166\ufec8\001\002\000\006\003\ufead\114\ufec1" +
    "\001\002\000\006\003\ufe9f\114\ufeb3\001\002\000\006\003" +
    "\ufeab\114\ufebf\001\002\000\006\003\ufeaf\114\ufec3\001\002" +
    "\000\006\003\ufe9d\114\ufeb1\001\002\000\006\003\ufea3\114" +
    "\ufeb7\001\002\000\004\004\u01e3\001\002\000\004\004\ufe9b" +
    "\001\002\000\006\003\ufea7\114\ufebb\001\002\000\006\003" +
    "\ufea1\114\ufeb5\001\002\000\006\003\ufea5\114\ufeb9\001\002" +
    "\000\006\003\ufea9\114\ufebd\001\002\000\004\114\u01ae\001" +
    "\002\000\004\003\u01ad\001\002\000\004\004\ufea8\001\002" +
    "\000\012\012\u01af\013\u01b3\014\u01b1\015\u01b0\001\002\000" +
    "\004\114\u01ca\001\002\000\004\114\u01c3\001\002\000\004" +
    "\114\u01bc\001\002\000\004\115\u01bb\001\002\000\004\114" +
    "\u01b4\001\002\000\006\122\u01b6\123\u01b5\001\002\000\004" +
    "\115\ufe98\001\002\000\004\115\ufe90\001\002\000\004\115" +
    "\u01b8\001\002\000\004\115\ufe8f\001\002\000\004\115\u01ba" +
    "\001\002\000\004\115\ufe97\001\002\000\004\004\ufebc\001" +
    "\002\000\006\122\u01be\123\u01bd\001\002\000\004\115\ufe96" +
    "\001\002\000\004\115\ufe8e\001\002\000\004\115\u01c0\001" +
    "\002\000\004\115\ufe8d\001\002\000\004\115\u01c2\001\002" +
    "\000\004\115\ufe95\001\002\000\006\122\u01c5\123\u01c4\001" +
    "\002\000\004\115\ufe94\001\002\000\004\115\ufe8c\001\002" +
    "\000\004\115\u01c7\001\002\000\004\115\ufe8b\001\002\000" +
    "\004\115\u01c9\001\002\000\004\115\ufe93\001\002\000\006" +
    "\122\u01cc\123\u01cb\001\002\000\004\115\ufe9a\001\002\000" +
    "\004\115\ufe92\001\002\000\004\115\u01ce\001\002\000\004" +
    "\115\ufe91\001\002\000\004\115\u01d0\001\002\000\004\115" +
    "\ufe99\001\002\000\004\003\u01d6\001\002\000\004\114\u01d3" +
    "\001\002\000\012\012\u01af\013\u01b3\014\u01b1\015\u01b0\001" +
    "\002\000\004\115\u01d5\001\002\000\004\004\ufeb8\001\002" +
    "\000\004\004\ufea4\001\002\000\004\114\u01da\001\002\000" +
    "\004\003\u01d9\001\002\000\004\004\ufea0\001\002\000\012" +
    "\012\u01af\013\u01b3\014\u01b1\015\u01b0\001\002\000\004\115" +
    "\u01dc\001\002\000\004\004\ufeb4\001\002\000\004\114\u01e0" +
    "\001\002\000\004\003\u01df\001\002\000\004\004\ufea6\001" +
    "\002\000\012\012\u01af\013\u01b3\014\u01b1\015\u01b0\001\002" +
    "\000\004\115\u01e2\001\002\000\004\004\ufeba\001\002\000" +
    "\132\002\ufec4\003\ufec4\010\ufec4\011\ufec4\012\ufec4\013\ufec4" +
    "\014\ufec4\015\ufec4\016\ufec4\017\ufec4\020\ufec4\024\ufec4\026" +
    "\ufec4\027\ufec4\032\ufec4\034\ufec4\040\ufec4\047\ufec4\050\ufec4" +
    "\053\ufec4\054\ufec4\055\ufec4\056\ufec4\065\ufec4\066\ufec4\071" +
    "\ufec4\121\ufec4\122\ufec4\126\ufec4\130\ufec4\132\ufec4\147\ufec4" +
    "\150\ufec4\152\ufec4\153\ufec4\154\ufec4\155\ufec4\156\ufec4\157" +
    "\ufec4\160\ufec4\162\ufec4\163\ufec4\164\ufec4\166\ufec4\001\002" +
    "\000\004\114\u01e7\001\002\000\004\003\u01e6\001\002\000" +
    "\004\004\ufea2\001\002\000\012\012\u01af\013\u01b3\014\u01b1" +
    "\015\u01b0\001\002\000\004\115\u01e9\001\002\000\004\004" +
    "\ufeb6\001\002\000\004\114\u01ed\001\002\000\004\003\u01ec" +
    "\001\002\000\004\004\ufe9c\001\002\000\012\012\u01af\013" +
    "\u01b3\014\u01b1\015\u01b0\001\002\000\004\115\u01ef\001\002" +
    "\000\004\004\ufeb0\001\002\000\004\114\u01f3\001\002\000" +
    "\004\003\u01f2\001\002\000\004\004\ufeae\001\002\000\012" +
    "\012\u01af\013\u01b3\014\u01b1\015\u01b0\001\002\000\004\115" +
    "\u01f5\001\002\000\004\004\ufec2\001\002\000\004\114\u01f9" +
    "\001\002\000\004\003\u01f8\001\002\000\004\004\ufeaa\001" +
    "\002\000\012\012\u01af\013\u01b3\014\u01b1\015\u01b0\001\002" +
    "\000\004\115\u01fb\001\002\000\004\004\ufebe\001\002\000" +
    "\004\114\u01ff\001\002\000\004\003\u01fe\001\002\000\004" +
    "\004\ufe9e\001\002\000\012\012\u01af\013\u01b3\014\u01b1\015" +
    "\u01b0\001\002\000\004\115\u0201\001\002\000\004\004\ufeb2" +
    "\001\002\000\004\114\u0205\001\002\000\004\003\u0204\001" +
    "\002\000\004\004\ufeac\001\002\000\012\012\u01af\013\u01b3" +
    "\014\u01b1\015\u01b0\001\002\000\004\115\u0207\001\002\000" +
    "\004\004\ufec0\001\002\000\026\114\u0186\115\u020d\122\u0187" +
    "\123\u018c\124\u0185\125\u0180\127\u0182\134\u0183\142\u018a\143" +
    "\u0189\001\002\000\016\003\u020b\104\u0190\105\u018f\106\u0191" +
    "\107\u018e\115\u020a\001\002\000\040\003\ufe84\004\ufe84\076" +
    "\ufe84\077\ufe84\100\ufe84\101\ufe84\102\ufe84\103\ufe84\104\ufe84" +
    "\105\ufe84\106\ufe84\107\ufe84\110\ufe84\111\ufe84\115\ufe84\001" +
    "\002\000\004\115\u020c\001\002\000\040\003\ufe77\004\ufe77" +
    "\076\ufe77\077\ufe77\100\ufe77\101\ufe77\102\ufe77\103\ufe77\104" +
    "\ufe77\105\ufe77\106\ufe77\107\ufe77\110\ufe77\111\ufe77\115\ufe77" +
    "\001\002\000\040\003\ufe75\004\ufe75\076\ufe75\077\ufe75\100" +
    "\ufe75\101\ufe75\102\ufe75\103\ufe75\104\ufe75\105\ufe75\106\ufe75" +
    "\107\ufe75\110\ufe75\111\ufe75\115\ufe75\001\002\000\014\104" +
    "\u0190\105\u018f\106\u0191\107\u018e\115\u020f\001\002\000\040" +
    "\003\ufe76\004\ufe76\076\ufe76\077\ufe76\100\ufe76\101\ufe76\102" +
    "\ufe76\103\ufe76\104\ufe76\105\ufe76\106\ufe76\107\ufe76\110\ufe76" +
    "\111\ufe76\115\ufe76\001\002\000\030\003\u01a6\020\u019f\024" +
    "\u01a1\027\u01aa\032\u01a7\040\u01a9\047\u01a4\050\u01a2\055\u01a8" +
    "\056\u01a0\132\u01a3\001\002\000\004\004\u0212\001\002\000" +
    "\132\002\ufec6\003\ufec6\010\ufec6\011\ufec6\012\ufec6\013\ufec6" +
    "\014\ufec6\015\ufec6\016\ufec6\017\ufec6\020\ufec6\024\ufec6\026" +
    "\ufec6\027\ufec6\032\ufec6\034\ufec6\040\ufec6\047\ufec6\050\ufec6" +
    "\053\ufec6\054\ufec6\055\ufec6\056\ufec6\065\ufec6\066\ufec6\071" +
    "\ufec6\121\ufec6\122\ufec6\126\ufec6\130\ufec6\132\ufec6\147\ufec6" +
    "\150\ufec6\152\ufec6\153\ufec6\154\ufec6\155\ufec6\156\ufec6\157" +
    "\ufec6\160\ufec6\162\ufec6\163\ufec6\164\ufec6\166\ufec6\001\002" +
    "\000\004\075\u0214\001\002\000\004\003\u0215\001\002\000" +
    "\004\004\u0216\001\002\000\132\002\ufece\003\ufece\010\ufece" +
    "\011\ufece\012\ufece\013\ufece\014\ufece\015\ufece\016\ufece\017" +
    "\ufece\020\ufece\024\ufece\026\ufece\027\ufece\032\ufece\034\ufece" +
    "\040\ufece\047\ufece\050\ufece\053\ufece\054\ufece\055\ufece\056" +
    "\ufece\065\ufece\066\ufece\071\ufece\121\ufece\122\ufece\126\ufece" +
    "\130\ufece\132\ufece\147\ufece\150\ufece\152\ufece\153\ufece\154" +
    "\ufece\155\ufece\156\ufece\157\ufece\160\ufece\162\ufece\163\ufece" +
    "\164\ufece\166\ufece\001\002\000\004\075\u0218\001\002\000" +
    "\004\003\u0219\001\002\000\004\004\u021a\001\002\000\132" +
    "\002\ufeec\003\ufeec\010\ufeec\011\ufeec\012\ufeec\013\ufeec\014" +
    "\ufeec\015\ufeec\016\ufeec\017\ufeec\020\ufeec\024\ufeec\026\ufeec" +
    "\027\ufeec\032\ufeec\034\ufeec\040\ufeec\047\ufeec\050\ufeec\053" +
    "\ufeec\054\ufeec\055\ufeec\056\ufeec\065\ufeec\066\ufeec\071\ufeec" +
    "\121\ufeec\122\ufeec\126\ufeec\130\ufeec\132\ufeec\147\ufeec\150" +
    "\ufeec\152\ufeec\153\ufeec\154\ufeec\155\ufeec\156\ufeec\157\ufeec" +
    "\160\ufeec\162\ufeec\163\ufeec\164\ufeec\166\ufeec\001\002\000" +
    "\004\115\u021c\001\002\000\004\004\uff65\001\002\000\004" +
    "\004\u021e\001\002\000\132\002\uff64\003\uff64\010\uff64\011" +
    "\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017\uff64" +
    "\020\uff64\024\uff64\026\uff64\027\uff64\032\uff64\034\uff64\040" +
    "\uff64\047\uff64\050\uff64\053\uff64\054\uff64\055\uff64\056\uff64" +
    "\065\uff64\066\uff64\071\uff64\121\uff64\122\uff64\126\uff64\130" +
    "\uff64\132\uff64\147\uff64\150\uff64\152\uff64\153\uff64\154\uff64" +
    "\155\uff64\156\uff64\157\uff64\160\uff64\162\uff64\163\uff64\164" +
    "\uff64\166\uff64\001\002\000\130\003\052\010\023\011\051" +
    "\012\100\013\077\014\075\015\074\016\062\017\054\020" +
    "\066\024\031\026\022\027\026\032\057\034\067\040\036" +
    "\047\072\050\021\053\027\054\046\055\101\056\043\065" +
    "\103\066\050\071\024\121\055\122\070\126\060\130\045" +
    "\132\037\147\044\150\033\152\064\153\042\154\025\155" +
    "\073\156\056\157\047\160\071\162\040\163\032\164\102" +
    "\166\030\001\002\000\004\002\ufff0\001\002\000\004\075" +
    "\u0222\001\002\000\004\003\u0223\001\002\000\004\004\u0224" +
    "\001\002\000\132\002\ufecc\003\ufecc\010\ufecc\011\ufecc\012" +
    "\ufecc\013\ufecc\014\ufecc\015\ufecc\016\ufecc\017\ufecc\020\ufecc" +
    "\024\ufecc\026\ufecc\027\ufecc\032\ufecc\034\ufecc\040\ufecc\047" +
    "\ufecc\050\ufecc\053\ufecc\054\ufecc\055\ufecc\056\ufecc\065\ufecc" +
    "\066\ufecc\071\ufecc\121\ufecc\122\ufecc\126\ufecc\130\ufecc\132" +
    "\ufecc\147\ufecc\150\ufecc\152\ufecc\153\ufecc\154\ufecc\155\ufecc" +
    "\156\ufecc\157\ufecc\160\ufecc\162\ufecc\163\ufecc\164\ufecc\166" +
    "\ufecc\001\002\000\004\003\u0226\001\002\000\004\004\u0227" +
    "\001\002\000\132\002\uffe0\003\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\024\uffe0\026\uffe0\027\uffe0\032\uffe0\034\uffe0\040\uffe0\047" +
    "\uffe0\050\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\065\uffe0" +
    "\066\uffe0\071\uffe0\121\uffe0\122\uffe0\126\uffe0\130\uffe0\132" +
    "\uffe0\147\uffe0\150\uffe0\152\uffe0\153\uffe0\154\uffe0\155\uffe0" +
    "\156\uffe0\157\uffe0\160\uffe0\162\uffe0\163\uffe0\164\uffe0\166" +
    "\uffe0\001\002\000\004\075\u0229\001\002\000\004\003\u022a" +
    "\001\002\000\004\004\u022b\001\002\000\132\002\ufee6\003" +
    "\ufee6\010\ufee6\011\ufee6\012\ufee6\013\ufee6\014\ufee6\015\ufee6" +
    "\016\ufee6\017\ufee6\020\ufee6\024\ufee6\026\ufee6\027\ufee6\032" +
    "\ufee6\034\ufee6\040\ufee6\047\ufee6\050\ufee6\053\ufee6\054\ufee6" +
    "\055\ufee6\056\ufee6\065\ufee6\066\ufee6\071\ufee6\121\ufee6\122" +
    "\ufee6\126\ufee6\130\ufee6\132\ufee6\147\ufee6\150\ufee6\152\ufee6" +
    "\153\ufee6\154\ufee6\155\ufee6\156\ufee6\157\ufee6\160\ufee6\162" +
    "\ufee6\163\ufee6\164\ufee6\166\ufee6\001\002\000\004\115\u022d" +
    "\001\002\000\004\004\uff6d\001\002\000\004\004\u022f\001" +
    "\002\000\132\002\uff6c\003\uff6c\010\uff6c\011\uff6c\012\uff6c" +
    "\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\024" +
    "\uff6c\026\uff6c\027\uff6c\032\uff6c\034\uff6c\040\uff6c\047\uff6c" +
    "\050\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\065\uff6c\066" +
    "\uff6c\071\uff6c\121\uff6c\122\uff6c\126\uff6c\130\uff6c\132\uff6c" +
    "\147\uff6c\150\uff6c\152\uff6c\153\uff6c\154\uff6c\155\uff6c\156" +
    "\uff6c\157\uff6c\160\uff6c\162\uff6c\163\uff6c\164\uff6c\166\uff6c" +
    "\001\002\000\004\004\u0231\001\002\000\006\002\uffee\003" +
    "\u0232\001\002\000\004\002\uffed\001\002\000\004\115\u0234" +
    "\001\002\000\004\004\uff5b\001\002\000\004\004\u0236\001" +
    "\002\000\132\002\uff5a\003\uff5a\010\uff5a\011\uff5a\012\uff5a" +
    "\013\uff5a\014\uff5a\015\uff5a\016\uff5a\017\uff5a\020\uff5a\024" +
    "\uff5a\026\uff5a\027\uff5a\032\uff5a\034\uff5a\040\uff5a\047\uff5a" +
    "\050\uff5a\053\uff5a\054\uff5a\055\uff5a\056\uff5a\065\uff5a\066" +
    "\uff5a\071\uff5a\121\uff5a\122\uff5a\126\uff5a\130\uff5a\132\uff5a" +
    "\147\uff5a\150\uff5a\152\uff5a\153\uff5a\154\uff5a\155\uff5a\156" +
    "\uff5a\157\uff5a\160\uff5a\162\uff5a\163\uff5a\164\uff5a\166\uff5a" +
    "\001\002\000\004\004\u023a\001\002\000\130\003\052\010" +
    "\023\011\051\012\100\013\077\014\075\015\074\016\062" +
    "\017\054\020\066\024\031\026\022\027\026\032\057\034" +
    "\067\040\036\047\072\050\021\053\027\054\046\055\101" +
    "\056\043\065\103\066\050\071\024\121\055\122\070\126" +
    "\060\130\045\132\037\147\044\150\033\152\064\153\042" +
    "\154\025\155\073\156\056\157\047\160\071\162\040\163" +
    "\032\164\102\166\030\001\002\000\004\002\ufff4\001\002" +
    "\000\132\002\uffe2\003\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\024\uffe2" +
    "\026\uffe2\027\uffe2\032\uffe2\034\uffe2\040\uffe2\047\uffe2\050" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\065\uffe2\066\uffe2" +
    "\071\uffe2\121\uffe2\122\uffe2\126\uffe2\130\uffe2\132\uffe2\147" +
    "\uffe2\150\uffe2\152\uffe2\153\uffe2\154\uffe2\155\uffe2\156\uffe2" +
    "\157\uffe2\160\uffe2\162\uffe2\163\uffe2\164\uffe2\166\uffe2\001" +
    "\002\000\004\075\u023c\001\002\000\004\003\u023d\001\002" +
    "\000\004\004\u023e\001\002\000\132\002\ufed8\003\ufed8\010" +
    "\ufed8\011\ufed8\012\ufed8\013\ufed8\014\ufed8\015\ufed8\016\ufed8" +
    "\017\ufed8\020\ufed8\024\ufed8\026\ufed8\027\ufed8\032\ufed8\034" +
    "\ufed8\040\ufed8\047\ufed8\050\ufed8\053\ufed8\054\ufed8\055\ufed8" +
    "\056\ufed8\065\ufed8\066\ufed8\071\ufed8\121\ufed8\122\ufed8\126" +
    "\ufed8\130\ufed8\132\ufed8\147\ufed8\150\ufed8\152\ufed8\153\ufed8" +
    "\154\ufed8\155\ufed8\156\ufed8\157\ufed8\160\ufed8\162\ufed8\163" +
    "\ufed8\164\ufed8\166\ufed8\001\002\000\004\004\uff85\001\002" +
    "\000\004\004\uff7c\001\002\000\004\004\uff7e\001\002\000" +
    "\004\004\uff7f\001\002\000\004\004\uff7d\001\002\000\004" +
    "\004\u0245\001\002\000\132\002\uff84\003\uff84\010\uff84\011" +
    "\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84" +
    "\020\uff84\024\uff84\026\uff84\027\uff84\032\uff84\034\uff84\040" +
    "\uff84\047\uff84\050\uff84\053\uff84\054\uff84\055\uff84\056\uff84" +
    "\065\uff84\066\uff84\071\uff84\121\uff84\122\uff84\126\uff84\130" +
    "\uff84\132\uff84\147\uff84\150\uff84\152\uff84\153\uff84\154\uff84" +
    "\155\uff84\156\uff84\157\uff84\160\uff84\162\uff84\163\uff84\164" +
    "\uff84\166\uff84\001\002\000\004\115\u0247\001\002\000\004" +
    "\004\uff73\001\002\000\004\004\u0249\001\002\000\132\002" +
    "\uff72\003\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72" +
    "\015\uff72\016\uff72\017\uff72\020\uff72\024\uff72\026\uff72\027" +
    "\uff72\032\uff72\034\uff72\040\uff72\047\uff72\050\uff72\053\uff72" +
    "\054\uff72\055\uff72\056\uff72\065\uff72\066\uff72\071\uff72\121" +
    "\uff72\122\uff72\126\uff72\130\uff72\132\uff72\147\uff72\150\uff72" +
    "\152\uff72\153\uff72\154\uff72\155\uff72\156\uff72\157\uff72\160" +
    "\uff72\162\uff72\163\uff72\164\uff72\166\uff72\001\002\000\004" +
    "\115\u024b\001\002\000\004\004\uff6f\001\002\000\004\004" +
    "\u024d\001\002\000\132\002\uff6e\003\uff6e\010\uff6e\011\uff6e" +
    "\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020" +
    "\uff6e\024\uff6e\026\uff6e\027\uff6e\032\uff6e\034\uff6e\040\uff6e" +
    "\047\uff6e\050\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\065" +
    "\uff6e\066\uff6e\071\uff6e\121\uff6e\122\uff6e\126\uff6e\130\uff6e" +
    "\132\uff6e\147\uff6e\150\uff6e\152\uff6e\153\uff6e\154\uff6e\155" +
    "\uff6e\156\uff6e\157\uff6e\160\uff6e\162\uff6e\163\uff6e\164\uff6e" +
    "\166\uff6e\001\002\000\004\003\u024f\001\002\000\004\004" +
    "\u0250\001\002\000\132\002\uffde\003\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\024\uffde\026\uffde\027\uffde\032\uffde\034\uffde\040\uffde" +
    "\047\uffde\050\uffde\053\uffde\054\uffde\055\uffde\056\uffde\065" +
    "\uffde\066\uffde\071\uffde\121\uffde\122\uffde\126\uffde\130\uffde" +
    "\132\uffde\147\uffde\150\uffde\152\uffde\153\uffde\154\uffde\155" +
    "\uffde\156\uffde\157\uffde\160\uffde\162\uffde\163\uffde\164\uffde" +
    "\166\uffde\001\002\000\004\075\u0252\001\002\000\004\003" +
    "\u0253\001\002\000\004\004\u0254\001\002\000\132\002\ufede" +
    "\003\ufede\010\ufede\011\ufede\012\ufede\013\ufede\014\ufede\015" +
    "\ufede\016\ufede\017\ufede\020\ufede\024\ufede\026\ufede\027\ufede" +
    "\032\ufede\034\ufede\040\ufede\047\ufede\050\ufede\053\ufede\054" +
    "\ufede\055\ufede\056\ufede\065\ufede\066\ufede\071\ufede\121\ufede" +
    "\122\ufede\126\ufede\130\ufede\132\ufede\147\ufede\150\ufede\152" +
    "\ufede\153\ufede\154\ufede\155\ufede\156\ufede\157\ufede\160\ufede" +
    "\162\ufede\163\ufede\164\ufede\166\ufede\001\002\000\004\115" +
    "\u0256\001\002\000\004\004\uff63\001\002\000\004\004\u0258" +
    "\001\002\000\132\002\uff62\003\uff62\010\uff62\011\uff62\012" +
    "\uff62\013\uff62\014\uff62\015\uff62\016\uff62\017\uff62\020\uff62" +
    "\024\uff62\026\uff62\027\uff62\032\uff62\034\uff62\040\uff62\047" +
    "\uff62\050\uff62\053\uff62\054\uff62\055\uff62\056\uff62\065\uff62" +
    "\066\uff62\071\uff62\121\uff62\122\uff62\126\uff62\130\uff62\132" +
    "\uff62\147\uff62\150\uff62\152\uff62\153\uff62\154\uff62\155\uff62" +
    "\156\uff62\157\uff62\160\uff62\162\uff62\163\uff62\164\uff62\166" +
    "\uff62\001\002\000\130\003\052\010\023\011\051\012\100" +
    "\013\077\014\075\015\074\016\062\017\054\020\066\024" +
    "\031\026\022\027\026\032\057\034\067\040\036\047\072" +
    "\050\021\053\027\054\046\055\101\056\043\065\103\066" +
    "\050\071\024\121\055\122\070\126\060\130\045\132\037" +
    "\147\044\150\033\152\064\153\042\154\025\155\073\156" +
    "\056\157\047\160\071\162\040\163\032\164\102\166\030" +
    "\001\002\000\004\002\ufff2\001\002\000\004\115\u025c\001" +
    "\002\000\004\004\uff6b\001\002\000\004\004\u025e\001\002" +
    "\000\132\002\uff6a\003\uff6a\010\uff6a\011\uff6a\012\uff6a\013" +
    "\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\024\uff6a" +
    "\026\uff6a\027\uff6a\032\uff6a\034\uff6a\040\uff6a\047\uff6a\050" +
    "\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\065\uff6a\066\uff6a" +
    "\071\uff6a\121\uff6a\122\uff6a\126\uff6a\130\uff6a\132\uff6a\147" +
    "\uff6a\150\uff6a\152\uff6a\153\uff6a\154\uff6a\155\uff6a\156\uff6a" +
    "\157\uff6a\160\uff6a\162\uff6a\163\uff6a\164\uff6a\166\uff6a\001" +
    "\002\000\004\075\u0260\001\002\000\004\003\u0261\001\002" +
    "\000\004\004\u0262\001\002\000\132\002\ufedc\003\ufedc\010" +
    "\ufedc\011\ufedc\012\ufedc\013\ufedc\014\ufedc\015\ufedc\016\ufedc" +
    "\017\ufedc\020\ufedc\024\ufedc\026\ufedc\027\ufedc\032\ufedc\034" +
    "\ufedc\040\ufedc\047\ufedc\050\ufedc\053\ufedc\054\ufedc\055\ufedc" +
    "\056\ufedc\065\ufedc\066\ufedc\071\ufedc\121\ufedc\122\ufedc\126" +
    "\ufedc\130\ufedc\132\ufedc\147\ufedc\150\ufedc\152\ufedc\153\ufedc" +
    "\154\ufedc\155\ufedc\156\ufedc\157\ufedc\160\ufedc\162\ufedc\163" +
    "\ufedc\164\ufedc\166\ufedc\001\002\000\004\075\u0264\001\002" +
    "\000\004\003\u0265\001\002\000\004\004\u0266\001\002\000" +
    "\132\002\ufee4\003\ufee4\010\ufee4\011\ufee4\012\ufee4\013\ufee4" +
    "\014\ufee4\015\ufee4\016\ufee4\017\ufee4\020\ufee4\024\ufee4\026" +
    "\ufee4\027\ufee4\032\ufee4\034\ufee4\040\ufee4\047\ufee4\050\ufee4" +
    "\053\ufee4\054\ufee4\055\ufee4\056\ufee4\065\ufee4\066\ufee4\071" +
    "\ufee4\121\ufee4\122\ufee4\126\ufee4\130\ufee4\132\ufee4\147\ufee4" +
    "\150\ufee4\152\ufee4\153\ufee4\154\ufee4\155\ufee4\156\ufee4\157" +
    "\ufee4\160\ufee4\162\ufee4\163\ufee4\164\ufee4\166\ufee4\001\002" +
    "\000\004\123\u0268\001\002\000\004\115\u0269\001\002\000" +
    "\004\004\uff75\001\002\000\004\004\u026b\001\002\000\132" +
    "\002\uff74\003\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014" +
    "\uff74\015\uff74\016\uff74\017\uff74\020\uff74\024\uff74\026\uff74" +
    "\027\uff74\032\uff74\034\uff74\040\uff74\047\uff74\050\uff74\053" +
    "\uff74\054\uff74\055\uff74\056\uff74\065\uff74\066\uff74\071\uff74" +
    "\121\uff74\122\uff74\126\uff74\130\uff74\132\uff74\147\uff74\150" +
    "\uff74\152\uff74\153\uff74\154\uff74\155\uff74\156\uff74\157\uff74" +
    "\160\uff74\162\uff74\163\uff74\164\uff74\166\uff74\001\002\000" +
    "\004\115\u026d\001\002\000\004\004\uff69\001\002\000\004" +
    "\004\u026f\001\002\000\132\002\uff68\003\uff68\010\uff68\011" +
    "\uff68\012\uff68\013\uff68\014\uff68\015\uff68\016\uff68\017\uff68" +
    "\020\uff68\024\uff68\026\uff68\027\uff68\032\uff68\034\uff68\040" +
    "\uff68\047\uff68\050\uff68\053\uff68\054\uff68\055\uff68\056\uff68" +
    "\065\uff68\066\uff68\071\uff68\121\uff68\122\uff68\126\uff68\130" +
    "\uff68\132\uff68\147\uff68\150\uff68\152\uff68\153\uff68\154\uff68" +
    "\155\uff68\156\uff68\157\uff68\160\uff68\162\uff68\163\uff68\164" +
    "\uff68\166\uff68\001\002\000\004\075\u0271\001\002\000\004" +
    "\003\u0272\001\002\000\004\004\u0273\001\002\000\132\002" +
    "\ufeea\003\ufeea\010\ufeea\011\ufeea\012\ufeea\013\ufeea\014\ufeea" +
    "\015\ufeea\016\ufeea\017\ufeea\020\ufeea\024\ufeea\026\ufeea\027" +
    "\ufeea\032\ufeea\034\ufeea\040\ufeea\047\ufeea\050\ufeea\053\ufeea" +
    "\054\ufeea\055\ufeea\056\ufeea\065\ufeea\066\ufeea\071\ufeea\121" +
    "\ufeea\122\ufeea\126\ufeea\130\ufeea\132\ufeea\147\ufeea\150\ufeea" +
    "\152\ufeea\153\ufeea\154\ufeea\155\ufeea\156\ufeea\157\ufeea\160" +
    "\ufeea\162\ufeea\163\ufeea\164\ufeea\166\ufeea\001\002\000\066" +
    "\003\231\017\243\021\235\022\223\023\230\025\222\026" +
    "\226\030\240\031\244\033\234\035\236\036\216\037\214" +
    "\041\224\042\221\043\237\044\227\051\213\052\233\053" +
    "\241\133\242\136\220\137\217\140\215\141\225\144\212" +
    "\001\002\000\132\002\uff77\003\uff77\010\uff77\011\uff77\012" +
    "\uff77\013\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77" +
    "\024\uff77\026\uff77\027\uff77\032\uff77\034\uff77\040\uff77\047" +
    "\uff77\050\uff77\053\uff77\054\uff77\055\uff77\056\uff77\065\uff77" +
    "\066\uff77\071\uff77\121\uff77\122\uff77\126\uff77\130\uff77\132" +
    "\uff77\147\uff77\150\uff77\152\uff77\153\uff77\154\uff77\155\uff77" +
    "\156\uff77\157\uff77\160\uff77\162\uff77\163\uff77\164\uff77\166" +
    "\uff77\001\002\000\004\127\u0277\001\002\000\004\115\u0278" +
    "\001\002\000\004\004\uff59\001\002\000\004\004\u027a\001" +
    "\002\000\132\002\uff58\003\uff58\010\uff58\011\uff58\012\uff58" +
    "\013\uff58\014\uff58\015\uff58\016\uff58\017\uff58\020\uff58\024" +
    "\uff58\026\uff58\027\uff58\032\uff58\034\uff58\040\uff58\047\uff58" +
    "\050\uff58\053\uff58\054\uff58\055\uff58\056\uff58\065\uff58\066" +
    "\uff58\071\uff58\121\uff58\122\uff58\126\uff58\130\uff58\132\uff58" +
    "\147\uff58\150\uff58\152\uff58\153\uff58\154\uff58\155\uff58\156" +
    "\uff58\157\uff58\160\uff58\162\uff58\163\uff58\164\uff58\166\uff58" +
    "\001\002\000\004\075\u027c\001\002\000\004\003\u027d\001" +
    "\002\000\004\004\u027e\001\002\000\132\002\ufee8\003\ufee8" +
    "\010\ufee8\011\ufee8\012\ufee8\013\ufee8\014\ufee8\015\ufee8\016" +
    "\ufee8\017\ufee8\020\ufee8\024\ufee8\026\ufee8\027\ufee8\032\ufee8" +
    "\034\ufee8\040\ufee8\047\ufee8\050\ufee8\053\ufee8\054\ufee8\055" +
    "\ufee8\056\ufee8\065\ufee8\066\ufee8\071\ufee8\121\ufee8\122\ufee8" +
    "\126\ufee8\130\ufee8\132\ufee8\147\ufee8\150\ufee8\152\ufee8\153" +
    "\ufee8\154\ufee8\155\ufee8\156\ufee8\157\ufee8\160\ufee8\162\ufee8" +
    "\163\ufee8\164\ufee8\166\ufee8\001\002\000\004\115\u0280\001" +
    "\002\000\004\004\uff61\001\002\000\004\004\u0282\001\002" +
    "\000\132\002\uff60\003\uff60\010\uff60\011\uff60\012\uff60\013" +
    "\uff60\014\uff60\015\uff60\016\uff60\017\uff60\020\uff60\024\uff60" +
    "\026\uff60\027\uff60\032\uff60\034\uff60\040\uff60\047\uff60\050" +
    "\uff60\053\uff60\054\uff60\055\uff60\056\uff60\065\uff60\066\uff60" +
    "\071\uff60\121\uff60\122\uff60\126\uff60\130\uff60\132\uff60\147" +
    "\uff60\150\uff60\152\uff60\153\uff60\154\uff60\155\uff60\156\uff60" +
    "\157\uff60\160\uff60\162\uff60\163\uff60\164\uff60\166\uff60\001" +
    "\002\000\026\003\u02ab\114\u0186\122\u02ac\123\u018c\124\u0185" +
    "\125\u0180\127\u0182\134\u0183\142\u018a\143\u0189\001\002\000" +
    "\134\002\uffd9\003\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\024\uffd9\026" +
    "\uffd9\027\uffd9\032\uffd9\034\uffd9\040\uffd9\047\uffd9\050\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\065\uffd9\066\uffd9\071" +
    "\uffd9\115\u0286\121\uffd9\122\uffd9\126\uffd9\130\uffd9\132\uffd9" +
    "\147\uffd9\150\uffd9\152\uffd9\153\uffd9\154\uffd9\155\uffd9\156" +
    "\uffd9\157\uffd9\160\uffd9\162\uffd9\163\uffd9\164\uffd9\166\uffd9" +
    "\001\002\000\132\002\uffdd\003\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\024\uffdd\026\uffdd\027\uffdd\032\uffdd\034\uffdd\040\uffdd\047" +
    "\uffdd\050\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\065\uffdd" +
    "\066\uffdd\071\uffdd\121\uffdd\122\uffdd\126\uffdd\130\uffdd\132" +
    "\uffdd\147\uffdd\150\uffdd\152\uffdd\153\uffdd\154\uffdd\155\uffdd" +
    "\156\uffdd\157\uffdd\160\uffdd\162\uffdd\163\uffdd\164\uffdd\166" +
    "\uffdd\001\002\000\006\003\u0288\120\u0289\001\002\000\132" +
    "\002\uffdb\003\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\024\uffdb\026\uffdb" +
    "\027\uffdb\032\uffdb\034\uffdb\040\uffdb\047\uffdb\050\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\065\uffdb\066\uffdb\071\uffdb" +
    "\121\uffdb\122\uffdb\126\uffdb\130\uffdb\132\uffdb\147\uffdb\150" +
    "\uffdb\152\uffdb\153\uffdb\154\uffdb\155\uffdb\156\uffdb\157\uffdb" +
    "\160\uffdb\162\uffdb\163\uffdb\164\uffdb\166\uffdb\001\002\000" +
    "\132\002\uffd7\003\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\024\uffd7\026" +
    "\uffd7\027\uffd7\032\uffd7\034\uffd7\040\uffd7\047\uffd7\050\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\065\uffd7\066\uffd7\071" +
    "\uffd7\121\uffd7\122\uffd7\126\uffd7\130\uffd7\132\uffd7\147\uffd7" +
    "\150\uffd7\152\uffd7\153\uffd7\154\uffd7\155\uffd7\156\uffd7\157" +
    "\uffd7\160\uffd7\162\uffd7\163\uffd7\164\uffd7\166\uffd7\001\002" +
    "\000\126\003\u028d\010\023\011\051\012\100\013\077\014" +
    "\075\015\074\016\062\017\054\020\066\024\031\026\022" +
    "\027\026\032\057\034\067\040\036\047\072\050\021\053" +
    "\027\054\046\055\101\056\043\065\103\066\050\071\024" +
    "\121\u028f\122\070\126\u0290\132\037\147\u028b\150\033\152" +
    "\064\153\042\154\025\155\073\156\056\157\047\160\071" +
    "\162\040\163\032\164\102\166\030\001\002\000\126\003" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\024\uffb4\026\uffb4\027\uffb4\032" +
    "\uffb4\034\uffb4\040\uffb4\047\uffb4\050\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\065\uffb4\066\uffb4\071\uffb4\121\uffb4\122" +
    "\uffb4\126\uffb4\132\uffb4\147\uffb4\150\uffb4\152\uffb4\153\uffb4" +
    "\154\uffb4\155\uffb4\156\uffb4\157\uffb4\160\uffb4\162\uffb4\163" +
    "\uffb4\164\uffb4\166\uffb4\001\002\000\004\004\uffa6\001\002" +
    "\000\132\002\uffd8\003\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\024\uffd8" +
    "\026\uffd8\027\uffd8\032\uffd8\034\uffd8\040\uffd8\047\uffd8\050" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\065\uffd8\066\uffd8" +
    "\071\uffd8\121\uffd8\122\uffd8\126\uffd8\130\uffd8\132\uffd8\147" +
    "\uffd8\150\uffd8\152\uffd8\153\uffd8\154\uffd8\155\uffd8\156\uffd8" +
    "\157\uffd8\160\uffd8\162\uffd8\163\uffd8\164\uffd8\166\uffd8\001" +
    "\002\000\134\002\uffa2\003\uffa2\004\uffaa\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\024\uffa2\026\uffa2\027\uffa2\032\uffa2\034\uffa2\040\uffa2" +
    "\047\uffa2\050\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\065" +
    "\uffa2\066\uffa2\071\uffa2\121\uffa2\122\uffa2\126\uffa2\130\uffa2" +
    "\132\uffa2\147\uffa2\150\uffa2\152\uffa2\153\uffa2\154\uffa2\155" +
    "\uffa2\156\uffa2\157\uffa2\160\uffa2\162\uffa2\163\uffa2\164\uffa2" +
    "\166\uffa2\001\002\000\126\003\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\024\uffae\026\uffae\027\uffae\032\uffae\034\uffae\040\uffae\047" +
    "\uffae\050\uffae\053\uffae\054\uffae\055\uffae\056\uffae\065\uffae" +
    "\066\uffae\071\uffae\121\uffae\122\uffae\126\uffae\132\uffae\147" +
    "\uffae\150\uffae\152\uffae\153\uffae\154\uffae\155\uffae\156\uffae" +
    "\157\uffae\160\uffae\162\uffae\163\uffae\164\uffae\166\uffae\001" +
    "\002\000\134\002\uffa4\003\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\024" +
    "\uffa4\026\uffa4\027\uffa4\032\uffa4\034\uffa4\040\uffa4\047\uffa4" +
    "\050\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\065\uffa4\066" +
    "\uffa4\071\uffa4\115\u029d\121\uffa4\122\uffa4\126\uffa4\130\uffa4" +
    "\132\uffa4\147\uffa4\150\uffa4\152\uffa4\153\uffa4\154\uffa4\155" +
    "\uffa4\156\uffa4\157\uffa4\160\uffa4\162\uffa4\163\uffa4\164\uffa4" +
    "\166\uffa4\001\002\000\004\004\uffa8\001\002\000\126\003" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\024\uffb2\026\uffb2\027\uffb2\032" +
    "\uffb2\034\uffb2\040\uffb2\047\uffb2\050\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\065\uffb2\066\uffb2\071\uffb2\121\uffb2\122" +
    "\uffb2\126\uffb2\132\uffb2\147\uffb2\150\uffb2\152\uffb2\153\uffb2" +
    "\154\uffb2\155\uffb2\156\uffb2\157\uffb2\160\uffb2\162\uffb2\163" +
    "\uffb2\164\uffb2\166\uffb2\001\002\000\126\003\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\024\uffac\026\uffac\027\uffac\032\uffac\034\uffac" +
    "\040\uffac\047\uffac\050\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\065\uffac\066\uffac\071\uffac\121\uffac\122\uffac\126\uffac" +
    "\132\uffac\147\uffac\150\uffac\152\uffac\153\uffac\154\uffac\155" +
    "\uffac\156\uffac\157\uffac\160\uffac\162\uffac\163\uffac\164\uffac" +
    "\166\uffac\001\002\000\126\003\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\024\uffb0\026\uffb0\027\uffb0\032\uffb0\034\uffb0\040\uffb0\047" +
    "\uffb0\050\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\065\uffb0" +
    "\066\uffb0\071\uffb0\121\uffb0\122\uffb0\126\uffb0\132\uffb0\147" +
    "\uffb0\150\uffb0\152\uffb0\153\uffb0\154\uffb0\155\uffb0\156\uffb0" +
    "\157\uffb0\160\uffb0\162\uffb0\163\uffb0\164\uffb0\166\uffb0\001" +
    "\002\000\126\003\u028d\010\023\011\051\012\100\013\077" +
    "\014\075\015\074\016\062\017\054\020\066\024\031\026" +
    "\022\027\026\032\057\034\067\040\036\047\072\050\021" +
    "\053\027\054\046\055\101\056\043\065\103\066\050\071" +
    "\024\121\u028f\122\070\126\u0290\132\037\147\u028b\150\033" +
    "\152\064\153\042\154\025\155\073\156\056\157\047\160" +
    "\071\162\040\163\032\164\102\166\030\001\002\000\132" +
    "\002\uffaf\003\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\024\uffaf\026\uffaf" +
    "\027\uffaf\032\uffaf\034\uffaf\040\uffaf\047\uffaf\050\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\065\uffaf\066\uffaf\071\uffaf" +
    "\121\uffaf\122\uffaf\126\uffaf\130\uffaf\132\uffaf\147\uffaf\150" +
    "\uffaf\152\uffaf\153\uffaf\154\uffaf\155\uffaf\156\uffaf\157\uffaf" +
    "\160\uffaf\162\uffaf\163\uffaf\164\uffaf\166\uffaf\001\002\000" +
    "\126\003\u028d\010\023\011\051\012\100\013\077\014\075" +
    "\015\074\016\062\017\054\020\066\024\031\026\022\027" +
    "\026\032\057\034\067\040\036\047\072\050\021\053\027" +
    "\054\046\055\101\056\043\065\103\066\050\071\024\121" +
    "\u028f\122\070\126\u0290\132\037\147\u028b\150\033\152\064" +
    "\153\042\154\025\155\073\156\056\157\047\160\071\162" +
    "\040\163\032\164\102\166\030\001\002\000\132\002\uffab" +
    "\003\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\024\uffab\026\uffab\027\uffab" +
    "\032\uffab\034\uffab\040\uffab\047\uffab\050\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\065\uffab\066\uffab\071\uffab\121\uffab" +
    "\122\uffab\126\uffab\130\uffab\132\uffab\147\uffab\150\uffab\152" +
    "\uffab\153\uffab\154\uffab\155\uffab\156\uffab\157\uffab\160\uffab" +
    "\162\uffab\163\uffab\164\uffab\166\uffab\001\002\000\126\003" +
    "\u028d\010\023\011\051\012\100\013\077\014\075\015\074" +
    "\016\062\017\054\020\066\024\031\026\022\027\026\032" +
    "\057\034\067\040\036\047\072\050\021\053\027\054\046" +
    "\055\101\056\043\065\103\066\050\071\024\121\u028f\122" +
    "\070\126\u0290\132\037\147\u028b\150\033\152\064\153\042" +
    "\154\025\155\073\156\056\157\047\160\071\162\040\163" +
    "\032\164\102\166\030\001\002\000\132\002\uffb1\003\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\024\uffb1\026\uffb1\027\uffb1\032\uffb1" +
    "\034\uffb1\040\uffb1\047\uffb1\050\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\065\uffb1\066\uffb1\071\uffb1\121\uffb1\122\uffb1" +
    "\126\uffb1\130\uffb1\132\uffb1\147\uffb1\150\uffb1\152\uffb1\153" +
    "\uffb1\154\uffb1\155\uffb1\156\uffb1\157\uffb1\160\uffb1\162\uffb1" +
    "\163\uffb1\164\uffb1\166\uffb1\001\002\000\004\004\u029b\001" +
    "\002\000\126\003\u028d\010\023\011\051\012\100\013\077" +
    "\014\075\015\074\016\062\017\054\020\066\024\031\026" +
    "\022\027\026\032\057\034\067\040\036\047\072\050\021" +
    "\053\027\054\046\055\101\056\043\065\103\066\050\071" +
    "\024\121\u028f\122\070\126\u0290\132\037\147\u028b\150\033" +
    "\152\064\153\042\154\025\155\073\156\056\157\047\160" +
    "\071\162\040\163\032\164\102\166\030\001\002\000\132" +
    "\002\uffa7\003\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\024\uffa7\026\uffa7" +
    "\027\uffa7\032\uffa7\034\uffa7\040\uffa7\047\uffa7\050\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\065\uffa7\066\uffa7\071\uffa7" +
    "\121\uffa7\122\uffa7\126\uffa7\130\uffa7\132\uffa7\147\uffa7\150" +
    "\uffa7\152\uffa7\153\uffa7\154\uffa7\155\uffa7\156\uffa7\157\uffa7" +
    "\160\uffa7\162\uffa7\163\uffa7\164\uffa7\166\uffa7\001\002\000" +
    "\004\004\u029e\001\002\000\132\002\uffa3\003\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\024\uffa3\026\uffa3\027\uffa3\032\uffa3\034\uffa3" +
    "\040\uffa3\047\uffa3\050\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\065\uffa3\066\uffa3\071\uffa3\121\uffa3\122\uffa3\126\uffa3" +
    "\130\uffa3\132\uffa3\147\uffa3\150\uffa3\152\uffa3\153\uffa3\154" +
    "\uffa3\155\uffa3\156\uffa3\157\uffa3\160\uffa3\162\uffa3\163\uffa3" +
    "\164\uffa3\166\uffa3\001\002\000\126\003\u028d\010\023\011" +
    "\051\012\100\013\077\014\075\015\074\016\062\017\054" +
    "\020\066\024\031\026\022\027\026\032\057\034\067\040" +
    "\036\047\072\050\021\053\027\054\046\055\101\056\043" +
    "\065\103\066\050\071\024\121\u028f\122\070\126\u0290\132" +
    "\037\147\u028b\150\033\152\064\153\042\154\025\155\073" +
    "\156\056\157\047\160\071\162\040\163\032\164\102\166" +
    "\030\001\002\000\132\002\uffad\003\uffad\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\024\uffad\026\uffad\027\uffad\032\uffad\034\uffad\040\uffad" +
    "\047\uffad\050\uffad\053\uffad\054\uffad\055\uffad\056\uffad\065" +
    "\uffad\066\uffad\071\uffad\121\uffad\122\uffad\126\uffad\130\uffad" +
    "\132\uffad\147\uffad\150\uffad\152\uffad\153\uffad\154\uffad\155" +
    "\uffad\156\uffad\157\uffad\160\uffad\162\uffad\163\uffad\164\uffad" +
    "\166\uffad\001\002\000\004\004\u02a2\001\002\000\126\003" +
    "\u028d\010\023\011\051\012\100\013\077\014\075\015\074" +
    "\016\062\017\054\020\066\024\031\026\022\027\026\032" +
    "\057\034\067\040\036\047\072\050\021\053\027\054\046" +
    "\055\101\056\043\065\103\066\050\071\024\121\u028f\122" +
    "\070\126\u0290\132\037\147\u028b\150\033\152\064\153\042" +
    "\154\025\155\073\156\056\157\047\160\071\162\040\163" +
    "\032\164\102\166\030\001\002\000\132\002\uffa9\003\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\024\uffa9\026\uffa9\027\uffa9\032\uffa9" +
    "\034\uffa9\040\uffa9\047\uffa9\050\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\065\uffa9\066\uffa9\071\uffa9\121\uffa9\122\uffa9" +
    "\126\uffa9\130\uffa9\132\uffa9\147\uffa9\150\uffa9\152\uffa9\153" +
    "\uffa9\154\uffa9\155\uffa9\156\uffa9\157\uffa9\160\uffa9\162\uffa9" +
    "\163\uffa9\164\uffa9\166\uffa9\001\002\000\004\004\u02a5\001" +
    "\002\000\126\003\u028d\010\023\011\051\012\100\013\077" +
    "\014\075\015\074\016\062\017\054\020\066\024\031\026" +
    "\022\027\026\032\057\034\067\040\036\047\072\050\021" +
    "\053\027\054\046\055\101\056\043\065\103\066\050\071" +
    "\024\121\u028f\122\070\126\u0290\132\037\147\u028b\150\033" +
    "\152\064\153\042\154\025\155\073\156\056\157\047\160" +
    "\071\162\040\163\032\164\102\166\030\001\002\000\132" +
    "\002\uffa5\003\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\024\uffa5\026\uffa5" +
    "\027\uffa5\032\uffa5\034\uffa5\040\uffa5\047\uffa5\050\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\065\uffa5\066\uffa5\071\uffa5" +
    "\121\uffa5\122\uffa5\126\uffa5\130\uffa5\132\uffa5\147\uffa5\150" +
    "\uffa5\152\uffa5\153\uffa5\154\uffa5\155\uffa5\156\uffa5\157\uffa5" +
    "\160\uffa5\162\uffa5\163\uffa5\164\uffa5\166\uffa5\001\002\000" +
    "\126\003\u028d\010\023\011\051\012\100\013\077\014\075" +
    "\015\074\016\062\017\054\020\066\024\031\026\022\027" +
    "\026\032\057\034\067\040\036\047\072\050\021\053\027" +
    "\054\046\055\101\056\043\065\103\066\050\071\024\121" +
    "\u028f\122\070\126\u0290\132\037\147\u028b\150\033\152\064" +
    "\153\042\154\025\155\073\156\056\157\047\160\071\162" +
    "\040\163\032\164\102\166\030\001\002\000\132\002\uffb3" +
    "\003\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\024\uffb3\026\uffb3\027\uffb3" +
    "\032\uffb3\034\uffb3\040\uffb3\047\uffb3\050\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\065\uffb3\066\uffb3\071\uffb3\121\uffb3" +
    "\122\uffb3\126\uffb3\130\uffb3\132\uffb3\147\uffb3\150\uffb3\152" +
    "\uffb3\153\uffb3\154\uffb3\155\uffb3\156\uffb3\157\uffb3\160\uffb3" +
    "\162\uffb3\163\uffb3\164\uffb3\166\uffb3\001\002\000\024\076" +
    "\u0325\077\u031e\100\u0320\101\u0322\102\u0321\103\u0323\110\u031f" +
    "\111\u0324\115\uffb6\001\002\000\004\115\u031c\001\002\000" +
    "\010\003\u0288\115\uffb5\120\u0289\001\002\000\036\005\u02c6" +
    "\076\ufe7e\077\ufe7e\100\ufe7e\101\ufe7e\102\ufe7e\103\ufe7e\104" +
    "\ufe7e\105\ufe7e\106\ufe7e\107\ufe7e\110\ufe7e\111\ufe7e\115\ufe7e" +
    "\001\002\000\032\076\u02b4\077\u02b0\100\u02b3\101\u02af\102" +
    "\u02ae\103\u02b5\104\u0190\105\u018f\106\u0191\107\u018e\110\u02b1" +
    "\111\u02b2\001\002\000\024\114\u0186\122\u02ac\123\u018c\124" +
    "\u0185\125\u0180\127\u0182\134\u0183\142\u018a\143\u0189\001\002" +
    "\000\024\114\u0186\122\u02ac\123\u018c\124\u0185\125\u0180\127" +
    "\u0182\134\u0183\142\u018a\143\u0189\001\002\000\024\114\u0186" +
    "\122\u02ac\123\u018c\124\u0185\125\u0180\127\u0182\134\u0183\142" +
    "\u018a\143\u0189\001\002\000\024\114\u0186\122\u02ac\123\u018c" +
    "\124\u0185\125\u0180\127\u0182\134\u0183\142\u018a\143\u0189\001" +
    "\002\000\024\114\u0186\122\u02ac\123\u018c\124\u0185\125\u0180" +
    "\127\u0182\134\u0183\142\u018a\143\u0189\001\002\000\024\114" +
    "\u0186\122\u02ac\123\u018c\124\u0185\125\u0180\127\u0182\134\u0183" +
    "\142\u018a\143\u0189\001\002\000\024\114\u0186\122\u02ac\123" +
    "\u018c\124\u0185\125\u0180\127\u0182\134\u0183\142\u018a\143\u0189" +
    "\001\002\000\024\114\u0186\122\u02ac\123\u018c\124\u0185\125" +
    "\u0180\127\u0182\134\u0183\142\u018a\143\u0189\001\002\000\004" +
    "\115\uffc5\001\002\000\014\104\u0190\105\u018f\106\u0191\107" +
    "\u018e\115\uffd5\001\002\000\004\115\uffc6\001\002\000\014" +
    "\104\u0190\105\u018f\106\u0191\107\u018e\115\uffd6\001\002\000" +
    "\004\115\uffc4\001\002\000\014\104\u0190\105\u018f\106\u0191" +
    "\107\u018e\115\uffd4\001\002\000\004\115\uffbf\001\002\000" +
    "\014\104\u0190\105\u018f\106\u0191\107\u018e\115\uffcf\001\002" +
    "\000\004\115\uffc0\001\002\000\014\104\u0190\105\u018f\106" +
    "\u0191\107\u018e\115\uffd0\001\002\000\004\115\uffc2\001\002" +
    "\000\014\104\u0190\105\u018f\106\u0191\107\u018e\115\uffd2\001" +
    "\002\000\004\115\uffc3\001\002\000\014\104\u0190\105\u018f" +
    "\106\u0191\107\u018e\115\uffd3\001\002\000\004\115\uffc1\001" +
    "\002\000\014\104\u0190\105\u018f\106\u0191\107\u018e\115\uffd1" +
    "\001\002\000\062\017\u02dd\021\u02d8\022\u02d0\023\u02d5\025" +
    "\u02cf\026\u02d3\030\u02db\031\u02de\033\u02d7\035\u02d9\036\u02cb" +
    "\037\u02c9\041\u02d1\042\u02ce\043\u02da\044\u02d4\051\u02c8\052" +
    "\u02d6\053\u02dc\136\u02cd\137\u02cc\140\u02ca\141\u02d2\144\u02c7" +
    "\001\002\000\004\114\u0319\001\002\000\004\114\u0317\001" +
    "\002\000\004\114\u0315\001\002\000\004\114\u0313\001\002" +
    "\000\004\114\u0311\001\002\000\004\114\u030f\001\002\000" +
    "\004\114\u030d\001\002\000\004\114\u030b\001\002\000\004" +
    "\114\u0309\001\002\000\004\114\u0307\001\002\000\004\114" +
    "\u0305\001\002\000\004\114\u0303\001\002\000\004\114\u0301" +
    "\001\002\000\004\114\u02ff\001\002\000\004\114\u02fd\001" +
    "\002\000\004\114\u02fb\001\002\000\004\114\u02f9\001\002" +
    "\000\004\114\u02f4\001\002\000\004\114\u02f2\001\002\000" +
    "\004\114\u02f0\001\002\000\004\114\u02eb\001\002\000\004" +
    "\114\u02e6\001\002\000\004\114\u02e4\001\002\000\004\114" +
    "\u02df\001\002\000\006\122\u02e0\127\u02e1\001\002\000\004" +
    "\115\u02e3\001\002\000\004\115\u02e2\001\002\000\024\076" +
    "\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99\110\uff99" +
    "\111\uff99\115\uff99\001\002\000\024\076\uff97\077\uff97\100" +
    "\uff97\101\uff97\102\uff97\103\uff97\110\uff97\111\uff97\115\uff97" +
    "\001\002\000\004\115\u02e5\001\002\000\024\076\uffa1\077" +
    "\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\110\uffa1\111\uffa1" +
    "\115\uffa1\001\002\000\006\122\u02e7\127\u02e8\001\002\000" +
    "\004\115\u02ea\001\002\000\004\115\u02e9\001\002\000\024" +
    "\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\110" +
    "\uff8a\111\uff8a\115\uff8a\001\002\000\024\076\uff89\077\uff89" +
    "\100\uff89\101\uff89\102\uff89\103\uff89\110\uff89\111\uff89\115" +
    "\uff89\001\002\000\006\122\u02ed\123\u02ec\001\002\000\004" +
    "\115\u02ef\001\002\000\004\115\u02ee\001\002\000\024\076" +
    "\uff98\077\uff98\100\uff98\101\uff98\102\uff98\103\uff98\110\uff98" +
    "\111\uff98\115\uff98\001\002\000\024\076\uff9a\077\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\110\uff9a\111\uff9a\115\uff9a" +
    "\001\002\000\004\115\u02f1\001\002\000\024\076\uff90\077" +
    "\uff90\100\uff90\101\uff90\102\uff90\103\uff90\110\uff90\111\uff90" +
    "\115\uff90\001\002\000\004\115\u02f3\001\002\000\024\076" +
    "\uff95\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95\110\uff95" +
    "\111\uff95\115\uff95\001\002\000\006\122\u02f6\123\u02f5\001" +
    "\002\000\004\115\u02f8\001\002\000\004\115\u02f7\001\002" +
    "\000\024\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\110\uff9f\111\uff9f\115\uff9f\001\002\000\024\076\uffa0" +
    "\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\110\uffa0\111" +
    "\uffa0\115\uffa0\001\002\000\004\115\u02fa\001\002\000\024" +
    "\076\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96\110" +
    "\uff96\111\uff96\115\uff96\001\002\000\004\115\u02fc\001\002" +
    "\000\024\076\uff8b\077\uff8b\100\uff8b\101\uff8b\102\uff8b\103" +
    "\uff8b\110\uff8b\111\uff8b\115\uff8b\001\002\000\004\115\u02fe" +
    "\001\002\000\024\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102" +
    "\uff9d\103\uff9d\110\uff9d\111\uff9d\115\uff9d\001\002\000\004" +
    "\115\u0300\001\002\000\024\076\uff8e\077\uff8e\100\uff8e\101" +
    "\uff8e\102\uff8e\103\uff8e\110\uff8e\111\uff8e\115\uff8e\001\002" +
    "\000\004\115\u0302\001\002\000\024\076\uff9c\077\uff9c\100" +
    "\uff9c\101\uff9c\102\uff9c\103\uff9c\110\uff9c\111\uff9c\115\uff9c" +
    "\001\002\000\004\115\u0304\001\002\000\024\076\uff86\077" +
    "\uff86\100\uff86\101\uff86\102\uff86\103\uff86\110\uff86\111\uff86" +
    "\115\uff86\001\002\000\004\115\u0306\001\002\000\024\076" +
    "\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\110\uff92" +
    "\111\uff92\115\uff92\001\002\000\004\115\u0308\001\002\000" +
    "\024\076\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e" +
    "\110\uff9e\111\uff9e\115\uff9e\001\002\000\004\115\u030a\001" +
    "\002\000\024\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b" +
    "\103\uff9b\110\uff9b\111\uff9b\115\uff9b\001\002\000\004\115" +
    "\u030c\001\002\000\024\076\uff91\077\uff91\100\uff91\101\uff91" +
    "\102\uff91\103\uff91\110\uff91\111\uff91\115\uff91\001\002\000" +
    "\004\115\u030e\001\002\000\024\076\uff8d\077\uff8d\100\uff8d" +
    "\101\uff8d\102\uff8d\103\uff8d\110\uff8d\111\uff8d\115\uff8d\001" +
    "\002\000\004\115\u0310\001\002\000\024\076\uff88\077\uff88" +
    "\100\uff88\101\uff88\102\uff88\103\uff88\110\uff88\111\uff88\115" +
    "\uff88\001\002\000\004\115\u0312\001\002\000\024\076\uff94" +
    "\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\110\uff94\111" +
    "\uff94\115\uff94\001\002\000\004\115\u0314\001\002\000\024" +
    "\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87\110" +
    "\uff87\111\uff87\115\uff87\001\002\000\004\115\u0316\001\002" +
    "\000\024\076\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103" +
    "\uff93\110\uff93\111\uff93\115\uff93\001\002\000\004\115\u0318" +
    "\001\002\000\024\076\uff8c\077\uff8c\100\uff8c\101\uff8c\102" +
    "\uff8c\103\uff8c\110\uff8c\111\uff8c\115\uff8c\001\002\000\004" +
    "\115\u031a\001\002\000\024\076\uff8f\077\uff8f\100\uff8f\101" +
    "\uff8f\102\uff8f\103\uff8f\110\uff8f\111\uff8f\115\uff8f\001\002" +
    "\000\132\002\uffda\003\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\024\uffda" +
    "\026\uffda\027\uffda\032\uffda\034\uffda\040\uffda\047\uffda\050" +
    "\uffda\053\uffda\054\uffda\055\uffda\056\uffda\065\uffda\066\uffda" +
    "\071\uffda\121\uffda\122\uffda\126\uffda\130\uffda\132\uffda\147" +
    "\uffda\150\uffda\152\uffda\153\uffda\154\uffda\155\uffda\156\uffda" +
    "\157\uffda\160\uffda\162\uffda\163\uffda\164\uffda\166\uffda\001" +
    "\002\000\006\003\u0288\120\u0289\001\002\000\132\002\uffdc" +
    "\003\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\024\uffdc\026\uffdc\027\uffdc" +
    "\032\uffdc\034\uffdc\040\uffdc\047\uffdc\050\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\065\uffdc\066\uffdc\071\uffdc\121\uffdc" +
    "\122\uffdc\126\uffdc\130\uffdc\132\uffdc\147\uffdc\150\uffdc\152" +
    "\uffdc\153\uffdc\154\uffdc\155\uffdc\156\uffdc\157\uffdc\160\uffdc" +
    "\162\uffdc\163\uffdc\164\uffdc\166\uffdc\001\002\000\024\114" +
    "\u0186\122\u02ac\123\u018c\124\u0185\125\u0180\127\u0182\134\u0183" +
    "\142\u018a\143\u0189\001\002\000\024\114\u0186\122\u02ac\123" +
    "\u018c\124\u0185\125\u0180\127\u0182\134\u0183\142\u018a\143\u0189" +
    "\001\002\000\024\114\u0186\122\u02ac\123\u018c\124\u0185\125" +
    "\u0180\127\u0182\134\u0183\142\u018a\143\u0189\001\002\000\024" +
    "\114\u0186\122\u02ac\123\u018c\124\u0185\125\u0180\127\u0182\134" +
    "\u0183\142\u018a\143\u0189\001\002\000\024\114\u0186\122\u02ac" +
    "\123\u018c\124\u0185\125\u0180\127\u0182\134\u0183\142\u018a\143" +
    "\u0189\001\002\000\024\114\u0186\122\u02ac\123\u018c\124\u0185" +
    "\125\u0180\127\u0182\134\u0183\142\u018a\143\u0189\001\002\000" +
    "\024\114\u0186\122\u02ac\123\u018c\124\u0185\125\u0180\127\u0182" +
    "\134\u0183\142\u018a\143\u0189\001\002\000\024\114\u0186\122" +
    "\u02ac\123\u018c\124\u0185\125\u0180\127\u0182\134\u0183\142\u018a" +
    "\143\u0189\001\002\000\004\115\uffbe\001\002\000\014\104" +
    "\u0190\105\u018f\106\u0191\107\u018e\115\uffce\001\002\000\004" +
    "\115\uffb7\001\002\000\014\104\u0190\105\u018f\106\u0191\107" +
    "\u018e\115\uffc7\001\002\000\004\115\uffbd\001\002\000\014" +
    "\104\u0190\105\u018f\106\u0191\107\u018e\115\uffcd\001\002\000" +
    "\004\115\uffbb\001\002\000\014\104\u0190\105\u018f\106\u0191" +
    "\107\u018e\115\uffcb\001\002\000\004\115\uffb9\001\002\000" +
    "\014\104\u0190\105\u018f\106\u0191\107\u018e\115\uffc9\001\002" +
    "\000\004\115\uffbc\001\002\000\014\104\u0190\105\u018f\106" +
    "\u0191\107\u018e\115\uffcc\001\002\000\004\115\uffb8\001\002" +
    "\000\014\104\u0190\105\u018f\106\u0191\107\u018e\115\uffc8\001" +
    "\002\000\004\115\uffba\001\002\000\014\104\u0190\105\u018f" +
    "\106\u0191\107\u018e\115\uffca\001\002\000\004\075\u0337\001" +
    "\002\000\004\003\u0338\001\002\000\004\004\u0339\001\002" +
    "\000\132\002\ufeda\003\ufeda\010\ufeda\011\ufeda\012\ufeda\013" +
    "\ufeda\014\ufeda\015\ufeda\016\ufeda\017\ufeda\020\ufeda\024\ufeda" +
    "\026\ufeda\027\ufeda\032\ufeda\034\ufeda\040\ufeda\047\ufeda\050" +
    "\ufeda\053\ufeda\054\ufeda\055\ufeda\056\ufeda\065\ufeda\066\ufeda" +
    "\071\ufeda\121\ufeda\122\ufeda\126\ufeda\130\ufeda\132\ufeda\147" +
    "\ufeda\150\ufeda\152\ufeda\153\ufeda\154\ufeda\155\ufeda\156\ufeda" +
    "\157\ufeda\160\ufeda\162\ufeda\163\ufeda\164\ufeda\166\ufeda\001" +
    "\002\000\004\115\u033b\001\002\000\004\004\uff5d\001\002" +
    "\000\004\004\u033d\001\002\000\132\002\uff5c\003\uff5c\010" +
    "\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c" +
    "\017\uff5c\020\uff5c\024\uff5c\026\uff5c\027\uff5c\032\uff5c\034" +
    "\uff5c\040\uff5c\047\uff5c\050\uff5c\053\uff5c\054\uff5c\055\uff5c" +
    "\056\uff5c\065\uff5c\066\uff5c\071\uff5c\121\uff5c\122\uff5c\126" +
    "\uff5c\130\uff5c\132\uff5c\147\uff5c\150\uff5c\152\uff5c\153\uff5c" +
    "\154\uff5c\155\uff5c\156\uff5c\157\uff5c\160\uff5c\162\uff5c\163" +
    "\uff5c\164\uff5c\166\uff5c\001\002\000\004\075\u033f\001\002" +
    "\000\004\003\u0340\001\002\000\004\004\u0341\001\002\000" +
    "\132\002\ufeee\003\ufeee\010\ufeee\011\ufeee\012\ufeee\013\ufeee" +
    "\014\ufeee\015\ufeee\016\ufeee\017\ufeee\020\ufeee\024\ufeee\026" +
    "\ufeee\027\ufeee\032\ufeee\034\ufeee\040\ufeee\047\ufeee\050\ufeee" +
    "\053\ufeee\054\ufeee\055\ufeee\056\ufeee\065\ufeee\066\ufeee\071" +
    "\ufeee\121\ufeee\122\ufeee\126\ufeee\130\ufeee\132\ufeee\147\ufeee" +
    "\150\ufeee\152\ufeee\153\ufeee\154\ufeee\155\ufeee\156\ufeee\157" +
    "\ufeee\160\ufeee\162\ufeee\163\ufeee\164\ufeee\166\ufeee\001\002" +
    "\000\130\003\052\010\023\011\051\012\100\013\077\014" +
    "\075\015\074\016\062\017\054\020\066\024\031\026\022" +
    "\027\026\032\057\034\067\040\036\047\072\050\021\053" +
    "\027\054\046\055\101\056\043\065\103\066\050\071\024" +
    "\121\055\122\070\126\060\130\045\132\037\147\044\150" +
    "\033\152\064\153\042\154\025\155\073\156\056\157\047" +
    "\160\071\162\040\163\032\164\102\166\030\001\002\000" +
    "\004\002\ufffd\001\002\000\012\003\004\122\007\126\005" +
    "\130\006\001\002\000\004\002\ufff7\001\002\000\012\003" +
    "\004\122\007\126\005\130\006\001\002\000\004\002\ufff9" +
    "\001\002\000\012\003\004\122\007\126\005\130\006\001" +
    "\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0347\000\004\002\007\001\001\000\004\037\u0347\001" +
    "\001\000\004\040\u0345\001\001\000\004\041\u0343\001\001" +
    "\000\004\035\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\u0341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\034\004\040\005\033\006\075\014\060" +
    "\017\064\024\052\027\062\001\001\000\004\143\u033d\001" +
    "\001\000\002\001\001\000\004\155\u0335\001\001\000\004" +
    "\031\u0284\001\001\000\002\001\001\000\004\146\u027a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\145\u026f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\150\u0262\001\001\000\004" +
    "\154\u025e\001\001\000\002\001\001\000\004\043\u0258\001" +
    "\001\000\002\001\001\000\004\153\u0250\001\001\000\004" +
    "\047\u024d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u023e\001\001\000\004\156\u023a" +
    "\001\001\000\006\042\u0237\045\u0236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\147\u0227\001\001\000\004\046\u0224\001\001\000" +
    "\002\001\001\000\004\164\u0220\001\001\000\004\044\u021e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\144" +
    "\u0216\001\001\000\004\163\u0212\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\151\207\001\001\000\002\001" +
    "\001\000\006\142\171\162\173\001\001\000\006\141\157" +
    "\161\161\001\001\000\002\001\001\000\006\140\146\160" +
    "\145\001\001\000\006\137\131\157\127\001\001\000\004" +
    "\152\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\115\001\001\000\004\025\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\136\u0138\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\111\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\u010f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\134\u0114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\u011a" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\110" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\u0121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\115\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\u012b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\114\u0132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\126\u0136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\u013c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\123" +
    "\u0140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\132\u0144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\u014c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\106\u0150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\133\u0154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0158\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\124\u015c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\127\u0160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\u0164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\130\u0168\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\117\u016c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\u0170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\135" +
    "\u0174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\u018c\011\u018a\013\u017e\016\u0180\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\166\u020f\001" +
    "\001\000\002\001\001\000\004\007\u0208\001\001\000\002" +
    "\001\001\000\006\165\u019c\167\u019b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\224\u0191\001\001\000\004\007\u019a\001\001\000" +
    "\004\007\u0198\001\001\000\004\007\u0196\001\001\000\004" +
    "\007\u0194\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u01a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\171\u0201\203\u0202\001" +
    "\001\000\006\200\u01fb\212\u01fc\001\001\000\006\172\u01f5" +
    "\204\u01f6\001\001\000\006\170\u01ef\202\u01f0\001\001\000" +
    "\006\201\u01e9\213\u01ea\001\001\000\006\176\u01e3\210\u01e4" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\174" +
    "\u01dc\206\u01dd\001\001\000\006\177\u01d6\211\u01d7\001\001" +
    "\000\006\175\u01d1\207\u01d0\001\001\000\006\173\u01aa\205" +
    "\u01ab\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u01b1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\215\u01b8\001\001\000" +
    "\004\221\u01b6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\216\u01c0\001\001\000\004\222\u01be" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\217\u01c7" +
    "\001\001\000\004\223\u01c5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\214\u01ce\001\001\000\004\220\u01cc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u01d3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u01da\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u01e0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u01e7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u01ed\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u01f3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u01f9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u01ff\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0205\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u020d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u0210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\u021c\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\u021f\004\040\005\033\006\075\014" +
    "\060\017\064\024\052\027\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\u022d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\100\u0234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\u0238\004\040\005\033" +
    "\006\075\014\060\017\064\024\052\027\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\u0243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\u0247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\u024b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\u0256\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\u0259\004\040\005\033" +
    "\006\075\014\060\017\064\024\052\027\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\u025c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\u0269" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\u026d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u0278\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\u0280\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\u02ac\030\u02a9\033" +
    "\u02a8\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u0286\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\u0289\014\u0290\017\u0292\024\u028d\027\u0291\034\u028b" +
    "\001\001\000\004\050\u02a6\001\001\000\004\057\u02a3\001" +
    "\001\000\002\001\001\000\004\055\u02a0\001\001\000\004" +
    "\053\u029e\001\001\000\002\001\001\000\004\056\u0299\001" +
    "\001\000\004\051\u0297\001\001\000\004\054\u0295\001\001" +
    "\000\004\052\u0293\001\001\000\016\005\u0289\014\u0290\017" +
    "\u0292\024\u028d\027\u0291\034\u0294\001\001\000\002\001\001" +
    "\000\016\005\u0289\014\u0290\017\u0292\024\u028d\027\u0291\034" +
    "\u0296\001\001\000\002\001\001\000\016\005\u0289\014\u0290" +
    "\017\u0292\024\u028d\027\u0291\034\u0298\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\u0289\014\u0290\017\u0292" +
    "\024\u028d\027\u0291\034\u029b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\u0289\014\u0290" +
    "\017\u0292\024\u028d\027\u0291\034\u029f\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\u0289\014\u0290\017\u0292" +
    "\024\u028d\027\u0291\034\u02a2\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\u0289\014\u0290\017\u0292\024\u028d" +
    "\027\u0291\034\u02a5\001\001\000\002\001\001\000\016\005" +
    "\u0289\014\u0290\017\u0292\024\u028d\027\u0291\034\u02a7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u031a\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u02c4\033\u02c3\001\001\000\006\007\u02c2\033" +
    "\u02c1\001\001\000\006\007\u02c0\033\u02bf\001\001\000\006" +
    "\007\u02be\033\u02bd\001\001\000\006\007\u02bc\033\u02bb\001" +
    "\001\000\006\007\u02ba\033\u02b9\001\001\000\006\007\u02b8" +
    "\033\u02b7\001\001\000\006\007\u02b6\033\u02b5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u031c\001\001\000\002\001" +
    "\001\000\006\007\u0334\033\u0333\001\001\000\006\007\u0332" +
    "\033\u0331\001\001\000\006\007\u0330\033\u032f\001\001\000" +
    "\006\007\u032e\033\u032d\001\001\000\006\007\u032c\033\u032b" +
    "\001\001\000\006\007\u032a\033\u0329\001\001\000\006\007" +
    "\u0328\033\u0327\001\001\000\006\007\u0326\033\u0325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u033b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\u0342\004\040\005\033\006\075\014\060\017\064\024\052" +
    "\027\062\001\001\000\002\001\001\000\004\002\u0344\001" +
    "\001\000\002\001\001\000\004\002\u0346\001\001\000\002" +
    "\001\001\000\004\002\u0348\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // EXP ::= Parentesis_izq error Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP ( error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // EXP ::= Parentesis_izq error EXP Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( error EXP ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // EXP ::= Parentesis_izq EXP error Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // EXP ::= EXP Division error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // EXP ::= EXP Multiplicacion error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // EXP ::= EXP Resta error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // EXP ::= EXP Suma error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // EXP ::= False 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ False ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // EXP ::= True 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ True ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // EXP ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // EXP ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // EXP ::= Numero_Euler_Flotante 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // EXP ::= Numero_Euler 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // EXP ::= Numero_Flotante 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // EXP ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // EXP ::= Parentesis_izq EXP Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP ) ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // EXP ::= EXP Division EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / EXP ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // EXP ::= EXP Multiplicacion EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * EXP ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // EXP ::= EXP Resta EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - EXP ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // EXP ::= EXP Suma EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + EXP ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // EXP_LIST ::= EXP NT$119 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$119
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LIST",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // NT$119 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP_LIST ::= [ EXP PComa ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$119",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // OBJ_PARAMETROS ::= PortD Parentesis_izq Identificador NT$118 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$118
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // NT$118 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortD ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$118",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // OBJ_PARAMETROS ::= PortC Parentesis_izq Identificador NT$117 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$117
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // NT$117 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortC ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$117",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // OBJ_PARAMETROS ::= PortB Parentesis_izq Identificador NT$116 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$116
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // NT$116 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortB ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$116",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // OBJ_PARAMETROS ::= PortA Parentesis_izq Identificador NT$115 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$115
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // NT$115 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$115",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // OBJ_PARAMETROS ::= PortD Parentesis_izq Numero_Entero NT$114 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$114
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // NT$114 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortD ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$114",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // OBJ_PARAMETROS ::= PortC Parentesis_izq Numero_Entero NT$113 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$113
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // NT$113 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortC ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$113",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // OBJ_PARAMETROS ::= PortB Parentesis_izq Numero_Entero NT$112 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$112
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // NT$112 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortB ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$112",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // OBJ_PARAMETROS ::= PortA Parentesis_izq Numero_Entero NT$111 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$111
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // NT$111 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$111",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // OBJETO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> OBJETO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // OBJETO ::= SmartCamera NT$110 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$110
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // NT$110 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$110",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // OBJETO ::= Device NT$109 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$109
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // NT$109 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Device error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$109",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // OBJETO ::= Alarm NT$108 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$108
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // NT$108 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Alarm error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$108",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // OBJETO ::= Camera NT$107 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$107
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // NT$107 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Camera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$107",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // OBJETO ::= Window NT$106 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$106
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // NT$106 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Window error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$106",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // OBJETO ::= Door NT$105 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$105
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // NT$105 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Door error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$105",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // OBJETO ::= LightRGB NT$104 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$104
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // NT$104 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ LightRGB error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$104",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // OBJETO ::= Light NT$103 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$103
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // NT$103 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Light error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$103",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // OBJETO ::= Ac NT$102 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$102
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // NT$102 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Ac error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$102",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // OBJETO ::= Temp NT$101 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$101
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // NT$101 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$101",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // OBJETO ::= SmartCamera NT$100 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$100
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // NT$100 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$100",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // OBJETO ::= Device NT$99 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$99
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // NT$99 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Device( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$99",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // OBJETO ::= Alarm NT$98 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$98
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // NT$98 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Alarm( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$98",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // OBJETO ::= Camera NT$97 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$97
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // NT$97 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Camera( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$97",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // OBJETO ::= Window NT$96 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$96
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // NT$96 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Window( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$96",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // OBJETO ::= Door NT$95 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$95
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // NT$95 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Door( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$95",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // OBJETO ::= LightRGB NT$94 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$94
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // NT$94 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ LightRGB( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$94",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // OBJETO ::= Light NT$93 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$93
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // NT$93 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Light( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$93",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // OBJETO ::= Ac NT$92 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$92
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // NT$92 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Ac( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$92",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // OBJETO ::= Temp NT$91 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$91
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // NT$91 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$91",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // DEC_OBJETO ::= error NT$90 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$90
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // NT$90 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$90",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // DEC_OBJETO ::= New NT$89 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$89
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // NT$89 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New OBJETO ; ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$89",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // DECL_TIPO ::= error NT$88 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$88
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // NT$88 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$88",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // DECL_TIPO ::= DEC_OBJETO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ DEC_OBJETO ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // DECL_TIPO ::= EXP_LIST 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ EXP_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // DECL ::= Enable NT$87 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$87
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // NT$87 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$87",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // DECL ::= New NT$86 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$86
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // NT$86 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$86",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // DECL ::= PortD NT$85 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$85
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // NT$85 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$85",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // DECL ::= PortC NT$84 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$84
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // NT$84 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$84",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // DECL ::= PortB NT$83 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$83
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // NT$83 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$83",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // DECL ::= PortA NT$82 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // NT$82 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$82",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // DECL ::= Initialize NT$81 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // NT$81 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$81",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // DECL ::= Home NT$80 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$80
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // NT$80 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$80",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // DECL ::= SmartCamera NT$79 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$79
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // NT$79 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$79",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // DECL ::= Device NT$78 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NT$78 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$78",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // DECL ::= Alarm NT$77 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NT$77 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$77",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // DECL ::= Camera NT$76 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NT$76 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$76",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // DECL ::= Window NT$75 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // NT$75 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$75",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // DECL ::= Door NT$74 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // NT$74 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$74",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // DECL ::= LightRGB NT$73 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // NT$73 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$73",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // DECL ::= Light NT$72 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // NT$72 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$72",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // DECL ::= Ac NT$71 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // NT$71 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$71",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // DECL ::= Temp NT$70 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // NT$70 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$70",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // DECL ::= Identificador Asignacion DECL_TIPO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ "+s+" = DECL_TIPO ]\n");
        Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ENA_PORT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ENA_PORT ::= Enable Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ Enable() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ACT_PORT ::= PortD error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ACT_PORT ::= PortC error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortC => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ACT_PORT ::= PortB error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortB => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ACT_PORT ::= PortA error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortA => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ACT_PORT ::= PortD NT$69 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // NT$69 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$69",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ACT_PORT ::= PortC NT$68 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NT$68 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortC => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$68",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ACT_PORT ::= PortB NT$67 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // NT$67 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortB => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$67",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ACT_PORT ::= PortA NT$66 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // NT$66 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortA => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$66",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // THIS_FUNC_TYPE ::= DeleteFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ DeleteFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // THIS_FUNC_TYPE ::= SaveFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ SaveFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // THIS_FUNC_TYPE ::= FaceCheck Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ FaceCheck() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // THIS_FUNC_TYPE ::= Move Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // THIS_FUNC_TYPE ::= StopRec Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ StopRec() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // THIS_FUNC_TYPE ::= Record Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Record() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // THIS_FUNC_TYPE ::= Doorbell Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Doorbell() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // THIS_FUNC_TYPE ::= IsUnlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsUnlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // THIS_FUNC_TYPE ::= IsLock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsLock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // THIS_FUNC_TYPE ::= IsClose Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsClose() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // THIS_FUNC_TYPE ::= IsOpen Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsOpen() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // THIS_FUNC_TYPE ::= Unlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Unlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // THIS_FUNC_TYPE ::= Lock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Lock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // THIS_FUNC_TYPE ::= Close Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Close() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // THIS_FUNC_TYPE ::= Open Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Open() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // THIS_FUNC_TYPE ::= Color Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Color("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // THIS_FUNC_TYPE ::= LightMode Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ LightMode("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // THIS_FUNC_TYPE ::= Color Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Color("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // THIS_FUNC_TYPE ::= LightMode Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ LightMode("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // THIS_FUNC_TYPE ::= Off Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Off() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // THIS_FUNC_TYPE ::= On Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ On() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // THIS_FUNC_TYPE ::= Set Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Set("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // THIS_FUNC_TYPE ::= Shutdown Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Shutdown() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // THIS_FUNC_TYPE ::= Start Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Start() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // THIS_FUNC_TYPE ::= Set Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Set("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // THIS_FUNC_TYPE ::= GetTemp Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ GetTemp() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // THIS_FUNC ::= This Punto THIS_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC ::= [ This Punto FUNC_TYPE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // FUNC_PARAMS ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e011 - Sintaxis erronea en la función Program -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // FUNC_PARAMS ::= Cadena Coma Cadena Coma Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", "+b+", "+c+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC Coma Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", THIS_FUNC, "+b+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+", THIS_FUNC ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // FUNC_TYPE ::= error NT$65 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$65 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - SQintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$65",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // FUNC_TYPE ::= IsOn Parentesis_izq Parentesis_der NT$64 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // NT$64 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOn(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$64",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // FUNC_TYPE ::= Move Parentesis_izq Cadena Parentesis_der NT$63 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$63 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Move("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$63",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // FUNC_TYPE ::= Off Parentesis_izq Parentesis_der NT$62 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$62 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$62",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // FUNC_TYPE ::= On Parentesis_izq Parentesis_der NT$61 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$61 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ On(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$61",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FUNC_TYPE ::= DeleteFace Parentesis_izq Parentesis_der NT$60 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$60 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ DeleteFace(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$60",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // FUNC_TYPE ::= SaveFace Parentesis_izq Parentesis_der NT$59 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$59 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ SaveFace(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$59",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // FUNC_TYPE ::= FaceCheck Parentesis_izq Parentesis_der NT$58 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$58 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ FaceCheck(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$58",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // FUNC_TYPE ::= StopRec Parentesis_izq Parentesis_der NT$57 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$57 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ StopRec(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$57",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // FUNC_TYPE ::= Record Parentesis_izq Parentesis_der NT$56 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$56 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Record(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$56",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // FUNC_TYPE ::= Doorbell Parentesis_izq Parentesis_der NT$55 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$55 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Doorbell(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$55",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // FUNC_TYPE ::= IsUnlock Parentesis_izq Parentesis_der NT$54 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$54 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsUnlock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$54",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FUNC_TYPE ::= IsLock Parentesis_izq Parentesis_der NT$53 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$53 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsLock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$53",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // FUNC_TYPE ::= IsClose Parentesis_izq Parentesis_der NT$52 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$52 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsClose(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$52",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // FUNC_TYPE ::= IsOpen Parentesis_izq Parentesis_der NT$51 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$51 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOpen(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$51",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FUNC_TYPE ::= Unlock Parentesis_izq Parentesis_der NT$50 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$50 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Unlock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$50",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FUNC_TYPE ::= Lock Parentesis_izq Parentesis_der NT$49 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$49 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Lock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$49",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // FUNC_TYPE ::= Close Parentesis_izq Parentesis_der NT$48 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$48 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Close(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$48",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // FUNC_TYPE ::= Open Parentesis_izq Parentesis_der NT$47 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$47 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Open(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$47",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // FUNC_TYPE ::= Color Parentesis_izq Identificador Parentesis_der NT$46 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$46 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Color("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$46",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FUNC_TYPE ::= LightMode Parentesis_izq Identificador Parentesis_der NT$45 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$45 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ LightMode("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$45",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FUNC_TYPE ::= Color Parentesis_izq Cadena Parentesis_der NT$44 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$44 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Color("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$44",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FUNC_TYPE ::= LightMode Parentesis_izq Numero_Entero Parentesis_der NT$43 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$43 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ LightMode("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$43",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FUNC_TYPE ::= Shutdown Parentesis_izq Parentesis_der NT$42 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$42 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$42",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FUNC_TYPE ::= Start Parentesis_izq Parentesis_der NT$41 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$41 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$41",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // FUNC_TYPE ::= Program Parentesis_izq FUNC_PARAMS Parentesis_der NT$40 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$40 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Program(FUNC_PARAMS); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$40",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FUNC_TYPE ::= Set Parentesis_izq Identificador Parentesis_der NT$39 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$39 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Set("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$39",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FUNC_TYPE ::= Set Parentesis_izq Numero_Entero Parentesis_der NT$38 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$38 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Set("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$38",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FUNC_TYPE ::= GetTemp Parentesis_izq Parentesis_der NT$37 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$37 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ GetTemp(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$37",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // FUNC ::= Move Parentesis_izq Cadena Parentesis_der NT$36 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$36 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Move("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$36",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FUNC ::= GetTemp Parentesis_izq Parentesis_der NT$35 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$35 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ GetTemp(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$35",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FUNC ::= On Parentesis_izq Parentesis_der NT$34 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$34 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ On(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$34",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FUNC ::= CamaraOn Parentesis_izq Parentesis_der NT$33 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$33 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ CamaraOn(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$33",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FUNC ::= Detener Parentesis_izq Parentesis_der NT$32 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$32 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Detener(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$32",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUNC ::= Retroceder Parentesis_izq Parentesis_der NT$31 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$31 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Retroceder(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$31",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FUNC ::= Avanzar Parentesis_izq Parentesis_der NT$30 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$30 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Avanzar(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$30",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FUNC ::= IsSound Parentesis_izq Parentesis_der NT$29 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$29 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsSound(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$29",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FUNC ::= MicroOff Parentesis_izq Parentesis_der NT$28 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$28 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ MicroOff(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$28",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FUNC ::= MicroOn Parentesis_izq Parentesis_der NT$27 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$27 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ MicroOn(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$27",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FUNC ::= Whistle Parentesis_izq Parentesis_der NT$26 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$26 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Whistle(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$26",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FUNC ::= IsMove Parentesis_izq Parentesis_der NT$25 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$25 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsMove(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$25",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // FUNC ::= IsCamaraOn Parentesis_izq Parentesis_der NT$24 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$24 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsCamaraOn(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$24",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FUNC ::= Capture Parentesis_izq Parentesis_der NT$23 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$23 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Capture(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$23",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FUNC ::= RecordTime Parentesis_izq Numero_Entero Parentesis_der NT$22 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$22 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ RecordTime("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$22",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FUNC ::= Camera Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FUNC ::= Micro Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VALUE_IN ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis erronea en el método Receive -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VALUE_IN ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VALUE_IN ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VALUE_IN ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VALUE_OUT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis erronea en el método Display -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VALUE_OUT ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALUE_OUT ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VALUE_OUT ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IN_OUT ::= Receive error NT$21 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$21 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis en el método Receive erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$21",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IN_OUT ::= Receive Parentesis_izq VALUE_IN Parentesis_der NT$20 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$20 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive VALUE PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$20",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IN_OUT ::= Display VALUE_OUT NT$19 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$19 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Display VALUE PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF_FUNC_TYPE ::= Identificador Punto DeleteFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".DeleteFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IF_FUNC_TYPE ::= Identificador Punto SaveFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".SaveFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IF_FUNC_TYPE ::= Identificador Punto FaceCheck Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".FaceCheck() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IF_FUNC_TYPE ::= Identificador Punto Move Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+a+".Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IF_FUNC_TYPE ::= Identificador Punto Move Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+a+".Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IF_FUNC_TYPE ::= Identificador Punto StopRec Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".StopRec() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IF_FUNC_TYPE ::= Identificador Punto Record Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Record() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IF_FUNC_TYPE ::= Identificador Punto Doorbell Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Doorbell() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IF_FUNC_TYPE ::= Identificador Punto IsUnlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".IsUnlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IF_FUNC_TYPE ::= Identificador Punto IsOn Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+".IsLock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IF_FUNC_TYPE ::= Identificador Punto IsLock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+".IsLock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IF_FUNC_TYPE ::= Identificador Punto IsClose Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIF_FUNC_TYPE ::= [ "+s+".IsClose() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IF_FUNC_TYPE ::= Identificador Punto IsOpen Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".IsOpen() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IF_FUNC_TYPE ::= Identificador Punto Unlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Unlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IF_FUNC_TYPE ::= Identificador Punto Lock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Lock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IF_FUNC_TYPE ::= Identificador Punto Close Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Close() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IF_FUNC_TYPE ::= Identificador Punto Open Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Open() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IF_FUNC_TYPE ::= Identificador Punto Color Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Color("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IF_FUNC_TYPE ::= Identificador Punto LightMode Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".LightMode("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IF_FUNC_TYPE ::= Identificador Punto Color Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Color("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IF_FUNC_TYPE ::= Identificador Punto LightMode Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".LightMode("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF_FUNC_TYPE ::= Identificador Punto Off Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Off() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF_FUNC_TYPE ::= Identificador Punto On Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".On() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF_FUNC_TYPE ::= Identificador Punto Shutdown Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Shutdown() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF_FUNC_TYPE ::= Identificador Punto Start Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Start() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF_FUNC_TYPE ::= Identificador Punto Set Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Set("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IF_FUNC_TYPE ::= Identificador Punto Set Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Set("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF_FUNC_TYPE ::= Identificador Punto GetTemp Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".GetTemp() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // STMT_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ]\n");
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STMT_IF ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ }); ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STMT_IF ::= Llave_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ } ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // STMT_IF ::= ERROR3 NT$18 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$18 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR3 ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // STMT_IF ::= ERROR NT$17 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$17 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STMT_IF ::= error NT$16 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$16 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STMT_IF ::= IF_STMT NT$15 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$15 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STMT_IF ::= IN_OUT NT$14 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$14 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STMT_IF ::= FUNC NT$13 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$13 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ FUNC STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STMT_IF ::= ACT_PORT NT$12 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$12 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ACT_PORT STMT_IF]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // STMT_IF ::= DECL NT$11 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$11 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ DECL STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e015 - Condición inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND ::= IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ IF_FUNC_TYPE ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND ::= IF_FUNC_TYPE Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND ::= IF_FUNC_TYPE And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND ::= IF_FUNC_TYPE Menor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND ::= IF_FUNC_TYPE Menor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND ::= IF_FUNC_TYPE Mayor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND ::= IF_FUNC_TYPE Mayor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND ::= IF_FUNC_TYPE Diferente IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND ::= IF_FUNC_TYPE Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COND ::= EXP Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND ::= EXP And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND ::= EXP Menor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND ::= EXP Menor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COND ::= EXP Mayor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND ::= EXP Mayor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND ::= EXP Diferente IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND ::= EXP Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND ::= IF_FUNC_TYPE Or EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND ::= IF_FUNC_TYPE And EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND ::= IF_FUNC_TYPE Menor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND ::= IF_FUNC_TYPE Menor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND ::= IF_FUNC_TYPE Mayor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND ::= IF_FUNC_TYPE Mayor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND ::= IF_FUNC_TYPE Diferente EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND ::= IF_FUNC_TYPE Igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COND ::= EXP Or EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COND ::= EXP And EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COND ::= EXP Menor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND ::= EXP Menor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COND ::= EXP Mayor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND ::= EXP Mayor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COND ::= EXP Diferente EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COND ::= EXP Igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND_IF_2 ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND_IF_2 ::= Llave_izq STMT_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ { IF_FUNC_TYPE }  ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COND_IF ::= Parentesis_izq error COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COND_IF ::= error Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COND_IF ::= Parentesis_izq COND Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ ( COND ) COND_IF_2 ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_STMT ::= If COND_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> IF_STMT ::= [ If COND_IF ; ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_STMT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STMT ::= ERROR3 NT$10 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STMT ::= ERROR NT$9 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$9 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STMT ::= error NT$8 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$8 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STMT ::= IN_OUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ IN_OUT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STMT ::= FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ FUNC ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STMT ::= ACT_PORT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ ACT_PORT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMT ::= DECL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ DECL ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CIERRE ::= IF_STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ IF_STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CIERRE ::= STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CIERRE ::= ERROR2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CIERRE ::= ERROR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CIERRE ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CIERRE ::= Llave_der Parentesis_der PComa error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CIERRE ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STMT_LIST ::= CIERRE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ CIERRE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STMT_LIST ::= IF_STMT NT$7 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IF_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STMT_LIST ::= STMT NT$6 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STMT_LIST ::= error NT$5 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - No se encontró el Metodo Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= ERROR2 NT$4 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= ERROR NT$3 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error NT$2 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Identificador error NT$1 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ "+s+" error { STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e004 - Sintaxis del Metodo Initialize Erronea -> ");  
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Identificador NT$0 Punto Initialize Parentesis_izq Home Llave_izq STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO "+s+".Initialize(Home{ STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

