
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 11 17:43:15 MDT 2021
//----------------------------------------------------

package Main;

import java.util.Hashtable;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.awt.Color;
import java.io.BufferedWriter;
import java_cup.runtime.*;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 11 17:43:15 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01a2\000\002\002\004\000\002\044\002\000\002\002" +
    "\012\000\002\045\002\000\002\002\006\000\002\046\002" +
    "\000\002\002\005\000\002\047\002\000\002\002\005\000" +
    "\002\050\002\000\002\002\005\000\002\002\003\000\002" +
    "\051\002\000\002\003\005\000\002\052\002\000\002\003" +
    "\005\000\002\053\002\000\002\003\005\000\002\054\002" +
    "\000\002\003\005\000\002\055\002\000\002\003\005\000" +
    "\002\056\002\000\002\003\005\000\002\003\003\000\002" +
    "\057\002\000\002\035\006\000\002\060\002\000\002\035" +
    "\010\000\002\036\003\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\061\002\000" +
    "\002\037\010\000\002\037\007\000\002\037\007\000\002" +
    "\037\007\000\002\037\007\000\002\037\007\000\002\037" +
    "\007\000\002\037\007\000\002\037\007\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\006\005\000\002\006\006\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\062\002\000\002\004\005\000" +
    "\002\063\002\000\002\004\006\000\002\064\002\000\002" +
    "\004\006\000\002\027\004\000\002\031\006\000\002\031" +
    "\005\000\002\031\005\000\002\031\003\000\002\032\004" +
    "\000\002\032\003\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\003\000\002\030\003\000\002\065" +
    "\002\000\002\034\005\000\002\066\002\000\002\034\005" +
    "\000\002\067\002\000\002\034\005\000\002\070\002\000" +
    "\002\034\005\000\002\071\002\000\002\034\005\000\002" +
    "\072\002\000\002\034\006\000\002\073\002\000\002\034" +
    "\006\000\002\074\002\000\002\034\006\000\002\034\003" +
    "\000\002\034\005\000\002\034\003\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\007\000\002" +
    "\033\010\000\002\033\010\000\002\033\007\000\002\033" +
    "\007\000\002\033\007\000\002\033\007\000\002\033\010" +
    "\000\002\033\010\000\002\033\010\000\002\033\010\000" +
    "\002\033\007\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\033\007\000\002\033\007\000\002\033" +
    "\007\000\002\033\007\000\002\033\007\000\002\033\007" +
    "\000\002\033\007\000\002\033\007\000\002\033\010\000" +
    "\002\033\010\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\042\017\000\002\043\004\000\002\043" +
    "\003\000\002\041\005\000\002\041\005\000\002\041\003" +
    "\000\002\075\002\000\002\024\006\000\002\076\002\000" +
    "\002\024\010\000\002\077\002\000\002\024\006\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\100\002\000\002\017\010\000" +
    "\002\017\005\000\002\017\005\000\002\101\002\000\002" +
    "\017\007\000\002\102\002\000\002\017\007\000\002\103" +
    "\002\000\002\017\007\000\002\104\002\000\002\017\007" +
    "\000\002\105\002\000\002\017\010\000\002\106\002\000" +
    "\002\017\010\000\002\017\004\000\002\107\002\000\002" +
    "\020\007\000\002\110\002\000\002\020\007\000\002\111" +
    "\002\000\002\020\007\000\002\112\002\000\002\020\010" +
    "\000\002\113\002\000\002\020\010\000\002\114\002\000" +
    "\002\020\010\000\002\115\002\000\002\020\007\000\002" +
    "\116\002\000\002\020\007\000\002\117\002\000\002\020" +
    "\007\000\002\120\002\000\002\020\007\000\002\121\002" +
    "\000\002\020\010\000\002\122\002\000\002\020\010\000" +
    "\002\123\002\000\002\020\010\000\002\124\002\000\002" +
    "\020\010\000\002\125\002\000\002\020\007\000\002\126" +
    "\002\000\002\020\007\000\002\127\002\000\002\020\007" +
    "\000\002\130\002\000\002\020\007\000\002\131\002\000" +
    "\002\020\007\000\002\132\002\000\002\020\007\000\002" +
    "\133\002\000\002\020\007\000\002\134\002\000\002\020" +
    "\007\000\002\135\002\000\002\020\007\000\002\136\002" +
    "\000\002\020\007\000\002\137\002\000\002\020\007\000" +
    "\002\140\002\000\002\020\014\000\002\141\002\000\002" +
    "\020\007\000\002\142\002\000\002\020\007\000\002\143" +
    "\002\000\002\020\007\000\002\144\002\000\002\020\005" +
    "\000\002\021\005\000\002\021\007\000\002\021\005\000" +
    "\002\021\007\000\002\021\003\000\002\022\005\000\002" +
    "\023\005\000\002\023\006\000\002\023\005\000\002\023" +
    "\005\000\002\023\006\000\002\023\005\000\002\023\005" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\006\000" +
    "\002\023\006\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\145\002\000\002\014\007\000\002\146" +
    "\002\000\002\014\007\000\002\147\002\000\002\014\007" +
    "\000\002\150\002\000\002\014\007\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\010\005\000\002\010\003\000\002\005\006\000\002\005" +
    "\010\000\002\005\010\000\002\005\010\000\002\005\006" +
    "\000\002\005\010\000\002\005\010\000\002\005\010\000" +
    "\002\005\006\000\002\005\010\000\002\005\010\000\002" +
    "\005\010\000\002\005\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\010\000\002\151\002\000\002\005\007" +
    "\000\002\152\002\000\002\005\007\000\002\153\002\000" +
    "\002\005\007\000\002\154\002\000\002\005\007\000\002" +
    "\155\002\000\002\005\007\000\002\156\002\000\002\005" +
    "\007\000\002\157\002\000\002\005\007\000\002\160\002" +
    "\000\002\005\007\000\002\161\002\000\002\005\007\000" +
    "\002\162\002\000\002\005\007\000\002\163\002\000\002" +
    "\005\007\000\002\164\002\000\002\005\007\000\002\165" +
    "\002\000\002\005\007\000\002\166\002\000\002\005\007" +
    "\000\002\167\002\000\002\005\007\000\002\170\002\000" +
    "\002\005\007\000\002\171\002\000\002\005\007\000\002" +
    "\172\002\000\002\005\007\000\002\013\003\000\002\013" +
    "\003\000\002\173\002\000\002\013\005\000\002\016\002" +
    "\000\002\174\002\000\002\011\006\000\002\175\002\000" +
    "\002\011\006\000\002\176\002\000\002\012\007\000\002" +
    "\177\002\000\002\012\007\000\002\200\002\000\002\012" +
    "\007\000\002\201\002\000\002\012\007\000\002\202\002" +
    "\000\002\012\007\000\002\203\002\000\002\012\007\000" +
    "\002\204\002\000\002\012\007\000\002\205\002\000\002" +
    "\012\007\000\002\206\002\000\002\012\007\000\002\207" +
    "\002\000\002\012\007\000\002\210\002\000\002\012\005" +
    "\000\002\211\002\000\002\012\005\000\002\212\002\000" +
    "\002\012\005\000\002\213\002\000\002\012\005\000\002" +
    "\214\002\000\002\012\005\000\002\215\002\000\002\012" +
    "\005\000\002\216\002\000\002\012\005\000\002\217\002" +
    "\000\002\012\005\000\002\220\002\000\002\012\005\000" +
    "\002\221\002\000\002\012\005\000\002\012\003\000\002" +
    "\222\002\000\002\015\007\000\002\223\002\000\002\015" +
    "\007\000\002\224\002\000\002\015\007\000\002\225\002" +
    "\000\002\015\007\000\002\226\002\000\002\015\007\000" +
    "\002\227\002\000\002\015\007\000\002\230\002\000\002" +
    "\015\007\000\002\231\002\000\002\015\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u031c\000\012\003\004\122\007\126\005\130\006\001" +
    "\002\000\014\002\ufff6\003\ufffc\122\ufffc\126\ufffc\130\ufffc" +
    "\001\002\000\012\003\ufffa\122\ufffa\126\ufffa\130\ufffa\001" +
    "\002\000\012\003\ufff8\122\ufff8\126\ufff8\130\ufff8\001\002" +
    "\000\006\003\012\005\000\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\126\003\ufffe\005\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\020\ufffe\024\ufffe\027\ufffe\032\ufffe\034\ufffe\040\ufffe" +
    "\047\ufffe\050\ufffe\055\ufffe\056\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\071\ufffe\121\ufffe" +
    "\122\ufffe\126\ufffe\130\ufffe\132\ufffe\147\ufffe\150\ufffe\152" +
    "\ufffe\153\ufffe\154\ufffe\155\ufffe\156\ufffe\157\ufffe\166\ufffe" +
    "\170\ufffe\001\002\000\004\005\014\001\002\000\004\011" +
    "\015\001\002\000\004\114\016\001\002\000\004\010\017" +
    "\001\002\000\004\120\020\001\002\000\126\003\055\005" +
    "\045\010\022\011\054\012\104\013\103\014\101\015\100" +
    "\016\064\020\072\024\030\027\026\032\062\034\073\040" +
    "\034\047\075\050\021\055\105\056\042\061\051\062\047" +
    "\063\052\064\076\065\106\066\050\067\053\071\023\121" +
    "\060\122\074\126\063\130\044\132\035\147\043\150\031" +
    "\152\067\153\041\154\024\155\077\156\061\157\046\166" +
    "\027\170\056\001\002\000\004\075\ufec5\001\002\000\004" +
    "\075\ufeb1\001\002\000\006\003\u0302\114\u0303\001\002\000" +
    "\004\114\u02fe\001\002\000\126\003\ufff3\005\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\020" +
    "\ufff3\024\ufff3\027\ufff3\032\ufff3\034\ufff3\040\ufff3\047\ufff3" +
    "\050\ufff3\055\ufff3\056\ufff3\061\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\067\ufff3\071\ufff3\121\ufff3\122\ufff3" +
    "\126\ufff3\130\ufff3\132\ufff3\147\ufff3\150\ufff3\152\ufff3\153" +
    "\ufff3\154\ufff3\155\ufff3\156\ufff3\157\ufff3\166\ufff3\170\ufff3" +
    "\001\002\000\004\075\ufebf\001\002\000\004\005\u02f6\001" +
    "\002\000\004\075\ufec1\001\002\000\004\114\u02ed\001\002" +
    "\000\130\002\uffca\003\uffca\005\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\024\uffca" +
    "\027\uffca\032\uffca\034\uffca\040\uffca\047\uffca\050\uffca\055" +
    "\uffca\056\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca" +
    "\066\uffca\067\uffca\071\uffca\121\uffca\122\uffca\126\uffca\130" +
    "\uffca\132\uffca\147\uffca\150\uffca\152\uffca\153\uffca\154\uffca" +
    "\155\uffca\156\uffca\157\uffca\166\uffca\170\uffca\001\002\000" +
    "\004\002\uffff\001\002\000\004\075\ufebb\001\002\000\004" +
    "\075\ufeb3\001\002\000\126\003\uffe4\005\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4" +
    "\024\uffe4\027\uffe4\032\uffe4\034\uffe4\040\uffe4\047\uffe4\050" +
    "\uffe4\055\uffe4\056\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\066\uffe4\067\uffe4\071\uffe4\121\uffe4\122\uffe4\126" +
    "\uffe4\130\uffe4\132\uffe4\147\uffe4\150\uffe4\152\uffe4\153\uffe4" +
    "\154\uffe4\155\uffe4\156\uffe4\157\uffe4\166\uffe4\170\uffe4\001" +
    "\002\000\126\003\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\024\uffeb\027" +
    "\uffeb\032\uffeb\034\uffeb\040\uffeb\047\uffeb\050\uffeb\055\uffeb" +
    "\056\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\071\uffeb\121\uffeb\122\uffeb\126\uffeb\130\uffeb" +
    "\132\uffeb\147\uffeb\150\uffeb\152\uffeb\153\uffeb\154\uffeb\155" +
    "\uffeb\156\uffeb\157\uffeb\166\uffeb\170\uffeb\001\002\000\130" +
    "\002\uffcc\003\uffef\005\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\020\uffef\024\uffef\027\uffef" +
    "\032\uffef\034\uffef\040\uffef\047\uffef\050\uffef\055\uffef\056" +
    "\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef" +
    "\067\uffef\071\uffef\121\uffef\122\uffef\126\uffef\130\uffef\132" +
    "\uffef\147\uffef\150\uffef\152\uffef\153\uffef\154\uffef\155\uffef" +
    "\156\uffef\157\uffef\166\uffef\170\uffef\001\002\000\004\114" +
    "\u02dc\001\002\000\004\075\ufeb5\001\002\000\004\003\uffc2" +
    "\001\002\000\004\002\uffcd\001\002\000\004\003\u02d4\001" +
    "\002\000\004\114\u02d0\001\002\000\004\122\u02c9\001\002" +
    "\000\012\003\u02c3\122\u02c5\123\u02c4\127\u02c6\001\002\000" +
    "\004\122\u02ba\001\002\000\004\122\u02b3\001\002\000\004" +
    "\114\u01e9\001\002\000\004\075\ufeaf\001\002\000\132\002" +
    "\uffcf\003\ufff1\004\uffc6\005\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\024\ufff1\027" +
    "\ufff1\032\ufff1\034\ufff1\040\ufff1\047\ufff1\050\ufff1\055\ufff1" +
    "\056\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\071\ufff1\121\ufff1\122\ufff1\126\ufff1\130\ufff1" +
    "\132\ufff1\147\ufff1\150\ufff1\152\ufff1\153\ufff1\154\ufff1\155" +
    "\ufff1\156\ufff1\157\ufff1\166\ufff1\170\ufff1\001\002\000\004" +
    "\122\u01da\001\002\000\130\002\uffc7\003\uffc7\005\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\020\uffc7\024\uffc7\027\uffc7\032\uffc7\034\uffc7\040\uffc7\047" +
    "\uffc7\050\uffc7\055\uffc7\056\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\066\uffc7\067\uffc7\071\uffc7\121\uffc7\122" +
    "\uffc7\126\uffc7\130\uffc7\132\uffc7\147\uffc7\150\uffc7\152\uffc7" +
    "\153\uffc7\154\uffc7\155\uffc7\156\uffc7\157\uffc7\166\uffc7\170" +
    "\uffc7\001\002\000\004\115\u01d7\001\002\000\004\114\u01d3" +
    "\001\002\000\004\075\ufebd\001\002\000\006\002\uffce\003" +
    "\uffc4\001\002\000\004\075\ufea3\001\002\000\130\002\uffcb" +
    "\003\uffed\005\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\020\uffed\024\uffed\027\uffed\032\uffed" +
    "\034\uffed\040\uffed\047\uffed\050\uffed\055\uffed\056\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed" +
    "\071\uffed\121\uffed\122\uffed\126\uffed\130\uffed\132\uffed\147" +
    "\uffed\150\uffed\152\uffed\153\uffed\154\uffed\155\uffed\156\uffed" +
    "\157\uffed\166\uffed\170\uffed\001\002\000\130\002\uffc9\003" +
    "\uffc9\005\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\020\uffc9\024\uffc9\027\uffc9\032\uffc9\034" +
    "\uffc9\040\uffc9\047\uffc9\050\uffc9\055\uffc9\056\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\071" +
    "\uffc9\121\uffc9\122\uffc9\126\uffc9\130\uffc9\132\uffc9\147\uffc9" +
    "\150\uffc9\152\uffc9\153\uffc9\154\uffc9\155\uffc9\156\uffc9\157" +
    "\uffc9\166\uffc9\170\uffc9\001\002\000\004\114\u01c1\001\002" +
    "\000\126\003\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5\024\ufff5\027\ufff5" +
    "\032\ufff5\034\ufff5\040\ufff5\047\ufff5\050\ufff5\055\ufff5\056" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\071\ufff5\121\ufff5\122\ufff5\126\ufff5\130\ufff5\132" +
    "\ufff5\147\ufff5\150\ufff5\152\ufff5\153\ufff5\154\ufff5\155\ufff5" +
    "\156\ufff5\157\ufff5\166\ufff5\170\ufff5\001\002\000\130\002" +
    "\uffc8\003\uffc8\005\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\020\uffc8\024\uffc8\027\uffc8\032" +
    "\uffc8\034\uffc8\040\uffc8\047\uffc8\050\uffc8\055\uffc8\056\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\071\uffc8\121\uffc8\122\uffc8\126\uffc8\130\uffc8\132\uffc8" +
    "\147\uffc8\150\uffc8\152\uffc8\153\uffc8\154\uffc8\155\uffc8\156" +
    "\uffc8\157\uffc8\166\uffc8\170\uffc8\001\002\000\004\075\ufec3" +
    "\001\002\000\004\075\ufea5\001\002\000\004\075\u0190\001" +
    "\002\000\006\005\220\075\ufeb9\001\002\000\004\122\207" +
    "\001\002\000\004\114\203\001\002\000\010\003\172\075" +
    "\ufea7\131\ufedd\001\002\000\010\003\160\075\ufea9\131\ufedf" +
    "\001\002\000\004\002\uffe9\001\002\000\010\003\146\075" +
    "\ufeab\131\ufee1\001\002\000\010\003\130\075\ufead\131\ufee3" +
    "\001\002\000\004\075\ufeb7\001\002\000\006\003\110\114" +
    "\107\001\002\000\012\003\114\122\116\123\115\127\117" +
    "\001\002\000\004\004\uff5b\001\002\000\004\004\112\001" +
    "\002\000\130\002\uff5a\003\uff5a\005\uff5a\010\uff5a\011\uff5a" +
    "\012\uff5a\013\uff5a\014\uff5a\015\uff5a\016\uff5a\020\uff5a\024" +
    "\uff5a\027\uff5a\032\uff5a\034\uff5a\040\uff5a\047\uff5a\050\uff5a" +
    "\055\uff5a\056\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065" +
    "\uff5a\066\uff5a\067\uff5a\071\uff5a\121\uff5a\122\uff5a\126\uff5a" +
    "\130\uff5a\132\uff5a\147\uff5a\150\uff5a\152\uff5a\153\uff5a\154" +
    "\uff5a\155\uff5a\156\uff5a\157\uff5a\166\uff5a\170\uff5a\001\002" +
    "\000\004\115\120\001\002\000\004\115\uff52\001\002\000" +
    "\004\115\uff54\001\002\000\004\115\uff55\001\002\000\004" +
    "\115\uff53\001\002\000\004\004\uff5d\001\002\000\004\004" +
    "\122\001\002\000\130\002\uff5c\003\uff5c\005\uff5c\010\uff5c" +
    "\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\020" +
    "\uff5c\024\uff5c\027\uff5c\032\uff5c\034\uff5c\040\uff5c\047\uff5c" +
    "\050\uff5c\055\uff5c\056\uff5c\061\uff5c\062\uff5c\063\uff5c\064" +
    "\uff5c\065\uff5c\066\uff5c\067\uff5c\071\uff5c\121\uff5c\122\uff5c" +
    "\126\uff5c\130\uff5c\132\uff5c\147\uff5c\150\uff5c\152\uff5c\153" +
    "\uff5c\154\uff5c\155\uff5c\156\uff5c\157\uff5c\166\uff5c\170\uff5c" +
    "\001\002\000\004\075\124\001\002\000\004\003\125\001" +
    "\002\000\004\004\126\001\002\000\130\002\ufeb6\003\ufeb6" +
    "\005\ufeb6\010\ufeb6\011\ufeb6\012\ufeb6\013\ufeb6\014\ufeb6\015" +
    "\ufeb6\016\ufeb6\020\ufeb6\024\ufeb6\027\ufeb6\032\ufeb6\034\ufeb6" +
    "\040\ufeb6\047\ufeb6\050\ufeb6\055\ufeb6\056\ufeb6\061\ufeb6\062" +
    "\ufeb6\063\ufeb6\064\ufeb6\065\ufeb6\066\ufeb6\067\ufeb6\071\ufeb6" +
    "\121\ufeb6\122\ufeb6\126\ufeb6\130\ufeb6\132\ufeb6\147\ufeb6\150" +
    "\ufeb6\152\ufeb6\153\ufeb6\154\ufeb6\155\ufeb6\156\ufeb6\157\ufeb6" +
    "\166\ufeb6\170\ufeb6\001\002\000\004\075\142\001\002\000" +
    "\004\004\141\001\002\000\004\131\132\001\002\000\006" +
    "\003\134\016\133\001\002\000\004\114\137\001\002\000" +
    "\004\004\ufed6\001\002\000\004\004\136\001\002\000\130" +
    "\002\ufee2\003\ufee2\005\ufee2\010\ufee2\011\ufee2\012\ufee2\013" +
    "\ufee2\014\ufee2\015\ufee2\016\ufee2\020\ufee2\024\ufee2\027\ufee2" +
    "\032\ufee2\034\ufee2\040\ufee2\047\ufee2\050\ufee2\055\ufee2\056" +
    "\ufee2\061\ufee2\062\ufee2\063\ufee2\064\ufee2\065\ufee2\066\ufee2" +
    "\067\ufee2\071\ufee2\121\ufee2\122\ufee2\126\ufee2\130\ufee2\132" +
    "\ufee2\147\ufee2\150\ufee2\152\ufee2\153\ufee2\154\ufee2\155\ufee2" +
    "\156\ufee2\157\ufee2\166\ufee2\170\ufee2\001\002\000\004\115" +
    "\140\001\002\000\004\004\ufed7\001\002\000\130\002\ufedb" +
    "\003\ufedb\005\ufedb\010\ufedb\011\ufedb\012\ufedb\013\ufedb\014" +
    "\ufedb\015\ufedb\016\ufedb\020\ufedb\024\ufedb\027\ufedb\032\ufedb" +
    "\034\ufedb\040\ufedb\047\ufedb\050\ufedb\055\ufedb\056\ufedb\061" +
    "\ufedb\062\ufedb\063\ufedb\064\ufedb\065\ufedb\066\ufedb\067\ufedb" +
    "\071\ufedb\121\ufedb\122\ufedb\126\ufedb\130\ufedb\132\ufedb\147" +
    "\ufedb\150\ufedb\152\ufedb\153\ufedb\154\ufedb\155\ufedb\156\ufedb" +
    "\157\ufedb\166\ufedb\170\ufedb\001\002\000\004\003\143\001" +
    "\002\000\004\004\144\001\002\000\130\002\ufeac\003\ufeac" +
    "\005\ufeac\010\ufeac\011\ufeac\012\ufeac\013\ufeac\014\ufeac\015" +
    "\ufeac\016\ufeac\020\ufeac\024\ufeac\027\ufeac\032\ufeac\034\ufeac" +
    "\040\ufeac\047\ufeac\050\ufeac\055\ufeac\056\ufeac\061\ufeac\062" +
    "\ufeac\063\ufeac\064\ufeac\065\ufeac\066\ufeac\067\ufeac\071\ufeac" +
    "\121\ufeac\122\ufeac\126\ufeac\130\ufeac\132\ufeac\147\ufeac\150" +
    "\ufeac\152\ufeac\153\ufeac\154\ufeac\155\ufeac\156\ufeac\157\ufeac" +
    "\166\ufeac\170\ufeac\001\002\000\004\075\154\001\002\000" +
    "\004\004\153\001\002\000\004\131\150\001\002\000\006" +
    "\003\134\016\133\001\002\000\004\004\152\001\002\000" +
    "\130\002\ufee0\003\ufee0\005\ufee0\010\ufee0\011\ufee0\012\ufee0" +
    "\013\ufee0\014\ufee0\015\ufee0\016\ufee0\020\ufee0\024\ufee0\027" +
    "\ufee0\032\ufee0\034\ufee0\040\ufee0\047\ufee0\050\ufee0\055\ufee0" +
    "\056\ufee0\061\ufee0\062\ufee0\063\ufee0\064\ufee0\065\ufee0\066" +
    "\ufee0\067\ufee0\071\ufee0\121\ufee0\122\ufee0\126\ufee0\130\ufee0" +
    "\132\ufee0\147\ufee0\150\ufee0\152\ufee0\153\ufee0\154\ufee0\155" +
    "\ufee0\156\ufee0\157\ufee0\166\ufee0\170\ufee0\001\002\000\130" +
    "\002\ufeda\003\ufeda\005\ufeda\010\ufeda\011\ufeda\012\ufeda\013" +
    "\ufeda\014\ufeda\015\ufeda\016\ufeda\020\ufeda\024\ufeda\027\ufeda" +
    "\032\ufeda\034\ufeda\040\ufeda\047\ufeda\050\ufeda\055\ufeda\056" +
    "\ufeda\061\ufeda\062\ufeda\063\ufeda\064\ufeda\065\ufeda\066\ufeda" +
    "\067\ufeda\071\ufeda\121\ufeda\122\ufeda\126\ufeda\130\ufeda\132" +
    "\ufeda\147\ufeda\150\ufeda\152\ufeda\153\ufeda\154\ufeda\155\ufeda" +
    "\156\ufeda\157\ufeda\166\ufeda\170\ufeda\001\002\000\004\003" +
    "\155\001\002\000\004\004\156\001\002\000\130\002\ufeaa" +
    "\003\ufeaa\005\ufeaa\010\ufeaa\011\ufeaa\012\ufeaa\013\ufeaa\014" +
    "\ufeaa\015\ufeaa\016\ufeaa\020\ufeaa\024\ufeaa\027\ufeaa\032\ufeaa" +
    "\034\ufeaa\040\ufeaa\047\ufeaa\050\ufeaa\055\ufeaa\056\ufeaa\061" +
    "\ufeaa\062\ufeaa\063\ufeaa\064\ufeaa\065\ufeaa\066\ufeaa\067\ufeaa" +
    "\071\ufeaa\121\ufeaa\122\ufeaa\126\ufeaa\130\ufeaa\132\ufeaa\147" +
    "\ufeaa\150\ufeaa\152\ufeaa\153\ufeaa\154\ufeaa\155\ufeaa\156\ufeaa" +
    "\157\ufeaa\166\ufeaa\170\ufeaa\001\002\000\004\075\166\001" +
    "\002\000\004\004\165\001\002\000\004\131\162\001\002" +
    "\000\006\003\134\016\133\001\002\000\004\004\164\001" +
    "\002\000\130\002\ufede\003\ufede\005\ufede\010\ufede\011\ufede" +
    "\012\ufede\013\ufede\014\ufede\015\ufede\016\ufede\020\ufede\024" +
    "\ufede\027\ufede\032\ufede\034\ufede\040\ufede\047\ufede\050\ufede" +
    "\055\ufede\056\ufede\061\ufede\062\ufede\063\ufede\064\ufede\065" +
    "\ufede\066\ufede\067\ufede\071\ufede\121\ufede\122\ufede\126\ufede" +
    "\130\ufede\132\ufede\147\ufede\150\ufede\152\ufede\153\ufede\154" +
    "\ufede\155\ufede\156\ufede\157\ufede\166\ufede\170\ufede\001\002" +
    "\000\130\002\ufed9\003\ufed9\005\ufed9\010\ufed9\011\ufed9\012" +
    "\ufed9\013\ufed9\014\ufed9\015\ufed9\016\ufed9\020\ufed9\024\ufed9" +
    "\027\ufed9\032\ufed9\034\ufed9\040\ufed9\047\ufed9\050\ufed9\055" +
    "\ufed9\056\ufed9\061\ufed9\062\ufed9\063\ufed9\064\ufed9\065\ufed9" +
    "\066\ufed9\067\ufed9\071\ufed9\121\ufed9\122\ufed9\126\ufed9\130" +
    "\ufed9\132\ufed9\147\ufed9\150\ufed9\152\ufed9\153\ufed9\154\ufed9" +
    "\155\ufed9\156\ufed9\157\ufed9\166\ufed9\170\ufed9\001\002\000" +
    "\004\003\167\001\002\000\004\004\170\001\002\000\130" +
    "\002\ufea8\003\ufea8\005\ufea8\010\ufea8\011\ufea8\012\ufea8\013" +
    "\ufea8\014\ufea8\015\ufea8\016\ufea8\020\ufea8\024\ufea8\027\ufea8" +
    "\032\ufea8\034\ufea8\040\ufea8\047\ufea8\050\ufea8\055\ufea8\056" +
    "\ufea8\061\ufea8\062\ufea8\063\ufea8\064\ufea8\065\ufea8\066\ufea8" +
    "\067\ufea8\071\ufea8\121\ufea8\122\ufea8\126\ufea8\130\ufea8\132" +
    "\ufea8\147\ufea8\150\ufea8\152\ufea8\153\ufea8\154\ufea8\155\ufea8" +
    "\156\ufea8\157\ufea8\166\ufea8\170\ufea8\001\002\000\004\131" +
    "\200\001\002\000\004\004\177\001\002\000\004\075\174" +
    "\001\002\000\004\003\175\001\002\000\004\004\176\001" +
    "\002\000\130\002\ufea6\003\ufea6\005\ufea6\010\ufea6\011\ufea6" +
    "\012\ufea6\013\ufea6\014\ufea6\015\ufea6\016\ufea6\020\ufea6\024" +
    "\ufea6\027\ufea6\032\ufea6\034\ufea6\040\ufea6\047\ufea6\050\ufea6" +
    "\055\ufea6\056\ufea6\061\ufea6\062\ufea6\063\ufea6\064\ufea6\065" +
    "\ufea6\066\ufea6\067\ufea6\071\ufea6\121\ufea6\122\ufea6\126\ufea6" +
    "\130\ufea6\132\ufea6\147\ufea6\150\ufea6\152\ufea6\153\ufea6\154" +
    "\ufea6\155\ufea6\156\ufea6\157\ufea6\166\ufea6\170\ufea6\001\002" +
    "\000\130\002\ufed8\003\ufed8\005\ufed8\010\ufed8\011\ufed8\012" +
    "\ufed8\013\ufed8\014\ufed8\015\ufed8\016\ufed8\020\ufed8\024\ufed8" +
    "\027\ufed8\032\ufed8\034\ufed8\040\ufed8\047\ufed8\050\ufed8\055" +
    "\ufed8\056\ufed8\061\ufed8\062\ufed8\063\ufed8\064\ufed8\065\ufed8" +
    "\066\ufed8\067\ufed8\071\ufed8\121\ufed8\122\ufed8\126\ufed8\130" +
    "\ufed8\132\ufed8\147\ufed8\150\ufed8\152\ufed8\153\ufed8\154\ufed8" +
    "\155\ufed8\156\ufed8\157\ufed8\166\ufed8\170\ufed8\001\002\000" +
    "\006\003\134\016\133\001\002\000\004\004\202\001\002" +
    "\000\130\002\ufedc\003\ufedc\005\ufedc\010\ufedc\011\ufedc\012" +
    "\ufedc\013\ufedc\014\ufedc\015\ufedc\016\ufedc\020\ufedc\024\ufedc" +
    "\027\ufedc\032\ufedc\034\ufedc\040\ufedc\047\ufedc\050\ufedc\055" +
    "\ufedc\056\ufedc\061\ufedc\062\ufedc\063\ufedc\064\ufedc\065\ufedc" +
    "\066\ufedc\067\ufedc\071\ufedc\121\ufedc\122\ufedc\126\ufedc\130" +
    "\ufedc\132\ufedc\147\ufedc\150\ufedc\152\ufedc\153\ufedc\154\ufedc" +
    "\155\ufedc\156\ufedc\157\ufedc\166\ufedc\170\ufedc\001\002\000" +
    "\004\115\204\001\002\000\004\004\uff49\001\002\000\004" +
    "\004\206\001\002\000\130\002\uff48\003\uff48\005\uff48\010" +
    "\uff48\011\uff48\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48" +
    "\020\uff48\024\uff48\027\uff48\032\uff48\034\uff48\040\uff48\047" +
    "\uff48\050\uff48\055\uff48\056\uff48\061\uff48\062\uff48\063\uff48" +
    "\064\uff48\065\uff48\066\uff48\067\uff48\071\uff48\121\uff48\122" +
    "\uff48\126\uff48\130\uff48\132\uff48\147\uff48\150\uff48\152\uff48" +
    "\153\uff48\154\uff48\155\uff48\156\uff48\157\uff48\166\uff48\170" +
    "\uff48\001\002\000\006\004\211\075\210\001\002\000\010" +
    "\003\213\142\214\143\212\001\002\000\126\003\uffe0\005" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\020\uffe0\024\uffe0\027\uffe0\032\uffe0\034\uffe0\040" +
    "\uffe0\047\uffe0\050\uffe0\055\uffe0\056\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\071\uffe0\121" +
    "\uffe0\122\uffe0\126\uffe0\130\uffe0\132\uffe0\147\uffe0\150\uffe0" +
    "\152\uffe0\153\uffe0\154\uffe0\155\uffe0\156\uffe0\157\uffe0\166" +
    "\uffe0\170\uffe0\001\002\000\004\004\217\001\002\000\004" +
    "\004\216\001\002\000\004\004\215\001\002\000\126\003" +
    "\uffd8\005\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\020\uffd8\024\uffd8\027\uffd8\032\uffd8\034" +
    "\uffd8\040\uffd8\047\uffd8\050\uffd8\055\uffd8\056\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\071" +
    "\uffd8\121\uffd8\122\uffd8\126\uffd8\130\uffd8\132\uffd8\147\uffd8" +
    "\150\uffd8\152\uffd8\153\uffd8\154\uffd8\155\uffd8\156\uffd8\157" +
    "\uffd8\166\uffd8\170\uffd8\001\002\000\126\003\uffd6\005\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\020\uffd6\024\uffd6\027\uffd6\032\uffd6\034\uffd6\040\uffd6" +
    "\047\uffd6\050\uffd6\055\uffd6\056\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\071\uffd6\121\uffd6" +
    "\122\uffd6\126\uffd6\130\uffd6\132\uffd6\147\uffd6\150\uffd6\152" +
    "\uffd6\153\uffd6\154\uffd6\155\uffd6\156\uffd6\157\uffd6\166\uffd6" +
    "\170\uffd6\001\002\000\126\003\uffd7\005\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7" +
    "\024\uffd7\027\uffd7\032\uffd7\034\uffd7\040\uffd7\047\uffd7\050" +
    "\uffd7\055\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\071\uffd7\121\uffd7\122\uffd7\126" +
    "\uffd7\130\uffd7\132\uffd7\147\uffd7\150\uffd7\152\uffd7\153\uffd7" +
    "\154\uffd7\155\uffd7\156\uffd7\157\uffd7\166\uffd7\170\uffd7\001" +
    "\002\000\070\003\245\017\257\021\251\022\237\023\244" +
    "\025\235\026\241\030\255\031\260\033\250\035\252\036" +
    "\231\037\227\041\236\042\234\043\253\044\243\051\226" +
    "\052\246\053\254\054\242\133\256\136\233\137\232\140" +
    "\230\141\240\144\225\001\002\000\004\075\222\001\002" +
    "\000\004\003\223\001\002\000\004\004\224\001\002\000" +
    "\130\002\ufeb8\003\ufeb8\005\ufeb8\010\ufeb8\011\ufeb8\012\ufeb8" +
    "\013\ufeb8\014\ufeb8\015\ufeb8\016\ufeb8\020\ufeb8\024\ufeb8\027" +
    "\ufeb8\032\ufeb8\034\ufeb8\040\ufeb8\047\ufeb8\050\ufeb8\055\ufeb8" +
    "\056\ufeb8\061\ufeb8\062\ufeb8\063\ufeb8\064\ufeb8\065\ufeb8\066" +
    "\ufeb8\067\ufeb8\071\ufeb8\121\ufeb8\122\ufeb8\126\ufeb8\130\ufeb8" +
    "\132\ufeb8\147\ufeb8\150\ufeb8\152\ufeb8\153\ufeb8\154\ufeb8\155" +
    "\ufeb8\156\ufeb8\157\ufeb8\166\ufeb8\170\ufeb8\001\002\000\004" +
    "\114\u018c\001\002\000\004\114\u0188\001\002\000\004\114" +
    "\u0184\001\002\000\004\114\u0180\001\002\000\004\114\u017c" +
    "\001\002\000\004\114\u0178\001\002\000\004\114\u0174\001" +
    "\002\000\004\114\u0170\001\002\000\004\114\u016c\001\002" +
    "\000\004\114\u0168\001\002\000\004\114\u0164\001\002\000" +
    "\004\114\u0160\001\002\000\004\114\u015c\001\002\000\004" +
    "\114\u0158\001\002\000\004\114\u0154\001\002\000\004\114" +
    "\u0150\001\002\000\004\004\uff06\001\002\000\004\114\u014a" +
    "\001\002\000\130\002\uff4e\003\uff4e\005\uff4e\010\uff4e\011" +
    "\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e\020\uff4e" +
    "\024\uff4e\027\uff4e\032\uff4e\034\uff4e\040\uff4e\047\uff4e\050" +
    "\uff4e\055\uff4e\056\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e" +
    "\065\uff4e\066\uff4e\067\uff4e\071\uff4e\121\uff4e\122\uff4e\126" +
    "\uff4e\130\uff4e\132\uff4e\147\uff4e\150\uff4e\152\uff4e\153\uff4e" +
    "\154\uff4e\155\uff4e\156\uff4e\157\uff4e\166\uff4e\170\uff4e\001" +
    "\002\000\004\114\u0146\001\002\000\004\114\u013d\001\002" +
    "\000\004\114\u0139\001\002\000\004\114\u0135\001\002\000" +
    "\004\114\u012c\001\002\000\004\114\u0123\001\002\000\004" +
    "\114\276\001\002\000\004\114\272\001\002\000\004\114" +
    "\261\001\002\000\006\122\262\127\263\001\002\000\004" +
    "\115\267\001\002\000\004\115\264\001\002\000\004\004" +
    "\uff2a\001\002\000\004\004\266\001\002\000\130\002\uff29" +
    "\003\uff29\005\uff29\010\uff29\011\uff29\012\uff29\013\uff29\014" +
    "\uff29\015\uff29\016\uff29\020\uff29\024\uff29\027\uff29\032\uff29" +
    "\034\uff29\040\uff29\047\uff29\050\uff29\055\uff29\056\uff29\061" +
    "\uff29\062\uff29\063\uff29\064\uff29\065\uff29\066\uff29\067\uff29" +
    "\071\uff29\121\uff29\122\uff29\126\uff29\130\uff29\132\uff29\147" +
    "\uff29\150\uff29\152\uff29\153\uff29\154\uff29\155\uff29\156\uff29" +
    "\157\uff29\166\uff29\170\uff29\001\002\000\004\004\uff26\001" +
    "\002\000\004\004\271\001\002\000\130\002\uff25\003\uff25" +
    "\005\uff25\010\uff25\011\uff25\012\uff25\013\uff25\014\uff25\015" +
    "\uff25\016\uff25\020\uff25\024\uff25\027\uff25\032\uff25\034\uff25" +
    "\040\uff25\047\uff25\050\uff25\055\uff25\056\uff25\061\uff25\062" +
    "\uff25\063\uff25\064\uff25\065\uff25\066\uff25\067\uff25\071\uff25" +
    "\121\uff25\122\uff25\126\uff25\130\uff25\132\uff25\147\uff25\150" +
    "\uff25\152\uff25\153\uff25\154\uff25\155\uff25\156\uff25\157\uff25" +
    "\166\uff25\170\uff25\001\002\000\004\115\273\001\002\000" +
    "\004\004\uff3c\001\002\000\004\004\275\001\002\000\130" +
    "\002\uff3b\003\uff3b\005\uff3b\010\uff3b\011\uff3b\012\uff3b\013" +
    "\uff3b\014\uff3b\015\uff3b\016\uff3b\020\uff3b\024\uff3b\027\uff3b" +
    "\032\uff3b\034\uff3b\040\uff3b\047\uff3b\050\uff3b\055\uff3b\056" +
    "\uff3b\061\uff3b\062\uff3b\063\uff3b\064\uff3b\065\uff3b\066\uff3b" +
    "\067\uff3b\071\uff3b\121\uff3b\122\uff3b\126\uff3b\130\uff3b\132" +
    "\uff3b\147\uff3b\150\uff3b\152\uff3b\153\uff3b\154\uff3b\155\uff3b" +
    "\156\uff3b\157\uff3b\166\uff3b\170\uff3b\001\002\000\010\003" +
    "\277\123\301\127\302\001\002\000\004\115\uff00\001\002" +
    "\000\004\115\u0120\001\002\000\004\006\u011e\001\002\000" +
    "\004\006\303\001\002\000\006\123\304\135\306\001\002" +
    "\000\004\006\u011c\001\002\000\006\006\u011a\115\uff02\001" +
    "\002\000\004\005\307\001\002\000\060\017\336\021\331" +
    "\022\322\023\326\025\317\026\324\030\334\031\337\033" +
    "\330\035\332\036\313\037\311\041\321\042\316\043\333" +
    "\044\325\051\310\052\327\053\335\136\315\137\314\140" +
    "\312\141\323\001\002\000\004\114\u0118\001\002\000\004" +
    "\114\u0116\001\002\000\004\114\u0114\001\002\000\004\114" +
    "\u0112\001\002\000\004\114\u0110\001\002\000\004\114\u010e" +
    "\001\002\000\004\114\u010c\001\002\000\004\114\u010a\001" +
    "\002\000\006\006\ufeff\115\ufeff\001\002\000\004\114\u0108" +
    "\001\002\000\004\114\u0106\001\002\000\004\114\u0104\001" +
    "\002\000\004\114\u0102\001\002\000\004\114\u0100\001\002" +
    "\000\004\114\376\001\002\000\004\114\374\001\002\000" +
    "\004\114\372\001\002\000\004\114\365\001\002\000\004" +
    "\114\363\001\002\000\004\114\361\001\002\000\004\114" +
    "\354\001\002\000\004\114\347\001\002\000\004\114\345" +
    "\001\002\000\004\114\340\001\002\000\006\122\341\127" +
    "\342\001\002\000\004\115\344\001\002\000\004\115\343" +
    "\001\002\000\006\006\ufef6\115\ufef6\001\002\000\006\006" +
    "\ufef4\115\ufef4\001\002\000\004\115\346\001\002\000\006" +
    "\006\ufefe\115\ufefe\001\002\000\006\122\350\127\351\001" +
    "\002\000\004\115\353\001\002\000\004\115\352\001\002" +
    "\000\006\006\ufee8\115\ufee8\001\002\000\006\006\ufee7\115" +
    "\ufee7\001\002\000\006\122\356\123\355\001\002\000\004" +
    "\115\360\001\002\000\004\115\357\001\002\000\006\006" +
    "\ufef5\115\ufef5\001\002\000\006\006\ufef7\115\ufef7\001\002" +
    "\000\004\115\362\001\002\000\006\006\ufeed\115\ufeed\001" +
    "\002\000\004\115\364\001\002\000\006\006\ufef2\115\ufef2" +
    "\001\002\000\006\122\367\123\366\001\002\000\004\115" +
    "\371\001\002\000\004\115\370\001\002\000\006\006\ufefa" +
    "\115\ufefa\001\002\000\006\006\ufefd\115\ufefd\001\002\000" +
    "\004\115\373\001\002\000\006\006\ufef3\115\ufef3\001\002" +
    "\000\004\115\375\001\002\000\006\006\ufee9\115\ufee9\001" +
    "\002\000\004\115\377\001\002\000\006\006\ufefb\115\ufefb" +
    "\001\002\000\004\115\u0101\001\002\000\006\006\ufeec\115" +
    "\ufeec\001\002\000\004\115\u0103\001\002\000\006\006\ufef9" +
    "\115\ufef9\001\002\000\004\115\u0105\001\002\000\006\006" +
    "\ufee4\115\ufee4\001\002\000\004\115\u0107\001\002\000\006" +
    "\006\ufefc\115\ufefc\001\002\000\004\115\u0109\001\002\000" +
    "\006\006\ufeef\115\ufeef\001\002\000\004\115\u010b\001\002" +
    "\000\006\006\ufef8\115\ufef8\001\002\000\004\115\u010d\001" +
    "\002\000\006\006\ufeee\115\ufeee\001\002\000\004\115\u010f" +
    "\001\002\000\006\006\ufeeb\115\ufeeb\001\002\000\004\115" +
    "\u0111\001\002\000\006\006\ufee6\115\ufee6\001\002\000\004" +
    "\115\u0113\001\002\000\006\006\ufef1\115\ufef1\001\002\000" +
    "\004\115\u0115\001\002\000\006\006\ufee5\115\ufee5\001\002" +
    "\000\004\115\u0117\001\002\000\006\006\ufef0\115\ufef0\001" +
    "\002\000\004\115\u0119\001\002\000\006\006\ufeea\115\ufeea" +
    "\001\002\000\004\127\u011b\001\002\000\004\115\uff01\001" +
    "\002\000\004\123\u011d\001\002\000\004\115\uff03\001\002" +
    "\000\004\123\u011f\001\002\000\004\115\uff04\001\002\000" +
    "\004\004\uff36\001\002\000\004\004\u0122\001\002\000\130" +
    "\002\uff35\003\uff35\005\uff35\010\uff35\011\uff35\012\uff35\013" +
    "\uff35\014\uff35\015\uff35\016\uff35\020\uff35\024\uff35\027\uff35" +
    "\032\uff35\034\uff35\040\uff35\047\uff35\050\uff35\055\uff35\056" +
    "\uff35\061\uff35\062\uff35\063\uff35\064\uff35\065\uff35\066\uff35" +
    "\067\uff35\071\uff35\121\uff35\122\uff35\126\uff35\130\uff35\132" +
    "\uff35\147\uff35\150\uff35\152\uff35\153\uff35\154\uff35\155\uff35" +
    "\156\uff35\157\uff35\166\uff35\170\uff35\001\002\000\006\122" +
    "\u0125\123\u0124\001\002\000\004\115\u0129\001\002\000\004" +
    "\115\u0126\001\002\000\004\004\uff28\001\002\000\004\004" +
    "\u0128\001\002\000\130\002\uff27\003\uff27\005\uff27\010\uff27" +
    "\011\uff27\012\uff27\013\uff27\014\uff27\015\uff27\016\uff27\020" +
    "\uff27\024\uff27\027\uff27\032\uff27\034\uff27\040\uff27\047\uff27" +
    "\050\uff27\055\uff27\056\uff27\061\uff27\062\uff27\063\uff27\064" +
    "\uff27\065\uff27\066\uff27\067\uff27\071\uff27\121\uff27\122\uff27" +
    "\126\uff27\130\uff27\132\uff27\147\uff27\150\uff27\152\uff27\153" +
    "\uff27\154\uff27\155\uff27\156\uff27\157\uff27\166\uff27\170\uff27" +
    "\001\002\000\004\004\uff2c\001\002\000\004\004\u012b\001" +
    "\002\000\130\002\uff2b\003\uff2b\005\uff2b\010\uff2b\011\uff2b" +
    "\012\uff2b\013\uff2b\014\uff2b\015\uff2b\016\uff2b\020\uff2b\024" +
    "\uff2b\027\uff2b\032\uff2b\034\uff2b\040\uff2b\047\uff2b\050\uff2b" +
    "\055\uff2b\056\uff2b\061\uff2b\062\uff2b\063\uff2b\064\uff2b\065" +
    "\uff2b\066\uff2b\067\uff2b\071\uff2b\121\uff2b\122\uff2b\126\uff2b" +
    "\130\uff2b\132\uff2b\147\uff2b\150\uff2b\152\uff2b\153\uff2b\154" +
    "\uff2b\155\uff2b\156\uff2b\157\uff2b\166\uff2b\170\uff2b\001\002" +
    "\000\004\127\u012d\001\002\000\004\006\u012e\001\002\000" +
    "\004\123\u012f\001\002\000\004\006\u0130\001\002\000\004" +
    "\123\u0131\001\002\000\004\115\u0132\001\002\000\004\004" +
    "\uff0e\001\002\000\004\004\u0134\001\002\000\130\002\uff0d" +
    "\003\uff0d\005\uff0d\010\uff0d\011\uff0d\012\uff0d\013\uff0d\014" +
    "\uff0d\015\uff0d\016\uff0d\020\uff0d\024\uff0d\027\uff0d\032\uff0d" +
    "\034\uff0d\040\uff0d\047\uff0d\050\uff0d\055\uff0d\056\uff0d\061" +
    "\uff0d\062\uff0d\063\uff0d\064\uff0d\065\uff0d\066\uff0d\067\uff0d" +
    "\071\uff0d\121\uff0d\122\uff0d\126\uff0d\130\uff0d\132\uff0d\147" +
    "\uff0d\150\uff0d\152\uff0d\153\uff0d\154\uff0d\155\uff0d\156\uff0d" +
    "\157\uff0d\166\uff0d\170\uff0d\001\002\000\004\115\u0136\001" +
    "\002\000\004\004\uff18\001\002\000\004\004\u0138\001\002" +
    "\000\130\002\uff17\003\uff17\005\uff17\010\uff17\011\uff17\012" +
    "\uff17\013\uff17\014\uff17\015\uff17\016\uff17\020\uff17\024\uff17" +
    "\027\uff17\032\uff17\034\uff17\040\uff17\047\uff17\050\uff17\055" +
    "\uff17\056\uff17\061\uff17\062\uff17\063\uff17\064\uff17\065\uff17" +
    "\066\uff17\067\uff17\071\uff17\121\uff17\122\uff17\126\uff17\130" +
    "\uff17\132\uff17\147\uff17\150\uff17\152\uff17\153\uff17\154\uff17" +
    "\155\uff17\156\uff17\157\uff17\166\uff17\170\uff17\001\002\000" +
    "\004\115\u013a\001\002\000\004\004\uff22\001\002\000\004" +
    "\004\u013c\001\002\000\130\002\uff21\003\uff21\005\uff21\010" +
    "\uff21\011\uff21\012\uff21\013\uff21\014\uff21\015\uff21\016\uff21" +
    "\020\uff21\024\uff21\027\uff21\032\uff21\034\uff21\040\uff21\047" +
    "\uff21\050\uff21\055\uff21\056\uff21\061\uff21\062\uff21\063\uff21" +
    "\064\uff21\065\uff21\066\uff21\067\uff21\071\uff21\121\uff21\122" +
    "\uff21\126\uff21\130\uff21\132\uff21\147\uff21\150\uff21\152\uff21" +
    "\153\uff21\154\uff21\155\uff21\156\uff21\157\uff21\166\uff21\170" +
    "\uff21\001\002\000\006\122\u013f\123\u013e\001\002\000\004" +
    "\115\u0143\001\002\000\004\115\u0140\001\002\000\004\004" +
    "\uff38\001\002\000\004\004\u0142\001\002\000\130\002\uff37" +
    "\003\uff37\005\uff37\010\uff37\011\uff37\012\uff37\013\uff37\014" +
    "\uff37\015\uff37\016\uff37\020\uff37\024\uff37\027\uff37\032\uff37" +
    "\034\uff37\040\uff37\047\uff37\050\uff37\055\uff37\056\uff37\061" +
    "\uff37\062\uff37\063\uff37\064\uff37\065\uff37\066\uff37\067\uff37" +
    "\071\uff37\121\uff37\122\uff37\126\uff37\130\uff37\132\uff37\147" +
    "\uff37\150\uff37\152\uff37\153\uff37\154\uff37\155\uff37\156\uff37" +
    "\157\uff37\166\uff37\170\uff37\001\002\000\004\004\uff3a\001" +
    "\002\000\004\004\u0145\001\002\000\130\002\uff39\003\uff39" +
    "\005\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014\uff39\015" +
    "\uff39\016\uff39\020\uff39\024\uff39\027\uff39\032\uff39\034\uff39" +
    "\040\uff39\047\uff39\050\uff39\055\uff39\056\uff39\061\uff39\062" +
    "\uff39\063\uff39\064\uff39\065\uff39\066\uff39\067\uff39\071\uff39" +
    "\121\uff39\122\uff39\126\uff39\130\uff39\132\uff39\147\uff39\150" +
    "\uff39\152\uff39\153\uff39\154\uff39\155\uff39\156\uff39\157\uff39" +
    "\166\uff39\170\uff39\001\002\000\004\115\u0147\001\002\000" +
    "\004\004\uff24\001\002\000\004\004\u0149\001\002\000\130" +
    "\002\uff23\003\uff23\005\uff23\010\uff23\011\uff23\012\uff23\013" +
    "\uff23\014\uff23\015\uff23\016\uff23\020\uff23\024\uff23\027\uff23" +
    "\032\uff23\034\uff23\040\uff23\047\uff23\050\uff23\055\uff23\056" +
    "\uff23\061\uff23\062\uff23\063\uff23\064\uff23\065\uff23\066\uff23" +
    "\067\uff23\071\uff23\121\uff23\122\uff23\126\uff23\130\uff23\132" +
    "\uff23\147\uff23\150\uff23\152\uff23\153\uff23\154\uff23\155\uff23" +
    "\156\uff23\157\uff23\166\uff23\170\uff23\001\002\000\004\115" +
    "\u014b\001\002\000\004\004\uff10\001\002\000\004\004\u014d" +
    "\001\002\000\130\002\uff0f\003\uff0f\005\uff0f\010\uff0f\011" +
    "\uff0f\012\uff0f\013\uff0f\014\uff0f\015\uff0f\016\uff0f\020\uff0f" +
    "\024\uff0f\027\uff0f\032\uff0f\034\uff0f\040\uff0f\047\uff0f\050" +
    "\uff0f\055\uff0f\056\uff0f\061\uff0f\062\uff0f\063\uff0f\064\uff0f" +
    "\065\uff0f\066\uff0f\067\uff0f\071\uff0f\121\uff0f\122\uff0f\126" +
    "\uff0f\130\uff0f\132\uff0f\147\uff0f\150\uff0f\152\uff0f\153\uff0f" +
    "\154\uff0f\155\uff0f\156\uff0f\157\uff0f\166\uff0f\170\uff0f\001" +
    "\002\000\004\004\u014f\001\002\000\130\002\uff05\003\uff05" +
    "\005\uff05\010\uff05\011\uff05\012\uff05\013\uff05\014\uff05\015" +
    "\uff05\016\uff05\020\uff05\024\uff05\027\uff05\032\uff05\034\uff05" +
    "\040\uff05\047\uff05\050\uff05\055\uff05\056\uff05\061\uff05\062" +
    "\uff05\063\uff05\064\uff05\065\uff05\066\uff05\067\uff05\071\uff05" +
    "\121\uff05\122\uff05\126\uff05\130\uff05\132\uff05\147\uff05\150" +
    "\uff05\152\uff05\153\uff05\154\uff05\155\uff05\156\uff05\157\uff05" +
    "\166\uff05\170\uff05\001\002\000\004\115\u0151\001\002\000" +
    "\004\004\uff2e\001\002\000\004\004\u0153\001\002\000\130" +
    "\002\uff2d\003\uff2d\005\uff2d\010\uff2d\011\uff2d\012\uff2d\013" +
    "\uff2d\014\uff2d\015\uff2d\016\uff2d\020\uff2d\024\uff2d\027\uff2d" +
    "\032\uff2d\034\uff2d\040\uff2d\047\uff2d\050\uff2d\055\uff2d\056" +
    "\uff2d\061\uff2d\062\uff2d\063\uff2d\064\uff2d\065\uff2d\066\uff2d" +
    "\067\uff2d\071\uff2d\121\uff2d\122\uff2d\126\uff2d\130\uff2d\132" +
    "\uff2d\147\uff2d\150\uff2d\152\uff2d\153\uff2d\154\uff2d\155\uff2d" +
    "\156\uff2d\157\uff2d\166\uff2d\170\uff2d\001\002\000\004\115" +
    "\u0155\001\002\000\004\004\uff16\001\002\000\004\004\u0157" +
    "\001\002\000\130\002\uff15\003\uff15\005\uff15\010\uff15\011" +
    "\uff15\012\uff15\013\uff15\014\uff15\015\uff15\016\uff15\020\uff15" +
    "\024\uff15\027\uff15\032\uff15\034\uff15\040\uff15\047\uff15\050" +
    "\uff15\055\uff15\056\uff15\061\uff15\062\uff15\063\uff15\064\uff15" +
    "\065\uff15\066\uff15\067\uff15\071\uff15\121\uff15\122\uff15\126" +
    "\uff15\130\uff15\132\uff15\147\uff15\150\uff15\152\uff15\153\uff15" +
    "\154\uff15\155\uff15\156\uff15\157\uff15\166\uff15\170\uff15\001" +
    "\002\000\004\115\u0159\001\002\000\004\004\uff3e\001\002" +
    "\000\004\004\u015b\001\002\000\130\002\uff3d\003\uff3d\005" +
    "\uff3d\010\uff3d\011\uff3d\012\uff3d\013\uff3d\014\uff3d\015\uff3d" +
    "\016\uff3d\020\uff3d\024\uff3d\027\uff3d\032\uff3d\034\uff3d\040" +
    "\uff3d\047\uff3d\050\uff3d\055\uff3d\056\uff3d\061\uff3d\062\uff3d" +
    "\063\uff3d\064\uff3d\065\uff3d\066\uff3d\067\uff3d\071\uff3d\121" +
    "\uff3d\122\uff3d\126\uff3d\130\uff3d\132\uff3d\147\uff3d\150\uff3d" +
    "\152\uff3d\153\uff3d\154\uff3d\155\uff3d\156\uff3d\157\uff3d\166" +
    "\uff3d\170\uff3d\001\002\000\004\115\u015d\001\002\000\004" +
    "\004\uff34\001\002\000\004\004\u015f\001\002\000\130\002" +
    "\uff33\003\uff33\005\uff33\010\uff33\011\uff33\012\uff33\013\uff33" +
    "\014\uff33\015\uff33\016\uff33\020\uff33\024\uff33\027\uff33\032" +
    "\uff33\034\uff33\040\uff33\047\uff33\050\uff33\055\uff33\056\uff33" +
    "\061\uff33\062\uff33\063\uff33\064\uff33\065\uff33\066\uff33\067" +
    "\uff33\071\uff33\121\uff33\122\uff33\126\uff33\130\uff33\132\uff33" +
    "\147\uff33\150\uff33\152\uff33\153\uff33\154\uff33\155\uff33\156" +
    "\uff33\157\uff33\166\uff33\170\uff33\001\002\000\004\115\u0161" +
    "\001\002\000\004\004\uff08\001\002\000\004\004\u0163\001" +
    "\002\000\130\002\uff07\003\uff07\005\uff07\010\uff07\011\uff07" +
    "\012\uff07\013\uff07\014\uff07\015\uff07\016\uff07\020\uff07\024" +
    "\uff07\027\uff07\032\uff07\034\uff07\040\uff07\047\uff07\050\uff07" +
    "\055\uff07\056\uff07\061\uff07\062\uff07\063\uff07\064\uff07\065" +
    "\uff07\066\uff07\067\uff07\071\uff07\121\uff07\122\uff07\126\uff07" +
    "\130\uff07\132\uff07\147\uff07\150\uff07\152\uff07\153\uff07\154" +
    "\uff07\155\uff07\156\uff07\157\uff07\166\uff07\170\uff07\001\002" +
    "\000\004\115\u0165\001\002\000\004\004\uff30\001\002\000" +
    "\004\004\u0167\001\002\000\130\002\uff2f\003\uff2f\005\uff2f" +
    "\010\uff2f\011\uff2f\012\uff2f\013\uff2f\014\uff2f\015\uff2f\016" +
    "\uff2f\020\uff2f\024\uff2f\027\uff2f\032\uff2f\034\uff2f\040\uff2f" +
    "\047\uff2f\050\uff2f\055\uff2f\056\uff2f\061\uff2f\062\uff2f\063" +
    "\uff2f\064\uff2f\065\uff2f\066\uff2f\067\uff2f\071\uff2f\121\uff2f" +
    "\122\uff2f\126\uff2f\130\uff2f\132\uff2f\147\uff2f\150\uff2f\152" +
    "\uff2f\153\uff2f\154\uff2f\155\uff2f\156\uff2f\157\uff2f\166\uff2f" +
    "\170\uff2f\001\002\000\004\115\u0169\001\002\000\004\004" +
    "\uff1c\001\002\000\004\004\u016b\001\002\000\130\002\uff1b" +
    "\003\uff1b\005\uff1b\010\uff1b\011\uff1b\012\uff1b\013\uff1b\014" +
    "\uff1b\015\uff1b\016\uff1b\020\uff1b\024\uff1b\027\uff1b\032\uff1b" +
    "\034\uff1b\040\uff1b\047\uff1b\050\uff1b\055\uff1b\056\uff1b\061" +
    "\uff1b\062\uff1b\063\uff1b\064\uff1b\065\uff1b\066\uff1b\067\uff1b" +
    "\071\uff1b\121\uff1b\122\uff1b\126\uff1b\130\uff1b\132\uff1b\147" +
    "\uff1b\150\uff1b\152\uff1b\153\uff1b\154\uff1b\155\uff1b\156\uff1b" +
    "\157\uff1b\166\uff1b\170\uff1b\001\002\000\004\115\u016d\001" +
    "\002\000\004\004\uff32\001\002\000\004\004\u016f\001\002" +
    "\000\130\002\uff31\003\uff31\005\uff31\010\uff31\011\uff31\012" +
    "\uff31\013\uff31\014\uff31\015\uff31\016\uff31\020\uff31\024\uff31" +
    "\027\uff31\032\uff31\034\uff31\040\uff31\047\uff31\050\uff31\055" +
    "\uff31\056\uff31\061\uff31\062\uff31\063\uff31\064\uff31\065\uff31" +
    "\066\uff31\067\uff31\071\uff31\121\uff31\122\uff31\126\uff31\130" +
    "\uff31\132\uff31\147\uff31\150\uff31\152\uff31\153\uff31\154\uff31" +
    "\155\uff31\156\uff31\157\uff31\166\uff31\170\uff31\001\002\000" +
    "\004\115\u0171\001\002\000\004\004\uff1a\001\002\000\004" +
    "\004\u0173\001\002\000\130\002\uff19\003\uff19\005\uff19\010" +
    "\uff19\011\uff19\012\uff19\013\uff19\014\uff19\015\uff19\016\uff19" +
    "\020\uff19\024\uff19\027\uff19\032\uff19\034\uff19\040\uff19\047" +
    "\uff19\050\uff19\055\uff19\056\uff19\061\uff19\062\uff19\063\uff19" +
    "\064\uff19\065\uff19\066\uff19\067\uff19\071\uff19\121\uff19\122" +
    "\uff19\126\uff19\130\uff19\132\uff19\147\uff19\150\uff19\152\uff19" +
    "\153\uff19\154\uff19\155\uff19\156\uff19\157\uff19\166\uff19\170" +
    "\uff19\001\002\000\004\115\u0175\001\002\000\004\004\uff14" +
    "\001\002\000\004\004\u0177\001\002\000\130\002\uff13\003" +
    "\uff13\005\uff13\010\uff13\011\uff13\012\uff13\013\uff13\014\uff13" +
    "\015\uff13\016\uff13\020\uff13\024\uff13\027\uff13\032\uff13\034" +
    "\uff13\040\uff13\047\uff13\050\uff13\055\uff13\056\uff13\061\uff13" +
    "\062\uff13\063\uff13\064\uff13\065\uff13\066\uff13\067\uff13\071" +
    "\uff13\121\uff13\122\uff13\126\uff13\130\uff13\132\uff13\147\uff13" +
    "\150\uff13\152\uff13\153\uff13\154\uff13\155\uff13\156\uff13\157" +
    "\uff13\166\uff13\170\uff13\001\002\000\004\115\u0179\001\002" +
    "\000\004\004\uff0c\001\002\000\004\004\u017b\001\002\000" +
    "\130\002\uff0b\003\uff0b\005\uff0b\010\uff0b\011\uff0b\012\uff0b" +
    "\013\uff0b\014\uff0b\015\uff0b\016\uff0b\020\uff0b\024\uff0b\027" +
    "\uff0b\032\uff0b\034\uff0b\040\uff0b\047\uff0b\050\uff0b\055\uff0b" +
    "\056\uff0b\061\uff0b\062\uff0b\063\uff0b\064\uff0b\065\uff0b\066" +
    "\uff0b\067\uff0b\071\uff0b\121\uff0b\122\uff0b\126\uff0b\130\uff0b" +
    "\132\uff0b\147\uff0b\150\uff0b\152\uff0b\153\uff0b\154\uff0b\155" +
    "\uff0b\156\uff0b\157\uff0b\166\uff0b\170\uff0b\001\002\000\004" +
    "\115\u017d\001\002\000\004\004\uff20\001\002\000\004\004" +
    "\u017f\001\002\000\130\002\uff1f\003\uff1f\005\uff1f\010\uff1f" +
    "\011\uff1f\012\uff1f\013\uff1f\014\uff1f\015\uff1f\016\uff1f\020" +
    "\uff1f\024\uff1f\027\uff1f\032\uff1f\034\uff1f\040\uff1f\047\uff1f" +
    "\050\uff1f\055\uff1f\056\uff1f\061\uff1f\062\uff1f\063\uff1f\064" +
    "\uff1f\065\uff1f\066\uff1f\067\uff1f\071\uff1f\121\uff1f\122\uff1f" +
    "\126\uff1f\130\uff1f\132\uff1f\147\uff1f\150\uff1f\152\uff1f\153" +
    "\uff1f\154\uff1f\155\uff1f\156\uff1f\157\uff1f\166\uff1f\170\uff1f" +
    "\001\002\000\004\115\u0181\001\002\000\004\004\uff0a\001" +
    "\002\000\004\004\u0183\001\002\000\130\002\uff09\003\uff09" +
    "\005\uff09\010\uff09\011\uff09\012\uff09\013\uff09\014\uff09\015" +
    "\uff09\016\uff09\020\uff09\024\uff09\027\uff09\032\uff09\034\uff09" +
    "\040\uff09\047\uff09\050\uff09\055\uff09\056\uff09\061\uff09\062" +
    "\uff09\063\uff09\064\uff09\065\uff09\066\uff09\067\uff09\071\uff09" +
    "\121\uff09\122\uff09\126\uff09\130\uff09\132\uff09\147\uff09\150" +
    "\uff09\152\uff09\153\uff09\154\uff09\155\uff09\156\uff09\157\uff09" +
    "\166\uff09\170\uff09\001\002\000\004\115\u0185\001\002\000" +
    "\004\004\uff1e\001\002\000\004\004\u0187\001\002\000\130" +
    "\002\uff1d\003\uff1d\005\uff1d\010\uff1d\011\uff1d\012\uff1d\013" +
    "\uff1d\014\uff1d\015\uff1d\016\uff1d\020\uff1d\024\uff1d\027\uff1d" +
    "\032\uff1d\034\uff1d\040\uff1d\047\uff1d\050\uff1d\055\uff1d\056" +
    "\uff1d\061\uff1d\062\uff1d\063\uff1d\064\uff1d\065\uff1d\066\uff1d" +
    "\067\uff1d\071\uff1d\121\uff1d\122\uff1d\126\uff1d\130\uff1d\132" +
    "\uff1d\147\uff1d\150\uff1d\152\uff1d\153\uff1d\154\uff1d\155\uff1d" +
    "\156\uff1d\157\uff1d\166\uff1d\170\uff1d\001\002\000\004\115" +
    "\u0189\001\002\000\004\004\uff12\001\002\000\004\004\u018b" +
    "\001\002\000\130\002\uff11\003\uff11\005\uff11\010\uff11\011" +
    "\uff11\012\uff11\013\uff11\014\uff11\015\uff11\016\uff11\020\uff11" +
    "\024\uff11\027\uff11\032\uff11\034\uff11\040\uff11\047\uff11\050" +
    "\uff11\055\uff11\056\uff11\061\uff11\062\uff11\063\uff11\064\uff11" +
    "\065\uff11\066\uff11\067\uff11\071\uff11\121\uff11\122\uff11\126" +
    "\uff11\130\uff11\132\uff11\147\uff11\150\uff11\152\uff11\153\uff11" +
    "\154\uff11\155\uff11\156\uff11\157\uff11\166\uff11\170\uff11\001" +
    "\002\000\004\115\u018d\001\002\000\004\004\uff40\001\002" +
    "\000\004\004\u018f\001\002\000\130\002\uff3f\003\uff3f\005" +
    "\uff3f\010\uff3f\011\uff3f\012\uff3f\013\uff3f\014\uff3f\015\uff3f" +
    "\016\uff3f\020\uff3f\024\uff3f\027\uff3f\032\uff3f\034\uff3f\040" +
    "\uff3f\047\uff3f\050\uff3f\055\uff3f\056\uff3f\061\uff3f\062\uff3f" +
    "\063\uff3f\064\uff3f\065\uff3f\066\uff3f\067\uff3f\071\uff3f\121" +
    "\uff3f\122\uff3f\126\uff3f\130\uff3f\132\uff3f\147\uff3f\150\uff3f" +
    "\152\uff3f\153\uff3f\154\uff3f\155\uff3f\156\uff3f\157\uff3f\166" +
    "\uff3f\170\uff3f\001\002\000\020\003\u0192\122\u0195\123\u0193" +
    "\127\u0197\134\u0196\142\u0194\143\u0191\001\002\000\004\004" +
    "\u01b6\001\002\000\004\104\u01af\001\002\000\006\004\u01aa" +
    "\104\u01a9\001\002\000\004\004\u01a8\001\002\000\006\004" +
    "\u01a5\104\u01a4\001\002\000\006\004\u019f\104\u019e\001\002" +
    "\000\006\004\u0199\104\u0198\001\002\000\006\003\u019a\127" +
    "\u019b\001\002\000\130\002\ufed1\003\ufed1\005\ufed1\010\ufed1" +
    "\011\ufed1\012\ufed1\013\ufed1\014\ufed1\015\ufed1\016\ufed1\020" +
    "\ufed1\024\ufed1\027\ufed1\032\ufed1\034\ufed1\040\ufed1\047\ufed1" +
    "\050\ufed1\055\ufed1\056\ufed1\061\ufed1\062\ufed1\063\ufed1\064" +
    "\ufed1\065\ufed1\066\ufed1\067\ufed1\071\ufed1\121\ufed1\122\ufed1" +
    "\126\ufed1\130\ufed1\132\ufed1\147\ufed1\150\ufed1\152\ufed1\153" +
    "\ufed1\154\ufed1\155\ufed1\156\ufed1\157\ufed1\166\ufed1\170\ufed1" +
    "\001\002\000\004\004\u019d\001\002\000\004\004\u019c\001" +
    "\002\000\130\002\ufed0\003\ufed0\005\ufed0\010\ufed0\011\ufed0" +
    "\012\ufed0\013\ufed0\014\ufed0\015\ufed0\016\ufed0\020\ufed0\024" +
    "\ufed0\027\ufed0\032\ufed0\034\ufed0\040\ufed0\047\ufed0\050\ufed0" +
    "\055\ufed0\056\ufed0\061\ufed0\062\ufed0\063\ufed0\064\ufed0\065" +
    "\ufed0\066\ufed0\067\ufed0\071\ufed0\121\ufed0\122\ufed0\126\ufed0" +
    "\130\ufed0\132\ufed0\147\ufed0\150\ufed0\152\ufed0\153\ufed0\154" +
    "\ufed0\155\ufed0\156\ufed0\157\ufed0\166\ufed0\170\ufed0\001\002" +
    "\000\130\002\ufecf\003\ufecf\005\ufecf\010\ufecf\011\ufecf\012" +
    "\ufecf\013\ufecf\014\ufecf\015\ufecf\016\ufecf\020\ufecf\024\ufecf" +
    "\027\ufecf\032\ufecf\034\ufecf\040\ufecf\047\ufecf\050\ufecf\055" +
    "\ufecf\056\ufecf\061\ufecf\062\ufecf\063\ufecf\064\ufecf\065\ufecf" +
    "\066\ufecf\067\ufecf\071\ufecf\121\ufecf\122\ufecf\126\ufecf\130" +
    "\ufecf\132\ufecf\147\ufecf\150\ufecf\152\ufecf\153\ufecf\154\ufecf" +
    "\155\ufecf\156\ufecf\157\ufecf\166\ufecf\170\ufecf\001\002\000" +
    "\006\003\u01a0\134\u01a1\001\002\000\130\002\ufecd\003\ufecd" +
    "\005\ufecd\010\ufecd\011\ufecd\012\ufecd\013\ufecd\014\ufecd\015" +
    "\ufecd\016\ufecd\020\ufecd\024\ufecd\027\ufecd\032\ufecd\034\ufecd" +
    "\040\ufecd\047\ufecd\050\ufecd\055\ufecd\056\ufecd\061\ufecd\062" +
    "\ufecd\063\ufecd\064\ufecd\065\ufecd\066\ufecd\067\ufecd\071\ufecd" +
    "\121\ufecd\122\ufecd\126\ufecd\130\ufecd\132\ufecd\147\ufecd\150" +
    "\ufecd\152\ufecd\153\ufecd\154\ufecd\155\ufecd\156\ufecd\157\ufecd" +
    "\166\ufecd\170\ufecd\001\002\000\004\004\u01a3\001\002\000" +
    "\004\004\u01a2\001\002\000\130\002\ufecc\003\ufecc\005\ufecc" +
    "\010\ufecc\011\ufecc\012\ufecc\013\ufecc\014\ufecc\015\ufecc\016" +
    "\ufecc\020\ufecc\024\ufecc\027\ufecc\032\ufecc\034\ufecc\040\ufecc" +
    "\047\ufecc\050\ufecc\055\ufecc\056\ufecc\061\ufecc\062\ufecc\063" +
    "\ufecc\064\ufecc\065\ufecc\066\ufecc\067\ufecc\071\ufecc\121\ufecc" +
    "\122\ufecc\126\ufecc\130\ufecc\132\ufecc\147\ufecc\150\ufecc\152" +
    "\ufecc\153\ufecc\154\ufecc\155\ufecc\156\ufecc\157\ufecc\166\ufecc" +
    "\170\ufecc\001\002\000\130\002\ufecb\003\ufecb\005\ufecb\010" +
    "\ufecb\011\ufecb\012\ufecb\013\ufecb\014\ufecb\015\ufecb\016\ufecb" +
    "\020\ufecb\024\ufecb\027\ufecb\032\ufecb\034\ufecb\040\ufecb\047" +
    "\ufecb\050\ufecb\055\ufecb\056\ufecb\061\ufecb\062\ufecb\063\ufecb" +
    "\064\ufecb\065\ufecb\066\ufecb\067\ufecb\071\ufecb\121\ufecb\122" +
    "\ufecb\126\ufecb\130\ufecb\132\ufecb\147\ufecb\150\ufecb\152\ufecb" +
    "\153\ufecb\154\ufecb\155\ufecb\156\ufecb\157\ufecb\166\ufecb\170" +
    "\ufecb\001\002\000\004\122\u01a6\001\002\000\130\002\ufec7" +
    "\003\ufec7\005\ufec7\010\ufec7\011\ufec7\012\ufec7\013\ufec7\014" +
    "\ufec7\015\ufec7\016\ufec7\020\ufec7\024\ufec7\027\ufec7\032\ufec7" +
    "\034\ufec7\040\ufec7\047\ufec7\050\ufec7\055\ufec7\056\ufec7\061" +
    "\ufec7\062\ufec7\063\ufec7\064\ufec7\065\ufec7\066\ufec7\067\ufec7" +
    "\071\ufec7\121\ufec7\122\ufec7\126\ufec7\130\ufec7\132\ufec7\147" +
    "\ufec7\150\ufec7\152\ufec7\153\ufec7\154\ufec7\155\ufec7\156\ufec7" +
    "\157\ufec7\166\ufec7\170\ufec7\001\002\000\004\004\u01a7\001" +
    "\002\000\130\002\ufec6\003\ufec6\005\ufec6\010\ufec6\011\ufec6" +
    "\012\ufec6\013\ufec6\014\ufec6\015\ufec6\016\ufec6\020\ufec6\024" +
    "\ufec6\027\ufec6\032\ufec6\034\ufec6\040\ufec6\047\ufec6\050\ufec6" +
    "\055\ufec6\056\ufec6\061\ufec6\062\ufec6\063\ufec6\064\ufec6\065" +
    "\ufec6\066\ufec6\067\ufec6\071\ufec6\121\ufec6\122\ufec6\126\ufec6" +
    "\130\ufec6\132\ufec6\147\ufec6\150\ufec6\152\ufec6\153\ufec6\154" +
    "\ufec6\155\ufec6\156\ufec6\157\ufec6\166\ufec6\170\ufec6\001\002" +
    "\000\130\002\ufec9\003\ufec9\005\ufec9\010\ufec9\011\ufec9\012" +
    "\ufec9\013\ufec9\014\ufec9\015\ufec9\016\ufec9\020\ufec9\024\ufec9" +
    "\027\ufec9\032\ufec9\034\ufec9\040\ufec9\047\ufec9\050\ufec9\055" +
    "\ufec9\056\ufec9\061\ufec9\062\ufec9\063\ufec9\064\ufec9\065\ufec9" +
    "\066\ufec9\067\ufec9\071\ufec9\121\ufec9\122\ufec9\126\ufec9\130" +
    "\ufec9\132\ufec9\147\ufec9\150\ufec9\152\ufec9\153\ufec9\154\ufec9" +
    "\155\ufec9\156\ufec9\157\ufec9\166\ufec9\170\ufec9\001\002\000" +
    "\006\003\u01ab\123\u01ac\001\002\000\130\002\ufed5\003\ufed5" +
    "\005\ufed5\010\ufed5\011\ufed5\012\ufed5\013\ufed5\014\ufed5\015" +
    "\ufed5\016\ufed5\020\ufed5\024\ufed5\027\ufed5\032\ufed5\034\ufed5" +
    "\040\ufed5\047\ufed5\050\ufed5\055\ufed5\056\ufed5\061\ufed5\062" +
    "\ufed5\063\ufed5\064\ufed5\065\ufed5\066\ufed5\067\ufed5\071\ufed5" +
    "\121\ufed5\122\ufed5\126\ufed5\130\ufed5\132\ufed5\147\ufed5\150" +
    "\ufed5\152\ufed5\153\ufed5\154\ufed5\155\ufed5\156\ufed5\157\ufed5" +
    "\166\ufed5\170\ufed5\001\002\000\004\004\u01ae\001\002\000" +
    "\004\004\u01ad\001\002\000\130\002\ufed4\003\ufed4\005\ufed4" +
    "\010\ufed4\011\ufed4\012\ufed4\013\ufed4\014\ufed4\015\ufed4\016" +
    "\ufed4\020\ufed4\024\ufed4\027\ufed4\032\ufed4\034\ufed4\040\ufed4" +
    "\047\ufed4\050\ufed4\055\ufed4\056\ufed4\061\ufed4\062\ufed4\063" +
    "\ufed4\064\ufed4\065\ufed4\066\ufed4\067\ufed4\071\ufed4\121\ufed4" +
    "\122\ufed4\126\ufed4\130\ufed4\132\ufed4\147\ufed4\150\ufed4\152" +
    "\ufed4\153\ufed4\154\ufed4\155\ufed4\156\ufed4\157\ufed4\166\ufed4" +
    "\170\ufed4\001\002\000\130\002\ufed3\003\ufed3\005\ufed3\010" +
    "\ufed3\011\ufed3\012\ufed3\013\ufed3\014\ufed3\015\ufed3\016\ufed3" +
    "\020\ufed3\024\ufed3\027\ufed3\032\ufed3\034\ufed3\040\ufed3\047" +
    "\ufed3\050\ufed3\055\ufed3\056\ufed3\061\ufed3\062\ufed3\063\ufed3" +
    "\064\ufed3\065\ufed3\066\ufed3\067\ufed3\071\ufed3\121\ufed3\122" +
    "\ufed3\126\ufed3\130\ufed3\132\ufed3\147\ufed3\150\ufed3\152\ufed3" +
    "\153\ufed3\154\ufed3\155\ufed3\156\ufed3\157\ufed3\166\ufed3\170" +
    "\ufed3\001\002\000\010\123\u01b0\127\u01b2\134\u01b1\001\002" +
    "\000\004\004\u01b5\001\002\000\004\004\u01b4\001\002\000" +
    "\004\004\u01b3\001\002\000\130\002\ufece\003\ufece\005\ufece" +
    "\010\ufece\011\ufece\012\ufece\013\ufece\014\ufece\015\ufece\016" +
    "\ufece\020\ufece\024\ufece\027\ufece\032\ufece\034\ufece\040\ufece" +
    "\047\ufece\050\ufece\055\ufece\056\ufece\061\ufece\062\ufece\063" +
    "\ufece\064\ufece\065\ufece\066\ufece\067\ufece\071\ufece\121\ufece" +
    "\122\ufece\126\ufece\130\ufece\132\ufece\147\ufece\150\ufece\152" +
    "\ufece\153\ufece\154\ufece\155\ufece\156\ufece\157\ufece\166\ufece" +
    "\170\ufece\001\002\000\130\002\ufeca\003\ufeca\005\ufeca\010" +
    "\ufeca\011\ufeca\012\ufeca\013\ufeca\014\ufeca\015\ufeca\016\ufeca" +
    "\020\ufeca\024\ufeca\027\ufeca\032\ufeca\034\ufeca\040\ufeca\047" +
    "\ufeca\050\ufeca\055\ufeca\056\ufeca\061\ufeca\062\ufeca\063\ufeca" +
    "\064\ufeca\065\ufeca\066\ufeca\067\ufeca\071\ufeca\121\ufeca\122" +
    "\ufeca\126\ufeca\130\ufeca\132\ufeca\147\ufeca\150\ufeca\152\ufeca" +
    "\153\ufeca\154\ufeca\155\ufeca\156\ufeca\157\ufeca\166\ufeca\170" +
    "\ufeca\001\002\000\130\002\ufed2\003\ufed2\005\ufed2\010\ufed2" +
    "\011\ufed2\012\ufed2\013\ufed2\014\ufed2\015\ufed2\016\ufed2\020" +
    "\ufed2\024\ufed2\027\ufed2\032\ufed2\034\ufed2\040\ufed2\047\ufed2" +
    "\050\ufed2\055\ufed2\056\ufed2\061\ufed2\062\ufed2\063\ufed2\064" +
    "\ufed2\065\ufed2\066\ufed2\067\ufed2\071\ufed2\121\ufed2\122\ufed2" +
    "\126\ufed2\130\ufed2\132\ufed2\147\ufed2\150\ufed2\152\ufed2\153" +
    "\ufed2\154\ufed2\155\ufed2\156\ufed2\157\ufed2\166\ufed2\170\ufed2" +
    "\001\002\000\130\002\ufec8\003\ufec8\005\ufec8\010\ufec8\011" +
    "\ufec8\012\ufec8\013\ufec8\014\ufec8\015\ufec8\016\ufec8\020\ufec8" +
    "\024\ufec8\027\ufec8\032\ufec8\034\ufec8\040\ufec8\047\ufec8\050" +
    "\ufec8\055\ufec8\056\ufec8\061\ufec8\062\ufec8\063\ufec8\064\ufec8" +
    "\065\ufec8\066\ufec8\067\ufec8\071\ufec8\121\ufec8\122\ufec8\126" +
    "\ufec8\130\ufec8\132\ufec8\147\ufec8\150\ufec8\152\ufec8\153\ufec8" +
    "\154\ufec8\155\ufec8\156\ufec8\157\ufec8\166\ufec8\170\ufec8\001" +
    "\002\000\004\075\u01b8\001\002\000\004\003\u01b9\001\002" +
    "\000\004\004\u01ba\001\002\000\130\002\ufea4\003\ufea4\005" +
    "\ufea4\010\ufea4\011\ufea4\012\ufea4\013\ufea4\014\ufea4\015\ufea4" +
    "\016\ufea4\020\ufea4\024\ufea4\027\ufea4\032\ufea4\034\ufea4\040" +
    "\ufea4\047\ufea4\050\ufea4\055\ufea4\056\ufea4\061\ufea4\062\ufea4" +
    "\063\ufea4\064\ufea4\065\ufea4\066\ufea4\067\ufea4\071\ufea4\121" +
    "\ufea4\122\ufea4\126\ufea4\130\ufea4\132\ufea4\147\ufea4\150\ufea4" +
    "\152\ufea4\153\ufea4\154\ufea4\155\ufea4\156\ufea4\157\ufea4\166" +
    "\ufea4\170\ufea4\001\002\000\004\075\u01bc\001\002\000\004" +
    "\003\u01bd\001\002\000\004\004\u01be\001\002\000\130\002" +
    "\ufec2\003\ufec2\005\ufec2\010\ufec2\011\ufec2\012\ufec2\013\ufec2" +
    "\014\ufec2\015\ufec2\016\ufec2\020\ufec2\024\ufec2\027\ufec2\032" +
    "\ufec2\034\ufec2\040\ufec2\047\ufec2\050\ufec2\055\ufec2\056\ufec2" +
    "\061\ufec2\062\ufec2\063\ufec2\064\ufec2\065\ufec2\066\ufec2\067" +
    "\ufec2\071\ufec2\121\ufec2\122\ufec2\126\ufec2\130\ufec2\132\ufec2" +
    "\147\ufec2\150\ufec2\152\ufec2\153\ufec2\154\ufec2\155\ufec2\156" +
    "\ufec2\157\ufec2\166\ufec2\170\ufec2\001\002\000\126\003\055" +
    "\005\045\010\022\011\054\012\104\013\103\014\101\015" +
    "\100\016\064\020\072\024\030\027\026\032\062\034\073" +
    "\040\034\047\075\050\021\055\105\056\042\061\051\062" +
    "\047\063\052\064\076\065\106\066\050\067\053\071\023" +
    "\121\060\122\074\126\063\130\044\132\035\147\043\150" +
    "\031\152\067\153\041\154\024\155\077\156\061\157\046" +
    "\166\027\170\056\001\002\000\004\002\ufff4\001\002\000" +
    "\010\003\277\123\301\127\302\001\002\000\004\115\u01c3" +
    "\001\002\000\004\004\uff45\001\002\000\004\004\u01c5\001" +
    "\002\000\130\002\uff44\003\uff44\005\uff44\010\uff44\011\uff44" +
    "\012\uff44\013\uff44\014\uff44\015\uff44\016\uff44\020\uff44\024" +
    "\uff44\027\uff44\032\uff44\034\uff44\040\uff44\047\uff44\050\uff44" +
    "\055\uff44\056\uff44\061\uff44\062\uff44\063\uff44\064\uff44\065" +
    "\uff44\066\uff44\067\uff44\071\uff44\121\uff44\122\uff44\126\uff44" +
    "\130\uff44\132\uff44\147\uff44\150\uff44\152\uff44\153\uff44\154" +
    "\uff44\155\uff44\156\uff44\157\uff44\166\uff44\170\uff44\001\002" +
    "\000\126\003\055\005\045\010\022\011\054\012\104\013" +
    "\103\014\101\015\100\016\064\020\072\024\030\027\026" +
    "\032\062\034\073\040\034\047\075\050\021\055\105\056" +
    "\042\061\051\062\047\063\052\064\076\065\106\066\050" +
    "\067\053\071\023\121\060\122\074\126\063\130\044\132" +
    "\035\147\043\150\031\152\067\153\041\154\024\155\077" +
    "\156\061\157\046\166\027\170\056\001\002\000\004\002" +
    "\uffec\001\002\000\004\075\u01c9\001\002\000\004\003\u01ca" +
    "\001\002\000\004\004\u01cb\001\002\000\130\002\ufea2\003" +
    "\ufea2\005\ufea2\010\ufea2\011\ufea2\012\ufea2\013\ufea2\014\ufea2" +
    "\015\ufea2\016\ufea2\020\ufea2\024\ufea2\027\ufea2\032\ufea2\034" +
    "\ufea2\040\ufea2\047\ufea2\050\ufea2\055\ufea2\056\ufea2\061\ufea2" +
    "\062\ufea2\063\ufea2\064\ufea2\065\ufea2\066\ufea2\067\ufea2\071" +
    "\ufea2\121\ufea2\122\ufea2\126\ufea2\130\ufea2\132\ufea2\147\ufea2" +
    "\150\ufea2\152\ufea2\153\ufea2\154\ufea2\155\ufea2\156\ufea2\157" +
    "\ufea2\166\ufea2\170\ufea2\001\002\000\004\003\u01cd\001\002" +
    "\000\004\004\u01ce\001\002\000\130\002\uffc3\003\uffc3\005" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\020\uffc3\024\uffc3\027\uffc3\032\uffc3\034\uffc3\040" +
    "\uffc3\047\uffc3\050\uffc3\055\uffc3\056\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\071\uffc3\121" +
    "\uffc3\122\uffc3\126\uffc3\130\uffc3\132\uffc3\147\uffc3\150\uffc3" +
    "\152\uffc3\153\uffc3\154\uffc3\155\uffc3\156\uffc3\157\uffc3\166" +
    "\uffc3\170\uffc3\001\002\000\004\075\u01d0\001\002\000\004" +
    "\003\u01d1\001\002\000\004\004\u01d2\001\002\000\130\002" +
    "\ufebc\003\ufebc\005\ufebc\010\ufebc\011\ufebc\012\ufebc\013\ufebc" +
    "\014\ufebc\015\ufebc\016\ufebc\020\ufebc\024\ufebc\027\ufebc\032" +
    "\ufebc\034\ufebc\040\ufebc\047\ufebc\050\ufebc\055\ufebc\056\ufebc" +
    "\061\ufebc\062\ufebc\063\ufebc\064\ufebc\065\ufebc\066\ufebc\067" +
    "\ufebc\071\ufebc\121\ufebc\122\ufebc\126\ufebc\130\ufebc\132\ufebc" +
    "\147\ufebc\150\ufebc\152\ufebc\153\ufebc\154\ufebc\155\ufebc\156" +
    "\ufebc\157\ufebc\166\ufebc\170\ufebc\001\002\000\004\115\u01d4" +
    "\001\002\000\004\004\uff4b\001\002\000\004\004\u01d6\001" +
    "\002\000\130\002\uff4a\003\uff4a\005\uff4a\010\uff4a\011\uff4a" +
    "\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\020\uff4a\024" +
    "\uff4a\027\uff4a\032\uff4a\034\uff4a\040\uff4a\047\uff4a\050\uff4a" +
    "\055\uff4a\056\uff4a\061\uff4a\062\uff4a\063\uff4a\064\uff4a\065" +
    "\uff4a\066\uff4a\067\uff4a\071\uff4a\121\uff4a\122\uff4a\126\uff4a" +
    "\130\uff4a\132\uff4a\147\uff4a\150\uff4a\152\uff4a\153\uff4a\154" +
    "\uff4a\155\uff4a\156\uff4a\157\uff4a\166\uff4a\170\uff4a\001\002" +
    "\000\004\004\u01d8\001\002\000\006\002\uffd1\003\u01d9\001" +
    "\002\000\004\002\uffd0\001\002\000\006\004\uffe8\005\u01db" +
    "\001\002\000\004\122\u01de\001\002\000\004\004\u01dd\001" +
    "\002\000\126\003\uffe7\005\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\024\uffe7\027" +
    "\uffe7\032\uffe7\034\uffe7\040\uffe7\047\uffe7\050\uffe7\055\uffe7" +
    "\056\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\067\uffe7\071\uffe7\121\uffe7\122\uffe7\126\uffe7\130\uffe7" +
    "\132\uffe7\147\uffe7\150\uffe7\152\uffe7\153\uffe7\154\uffe7\155" +
    "\uffe7\156\uffe7\157\uffe7\166\uffe7\170\uffe7\001\002\000\004" +
    "\004\uffe6\001\002\000\004\004\u01e0\001\002\000\126\003" +
    "\uffe5\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\020\uffe5\024\uffe5\027\uffe5\032\uffe5\034" +
    "\uffe5\040\uffe5\047\uffe5\050\uffe5\055\uffe5\056\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\071" +
    "\uffe5\121\uffe5\122\uffe5\126\uffe5\130\uffe5\132\uffe5\147\uffe5" +
    "\150\uffe5\152\uffe5\153\uffe5\154\uffe5\155\uffe5\156\uffe5\157" +
    "\uffe5\166\uffe5\170\uffe5\001\002\000\126\003\055\005\045" +
    "\010\022\011\054\012\104\013\103\014\101\015\100\016" +
    "\064\020\072\024\030\027\026\032\062\034\073\040\034" +
    "\047\075\050\021\055\105\056\042\061\051\062\047\063" +
    "\052\064\076\065\106\066\050\067\053\071\023\121\060" +
    "\122\074\126\063\130\044\132\035\147\043\150\031\152" +
    "\067\153\041\154\024\155\077\156\061\157\046\166\027" +
    "\170\056\001\002\000\004\004\u01e3\001\002\000\130\002" +
    "\uffc5\003\uffc5\005\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\020\uffc5\024\uffc5\027\uffc5\032" +
    "\uffc5\034\uffc5\040\uffc5\047\uffc5\050\uffc5\055\uffc5\056\uffc5" +
    "\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067" +
    "\uffc5\071\uffc5\121\uffc5\122\uffc5\126\uffc5\130\uffc5\132\uffc5" +
    "\147\uffc5\150\uffc5\152\uffc5\153\uffc5\154\uffc5\155\uffc5\156" +
    "\uffc5\157\uffc5\166\uffc5\170\uffc5\001\002\000\004\002\ufff0" +
    "\001\002\000\004\075\u01e6\001\002\000\004\003\u01e7\001" +
    "\002\000\004\004\u01e8\001\002\000\130\002\ufeae\003\ufeae" +
    "\005\ufeae\010\ufeae\011\ufeae\012\ufeae\013\ufeae\014\ufeae\015" +
    "\ufeae\016\ufeae\020\ufeae\024\ufeae\027\ufeae\032\ufeae\034\ufeae" +
    "\040\ufeae\047\ufeae\050\ufeae\055\ufeae\056\ufeae\061\ufeae\062" +
    "\ufeae\063\ufeae\064\ufeae\065\ufeae\066\ufeae\067\ufeae\071\ufeae" +
    "\121\ufeae\122\ufeae\126\ufeae\130\ufeae\132\ufeae\147\ufeae\150" +
    "\ufeae\152\ufeae\153\ufeae\154\ufeae\155\ufeae\156\ufeae\157\ufeae" +
    "\166\ufeae\170\ufeae\001\002\000\012\061\u01ec\062\u01eb\063" +
    "\u01ea\064\u01ee\001\002\000\004\122\uffd3\001\002\000\004" +
    "\122\uffd4\001\002\000\004\122\uffd5\001\002\000\004\122" +
    "\u01ef\001\002\000\004\122\uffd2\001\002\000\004\075\u01f0" +
    "\001\002\000\004\123\u01f1\001\002\000\004\004\u01f2\001" +
    "\002\000\014\003\u01f5\047\u01f4\122\u01f8\155\u01f7\166\u01f9" +
    "\001\002\000\026\004\uff99\076\u02a1\077\u029b\100\u029d\101" +
    "\u029f\102\u029e\103\u02a0\110\u029c\111\u02a2\115\uff99\001\002" +
    "\000\004\005\u0299\001\002\000\004\004\uff98\001\002\000" +
    "\022\076\u0288\077\u0281\100\u0283\101\u0284\102\u0285\103\u0286" +
    "\110\u0282\111\u0287\001\002\000\004\114\u027f\001\002\000" +
    "\004\005\u022a\001\002\000\004\005\u0221\001\002\000\004" +
    "\004\u01fb\001\002\000\004\122\u01fc\001\002\000\004\112" +
    "\u01fd\001\002\000\004\115\u01fe\001\002\000\006\003\u01ff" +
    "\120\u0200\001\002\000\126\003\uff63\005\uff63\010\uff63\011" +
    "\uff63\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\020\uff63" +
    "\024\uff63\027\uff63\032\uff63\034\uff63\040\uff63\047\uff63\050" +
    "\uff63\055\uff63\056\uff63\061\uff63\062\uff63\063\uff63\064\uff63" +
    "\065\uff63\066\uff63\067\uff63\071\uff63\121\uff63\122\uff63\126" +
    "\uff63\130\uff63\132\uff63\147\uff63\150\uff63\152\uff63\153\uff63" +
    "\154\uff63\155\uff63\156\uff63\157\uff63\166\uff63\170\uff63\001" +
    "\002\000\110\003\u0205\005\045\010\022\011\054\012\104" +
    "\013\103\014\101\015\100\016\064\020\072\024\030\027" +
    "\026\032\062\034\073\040\034\047\075\050\021\055\105" +
    "\056\042\065\106\066\050\071\023\121\u0207\122\074\126" +
    "\u0208\132\035\147\u0203\150\031\152\067\153\041\154\024" +
    "\155\077\156\061\157\046\166\027\001\002\000\126\003" +
    "\uff65\005\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65" +
    "\015\uff65\016\uff65\020\uff65\024\uff65\027\uff65\032\uff65\034" +
    "\uff65\040\uff65\047\uff65\050\uff65\055\uff65\056\uff65\061\uff65" +
    "\062\uff65\063\uff65\064\uff65\065\uff65\066\uff65\067\uff65\071" +
    "\uff65\121\uff65\122\uff65\126\uff65\130\uff65\132\uff65\147\uff65" +
    "\150\uff65\152\uff65\153\uff65\154\uff65\155\uff65\156\uff65\157" +
    "\uff65\166\uff65\170\uff65\001\002\000\110\003\uff97\005\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\020\uff97\024\uff97\027\uff97\032\uff97\034\uff97\040\uff97" +
    "\047\uff97\050\uff97\055\uff97\056\uff97\065\uff97\066\uff97\071" +
    "\uff97\121\uff97\122\uff97\126\uff97\132\uff97\147\uff97\150\uff97" +
    "\152\uff97\153\uff97\154\uff97\155\uff97\156\uff97\157\uff97\166" +
    "\uff97\001\002\000\004\004\uff89\001\002\000\126\003\uff64" +
    "\005\uff64\010\uff64\011\uff64\012\uff64\013\uff64\014\uff64\015" +
    "\uff64\016\uff64\020\uff64\024\uff64\027\uff64\032\uff64\034\uff64" +
    "\040\uff64\047\uff64\050\uff64\055\uff64\056\uff64\061\uff64\062" +
    "\uff64\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\071\uff64" +
    "\121\uff64\122\uff64\126\uff64\130\uff64\132\uff64\147\uff64\150" +
    "\uff64\152\uff64\153\uff64\154\uff64\155\uff64\156\uff64\157\uff64" +
    "\166\uff64\170\uff64\001\002\000\132\002\uff85\003\uff85\004" +
    "\uff8d\005\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85" +
    "\015\uff85\016\uff85\020\uff85\024\uff85\027\uff85\032\uff85\034" +
    "\uff85\040\uff85\047\uff85\050\uff85\055\uff85\056\uff85\061\uff85" +
    "\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\071" +
    "\uff85\121\uff85\122\uff85\126\uff85\130\uff85\132\uff85\147\uff85" +
    "\150\uff85\152\uff85\153\uff85\154\uff85\155\uff85\156\uff85\157" +
    "\uff85\166\uff85\170\uff85\001\002\000\110\003\uff91\005\uff91" +
    "\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016" +
    "\uff91\020\uff91\024\uff91\027\uff91\032\uff91\034\uff91\040\uff91" +
    "\047\uff91\050\uff91\055\uff91\056\uff91\065\uff91\066\uff91\071" +
    "\uff91\121\uff91\122\uff91\126\uff91\132\uff91\147\uff91\150\uff91" +
    "\152\uff91\153\uff91\154\uff91\155\uff91\156\uff91\157\uff91\166" +
    "\uff91\001\002\000\132\002\uff87\003\uff87\005\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\020" +
    "\uff87\024\uff87\027\uff87\032\uff87\034\uff87\040\uff87\047\uff87" +
    "\050\uff87\055\uff87\056\uff87\061\uff87\062\uff87\063\uff87\064" +
    "\uff87\065\uff87\066\uff87\067\uff87\071\uff87\115\u0215\121\uff87" +
    "\122\uff87\126\uff87\130\uff87\132\uff87\147\uff87\150\uff87\152" +
    "\uff87\153\uff87\154\uff87\155\uff87\156\uff87\157\uff87\166\uff87" +
    "\170\uff87\001\002\000\004\004\uff8b\001\002\000\110\003" +
    "\uff8f\005\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f" +
    "\015\uff8f\016\uff8f\020\uff8f\024\uff8f\027\uff8f\032\uff8f\034" +
    "\uff8f\040\uff8f\047\uff8f\050\uff8f\055\uff8f\056\uff8f\065\uff8f" +
    "\066\uff8f\071\uff8f\121\uff8f\122\uff8f\126\uff8f\132\uff8f\147" +
    "\uff8f\150\uff8f\152\uff8f\153\uff8f\154\uff8f\155\uff8f\156\uff8f" +
    "\157\uff8f\166\uff8f\001\002\000\110\003\uff95\005\uff95\010" +
    "\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95" +
    "\020\uff95\024\uff95\027\uff95\032\uff95\034\uff95\040\uff95\047" +
    "\uff95\050\uff95\055\uff95\056\uff95\065\uff95\066\uff95\071\uff95" +
    "\121\uff95\122\uff95\126\uff95\132\uff95\147\uff95\150\uff95\152" +
    "\uff95\153\uff95\154\uff95\155\uff95\156\uff95\157\uff95\166\uff95" +
    "\001\002\000\110\003\uff93\005\uff93\010\uff93\011\uff93\012" +
    "\uff93\013\uff93\014\uff93\015\uff93\016\uff93\020\uff93\024\uff93" +
    "\027\uff93\032\uff93\034\uff93\040\uff93\047\uff93\050\uff93\055" +
    "\uff93\056\uff93\065\uff93\066\uff93\071\uff93\121\uff93\122\uff93" +
    "\126\uff93\132\uff93\147\uff93\150\uff93\152\uff93\153\uff93\154" +
    "\uff93\155\uff93\156\uff93\157\uff93\166\uff93\001\002\000\110" +
    "\003\u0205\005\045\010\022\011\054\012\104\013\103\014" +
    "\101\015\100\016\064\020\072\024\030\027\026\032\062" +
    "\034\073\040\034\047\075\050\021\055\105\056\042\065" +
    "\106\066\050\071\023\121\u0207\122\074\126\u0208\132\035" +
    "\147\u0203\150\031\152\067\153\041\154\024\155\077\156" +
    "\061\157\046\166\027\001\002\000\130\002\uff92\003\uff92" +
    "\005\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015" +
    "\uff92\016\uff92\020\uff92\024\uff92\027\uff92\032\uff92\034\uff92" +
    "\040\uff92\047\uff92\050\uff92\055\uff92\056\uff92\061\uff92\062" +
    "\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\071\uff92" +
    "\121\uff92\122\uff92\126\uff92\130\uff92\132\uff92\147\uff92\150" +
    "\uff92\152\uff92\153\uff92\154\uff92\155\uff92\156\uff92\157\uff92" +
    "\166\uff92\170\uff92\001\002\000\110\003\u0205\005\045\010" +
    "\022\011\054\012\104\013\103\014\101\015\100\016\064" +
    "\020\072\024\030\027\026\032\062\034\073\040\034\047" +
    "\075\050\021\055\105\056\042\065\106\066\050\071\023" +
    "\121\u0207\122\074\126\u0208\132\035\147\u0203\150\031\152" +
    "\067\153\041\154\024\155\077\156\061\157\046\166\027" +
    "\001\002\000\130\002\uff94\003\uff94\005\uff94\010\uff94\011" +
    "\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\020\uff94" +
    "\024\uff94\027\uff94\032\uff94\034\uff94\040\uff94\047\uff94\050" +
    "\uff94\055\uff94\056\uff94\061\uff94\062\uff94\063\uff94\064\uff94" +
    "\065\uff94\066\uff94\067\uff94\071\uff94\121\uff94\122\uff94\126" +
    "\uff94\130\uff94\132\uff94\147\uff94\150\uff94\152\uff94\153\uff94" +
    "\154\uff94\155\uff94\156\uff94\157\uff94\166\uff94\170\uff94\001" +
    "\002\000\110\003\u0205\005\045\010\022\011\054\012\104" +
    "\013\103\014\101\015\100\016\064\020\072\024\030\027" +
    "\026\032\062\034\073\040\034\047\075\050\021\055\105" +
    "\056\042\065\106\066\050\071\023\121\u0207\122\074\126" +
    "\u0208\132\035\147\u0203\150\031\152\067\153\041\154\024" +
    "\155\077\156\061\157\046\166\027\001\002\000\130\002" +
    "\uff8e\003\uff8e\005\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\020\uff8e\024\uff8e\027\uff8e\032" +
    "\uff8e\034\uff8e\040\uff8e\047\uff8e\050\uff8e\055\uff8e\056\uff8e" +
    "\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067" +
    "\uff8e\071\uff8e\121\uff8e\122\uff8e\126\uff8e\130\uff8e\132\uff8e" +
    "\147\uff8e\150\uff8e\152\uff8e\153\uff8e\154\uff8e\155\uff8e\156" +
    "\uff8e\157\uff8e\166\uff8e\170\uff8e\001\002\000\004\004\u0213" +
    "\001\002\000\110\003\u0205\005\045\010\022\011\054\012" +
    "\104\013\103\014\101\015\100\016\064\020\072\024\030" +
    "\027\026\032\062\034\073\040\034\047\075\050\021\055" +
    "\105\056\042\065\106\066\050\071\023\121\u0207\122\074" +
    "\126\u0208\132\035\147\u0203\150\031\152\067\153\041\154" +
    "\024\155\077\156\061\157\046\166\027\001\002\000\130" +
    "\002\uff8a\003\uff8a\005\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\020\uff8a\024\uff8a\027\uff8a" +
    "\032\uff8a\034\uff8a\040\uff8a\047\uff8a\050\uff8a\055\uff8a\056" +
    "\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\071\uff8a\121\uff8a\122\uff8a\126\uff8a\130\uff8a\132" +
    "\uff8a\147\uff8a\150\uff8a\152\uff8a\153\uff8a\154\uff8a\155\uff8a" +
    "\156\uff8a\157\uff8a\166\uff8a\170\uff8a\001\002\000\004\004" +
    "\u0216\001\002\000\130\002\uff86\003\uff86\005\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\020" +
    "\uff86\024\uff86\027\uff86\032\uff86\034\uff86\040\uff86\047\uff86" +
    "\050\uff86\055\uff86\056\uff86\061\uff86\062\uff86\063\uff86\064" +
    "\uff86\065\uff86\066\uff86\067\uff86\071\uff86\121\uff86\122\uff86" +
    "\126\uff86\130\uff86\132\uff86\147\uff86\150\uff86\152\uff86\153" +
    "\uff86\154\uff86\155\uff86\156\uff86\157\uff86\166\uff86\170\uff86" +
    "\001\002\000\110\003\u0205\005\045\010\022\011\054\012" +
    "\104\013\103\014\101\015\100\016\064\020\072\024\030" +
    "\027\026\032\062\034\073\040\034\047\075\050\021\055" +
    "\105\056\042\065\106\066\050\071\023\121\u0207\122\074" +
    "\126\u0208\132\035\147\u0203\150\031\152\067\153\041\154" +
    "\024\155\077\156\061\157\046\166\027\001\002\000\130" +
    "\002\uff90\003\uff90\005\uff90\010\uff90\011\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\020\uff90\024\uff90\027\uff90" +
    "\032\uff90\034\uff90\040\uff90\047\uff90\050\uff90\055\uff90\056" +
    "\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90" +
    "\067\uff90\071\uff90\121\uff90\122\uff90\126\uff90\130\uff90\132" +
    "\uff90\147\uff90\150\uff90\152\uff90\153\uff90\154\uff90\155\uff90" +
    "\156\uff90\157\uff90\166\uff90\170\uff90\001\002\000\004\004" +
    "\u021a\001\002\000\110\003\u0205\005\045\010\022\011\054" +
    "\012\104\013\103\014\101\015\100\016\064\020\072\024" +
    "\030\027\026\032\062\034\073\040\034\047\075\050\021" +
    "\055\105\056\042\065\106\066\050\071\023\121\u0207\122" +
    "\074\126\u0208\132\035\147\u0203\150\031\152\067\153\041" +
    "\154\024\155\077\156\061\157\046\166\027\001\002\000" +
    "\130\002\uff8c\003\uff8c\005\uff8c\010\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\020\uff8c\024\uff8c\027" +
    "\uff8c\032\uff8c\034\uff8c\040\uff8c\047\uff8c\050\uff8c\055\uff8c" +
    "\056\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066" +
    "\uff8c\067\uff8c\071\uff8c\121\uff8c\122\uff8c\126\uff8c\130\uff8c" +
    "\132\uff8c\147\uff8c\150\uff8c\152\uff8c\153\uff8c\154\uff8c\155" +
    "\uff8c\156\uff8c\157\uff8c\166\uff8c\170\uff8c\001\002\000\004" +
    "\004\u021d\001\002\000\110\003\u0205\005\045\010\022\011" +
    "\054\012\104\013\103\014\101\015\100\016\064\020\072" +
    "\024\030\027\026\032\062\034\073\040\034\047\075\050" +
    "\021\055\105\056\042\065\106\066\050\071\023\121\u0207" +
    "\122\074\126\u0208\132\035\147\u0203\150\031\152\067\153" +
    "\041\154\024\155\077\156\061\157\046\166\027\001\002" +
    "\000\130\002\uff88\003\uff88\005\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\016\uff88\020\uff88\024\uff88" +
    "\027\uff88\032\uff88\034\uff88\040\uff88\047\uff88\050\uff88\055" +
    "\uff88\056\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88" +
    "\066\uff88\067\uff88\071\uff88\121\uff88\122\uff88\126\uff88\130" +
    "\uff88\132\uff88\147\uff88\150\uff88\152\uff88\153\uff88\154\uff88" +
    "\155\uff88\156\uff88\157\uff88\166\uff88\170\uff88\001\002\000" +
    "\110\003\u0205\005\045\010\022\011\054\012\104\013\103" +
    "\014\101\015\100\016\064\020\072\024\030\027\026\032" +
    "\062\034\073\040\034\047\075\050\021\055\105\056\042" +
    "\065\106\066\050\071\023\121\u0207\122\074\126\u0208\132" +
    "\035\147\u0203\150\031\152\067\153\041\154\024\155\077" +
    "\156\061\157\046\166\027\001\002\000\130\002\uff96\003" +
    "\uff96\005\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\016\uff96\020\uff96\024\uff96\027\uff96\032\uff96\034" +
    "\uff96\040\uff96\047\uff96\050\uff96\055\uff96\056\uff96\061\uff96" +
    "\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96\071" +
    "\uff96\121\uff96\122\uff96\126\uff96\130\uff96\132\uff96\147\uff96" +
    "\150\uff96\152\uff96\153\uff96\154\uff96\155\uff96\156\uff96\157" +
    "\uff96\166\uff96\170\uff96\001\002\000\010\003\u0224\054\u0223" +
    "\144\u0225\001\002\000\026\004\uff84\076\uff84\077\uff84\100" +
    "\uff84\101\uff84\102\uff84\103\uff84\110\uff84\111\uff84\115\uff84" +
    "\001\002\000\004\114\u0228\001\002\000\026\004\uff60\076" +
    "\uff60\077\uff60\100\uff60\101\uff60\102\uff60\103\uff60\110\uff60" +
    "\111\uff60\115\uff60\001\002\000\004\114\u0226\001\002\000" +
    "\004\115\u0227\001\002\000\026\004\uff62\076\uff62\077\uff62" +
    "\100\uff62\101\uff62\102\uff62\103\uff62\110\uff62\111\uff62\115" +
    "\uff62\001\002\000\004\115\u0229\001\002\000\026\004\uff61" +
    "\076\uff61\077\uff61\100\uff61\101\uff61\102\uff61\103\uff61\110" +
    "\uff61\111\uff61\115\uff61\001\002\000\062\017\u0241\021\u023c" +
    "\022\u0234\023\u0239\025\u0233\026\u0237\030\u023f\031\u0242\033" +
    "\u023b\035\u023d\036\u022f\037\u022d\041\u0235\042\u0232\043\u023e" +
    "\044\u0238\051\u022c\052\u023a\053\u0240\136\u0231\137\u0230\140" +
    "\u022e\141\u0236\144\u022b\001\002\000\004\114\u027d\001\002" +
    "\000\004\114\u027b\001\002\000\004\114\u0279\001\002\000" +
    "\004\114\u0277\001\002\000\004\114\u0275\001\002\000\004" +
    "\114\u0273\001\002\000\004\114\u0271\001\002\000\004\114" +
    "\u026f\001\002\000\004\114\u026d\001\002\000\004\114\u026b" +
    "\001\002\000\004\114\u0269\001\002\000\004\114\u0267\001" +
    "\002\000\004\114\u0265\001\002\000\004\114\u0263\001\002" +
    "\000\004\114\u0261\001\002\000\004\114\u025f\001\002\000" +
    "\004\114\u025d\001\002\000\004\114\u0258\001\002\000\004" +
    "\114\u0256\001\002\000\004\114\u0254\001\002\000\004\114" +
    "\u024f\001\002\000\004\114\u024a\001\002\000\004\114\u0248" +
    "\001\002\000\004\114\u0243\001\002\000\006\122\u0244\127" +
    "\u0245\001\002\000\004\115\u0247\001\002\000\004\115\u0246" +
    "\001\002\000\026\004\uff79\076\uff79\077\uff79\100\uff79\101" +
    "\uff79\102\uff79\103\uff79\110\uff79\111\uff79\115\uff79\001\002" +
    "\000\026\004\uff77\076\uff77\077\uff77\100\uff77\101\uff77\102" +
    "\uff77\103\uff77\110\uff77\111\uff77\115\uff77\001\002\000\004" +
    "\115\u0249\001\002\000\026\004\uff81\076\uff81\077\uff81\100" +
    "\uff81\101\uff81\102\uff81\103\uff81\110\uff81\111\uff81\115\uff81" +
    "\001\002\000\006\122\u024b\127\u024c\001\002\000\004\115" +
    "\u024e\001\002\000\004\115\u024d\001\002\000\026\004\uff6a" +
    "\076\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\110" +
    "\uff6a\111\uff6a\115\uff6a\001\002\000\026\004\uff69\076\uff69" +
    "\077\uff69\100\uff69\101\uff69\102\uff69\103\uff69\110\uff69\111" +
    "\uff69\115\uff69\001\002\000\006\122\u0251\123\u0250\001\002" +
    "\000\004\115\u0253\001\002\000\004\115\u0252\001\002\000" +
    "\026\004\uff78\076\uff78\077\uff78\100\uff78\101\uff78\102\uff78" +
    "\103\uff78\110\uff78\111\uff78\115\uff78\001\002\000\026\004" +
    "\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a" +
    "\110\uff7a\111\uff7a\115\uff7a\001\002\000\004\115\u0255\001" +
    "\002\000\026\004\uff70\076\uff70\077\uff70\100\uff70\101\uff70" +
    "\102\uff70\103\uff70\110\uff70\111\uff70\115\uff70\001\002\000" +
    "\004\115\u0257\001\002\000\026\004\uff75\076\uff75\077\uff75" +
    "\100\uff75\101\uff75\102\uff75\103\uff75\110\uff75\111\uff75\115" +
    "\uff75\001\002\000\006\122\u025a\123\u0259\001\002\000\004" +
    "\115\u025c\001\002\000\004\115\u025b\001\002\000\026\004" +
    "\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f" +
    "\110\uff7f\111\uff7f\115\uff7f\001\002\000\026\004\uff80\076" +
    "\uff80\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80\110\uff80" +
    "\111\uff80\115\uff80\001\002\000\004\115\u025e\001\002\000" +
    "\026\004\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\uff76" +
    "\103\uff76\110\uff76\111\uff76\115\uff76\001\002\000\004\115" +
    "\u0260\001\002\000\026\004\uff6b\076\uff6b\077\uff6b\100\uff6b" +
    "\101\uff6b\102\uff6b\103\uff6b\110\uff6b\111\uff6b\115\uff6b\001" +
    "\002\000\004\115\u0262\001\002\000\026\004\uff7d\076\uff7d" +
    "\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\110\uff7d\111" +
    "\uff7d\115\uff7d\001\002\000\004\115\u0264\001\002\000\026" +
    "\004\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\102\uff6e\103" +
    "\uff6e\110\uff6e\111\uff6e\115\uff6e\001\002\000\004\115\u0266" +
    "\001\002\000\026\004\uff7c\076\uff7c\077\uff7c\100\uff7c\101" +
    "\uff7c\102\uff7c\103\uff7c\110\uff7c\111\uff7c\115\uff7c\001\002" +
    "\000\004\115\u0268\001\002\000\026\004\uff66\076\uff66\077" +
    "\uff66\100\uff66\101\uff66\102\uff66\103\uff66\110\uff66\111\uff66" +
    "\115\uff66\001\002\000\004\115\u026a\001\002\000\026\004" +
    "\uff72\076\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103\uff72" +
    "\110\uff72\111\uff72\115\uff72\001\002\000\004\115\u026c\001" +
    "\002\000\026\004\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e" +
    "\102\uff7e\103\uff7e\110\uff7e\111\uff7e\115\uff7e\001\002\000" +
    "\004\115\u026e\001\002\000\026\004\uff7b\076\uff7b\077\uff7b" +
    "\100\uff7b\101\uff7b\102\uff7b\103\uff7b\110\uff7b\111\uff7b\115" +
    "\uff7b\001\002\000\004\115\u0270\001\002\000\026\004\uff71" +
    "\076\uff71\077\uff71\100\uff71\101\uff71\102\uff71\103\uff71\110" +
    "\uff71\111\uff71\115\uff71\001\002\000\004\115\u0272\001\002" +
    "\000\026\004\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\102" +
    "\uff6d\103\uff6d\110\uff6d\111\uff6d\115\uff6d\001\002\000\004" +
    "\115\u0274\001\002\000\026\004\uff68\076\uff68\077\uff68\100" +
    "\uff68\101\uff68\102\uff68\103\uff68\110\uff68\111\uff68\115\uff68" +
    "\001\002\000\004\115\u0276\001\002\000\026\004\uff74\076" +
    "\uff74\077\uff74\100\uff74\101\uff74\102\uff74\103\uff74\110\uff74" +
    "\111\uff74\115\uff74\001\002\000\004\115\u0278\001\002\000" +
    "\026\004\uff67\076\uff67\077\uff67\100\uff67\101\uff67\102\uff67" +
    "\103\uff67\110\uff67\111\uff67\115\uff67\001\002\000\004\115" +
    "\u027a\001\002\000\026\004\uff73\076\uff73\077\uff73\100\uff73" +
    "\101\uff73\102\uff73\103\uff73\110\uff73\111\uff73\115\uff73\001" +
    "\002\000\004\115\u027c\001\002\000\026\004\uff6c\076\uff6c" +
    "\077\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c\110\uff6c\111" +
    "\uff6c\115\uff6c\001\002\000\004\115\u027e\001\002\000\026" +
    "\004\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103" +
    "\uff6f\110\uff6f\111\uff6f\115\uff6f\001\002\000\004\115\u0280" +
    "\001\002\000\026\004\uff82\076\uff82\077\uff82\100\uff82\101" +
    "\uff82\102\uff82\103\uff82\110\uff82\111\uff82\115\uff82\001\002" +
    "\000\012\047\u01f4\122\u01f8\155\u01f7\166\u01f9\001\002\000" +
    "\012\047\u01f4\122\u01f8\155\u01f7\166\u01f9\001\002\000\012" +
    "\047\u01f4\122\u01f8\155\u01f7\166\u01f9\001\002\000\012\047" +
    "\u01f4\122\u01f8\155\u01f7\166\u01f9\001\002\000\012\047\u01f4" +
    "\122\u01f8\155\u01f7\166\u01f9\001\002\000\012\047\u01f4\122" +
    "\u01f8\155\u01f7\166\u01f9\001\002\000\012\047\u01f4\122\u01f8" +
    "\155\u01f7\166\u01f9\001\002\000\012\047\u01f4\122\u01f8\155" +
    "\u01f7\166\u01f9\001\002\000\006\004\uffa9\115\uffa9\001\002" +
    "\000\006\004\uffb9\115\uffb9\001\002\000\006\004\uffa2\115" +
    "\uffa2\001\002\000\006\004\uffb2\115\uffb2\001\002\000\006" +
    "\004\uffa8\115\uffa8\001\002\000\006\004\uffb8\115\uffb8\001" +
    "\002\000\006\004\uffa4\115\uffa4\001\002\000\006\004\uffb4" +
    "\115\uffb4\001\002\000\006\004\uffa6\115\uffa6\001\002\000" +
    "\006\004\uffb6\115\uffb6\001\002\000\006\004\uffa7\115\uffa7" +
    "\001\002\000\006\004\uffb7\115\uffb7\001\002\000\006\004" +
    "\uffa3\115\uffa3\001\002\000\006\004\uffb3\115\uffb3\001\002" +
    "\000\006\004\uffa5\115\uffa5\001\002\000\006\004\uffb5\115" +
    "\uffb5\001\002\000\010\003\u0224\054\u0223\144\u0225\001\002" +
    "\000\026\004\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102" +
    "\uff83\103\uff83\110\uff83\111\uff83\115\uff83\001\002\000\012" +
    "\047\u01f4\122\u01f8\155\u01f7\166\u01f9\001\002\000\012\047" +
    "\u01f4\122\u01f8\155\u01f7\166\u01f9\001\002\000\012\047\u01f4" +
    "\122\u01f8\155\u01f7\166\u01f9\001\002\000\012\047\u01f4\122" +
    "\u01f8\155\u01f7\166\u01f9\001\002\000\012\047\u01f4\122\u01f8" +
    "\155\u01f7\166\u01f9\001\002\000\012\047\u01f4\122\u01f8\155" +
    "\u01f7\166\u01f9\001\002\000\012\047\u01f4\122\u01f8\155\u01f7" +
    "\166\u01f9\001\002\000\012\047\u01f4\122\u01f8\155\u01f7\166" +
    "\u01f9\001\002\000\006\004\uff9a\115\uff9a\001\002\000\006" +
    "\004\uffaa\115\uffaa\001\002\000\006\004\uffa1\115\uffa1\001" +
    "\002\000\006\004\uffb1\115\uffb1\001\002\000\006\004\uffa0" +
    "\115\uffa0\001\002\000\006\004\uffb0\115\uffb0\001\002\000" +
    "\006\004\uff9e\115\uff9e\001\002\000\006\004\uffae\115\uffae" +
    "\001\002\000\006\004\uff9c\115\uff9c\001\002\000\006\004" +
    "\uffac\115\uffac\001\002\000\006\004\uff9f\115\uff9f\001\002" +
    "\000\006\004\uffaf\115\uffaf\001\002\000\006\004\uff9b\115" +
    "\uff9b\001\002\000\006\004\uffab\115\uffab\001\002\000\006" +
    "\004\uff9d\115\uff9d\001\002\000\006\004\uffad\115\uffad\001" +
    "\002\000\006\004\u02b5\075\u02b4\001\002\000\006\003\u02b6" +
    "\134\u02b7\001\002\000\126\003\uffe1\005\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1" +
    "\024\uffe1\027\uffe1\032\uffe1\034\uffe1\040\uffe1\047\uffe1\050" +
    "\uffe1\055\uffe1\056\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\067\uffe1\071\uffe1\121\uffe1\122\uffe1\126" +
    "\uffe1\130\uffe1\132\uffe1\147\uffe1\150\uffe1\152\uffe1\153\uffe1" +
    "\154\uffe1\155\uffe1\156\uffe1\157\uffe1\166\uffe1\170\uffe1\001" +
    "\002\000\004\004\u02b9\001\002\000\004\004\u02b8\001\002" +
    "\000\126\003\uffda\005\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\020\uffda\024\uffda\027\uffda" +
    "\032\uffda\034\uffda\040\uffda\047\uffda\050\uffda\055\uffda\056" +
    "\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda" +
    "\067\uffda\071\uffda\121\uffda\122\uffda\126\uffda\130\uffda\132" +
    "\uffda\147\uffda\150\uffda\152\uffda\153\uffda\154\uffda\155\uffda" +
    "\156\uffda\157\uffda\166\uffda\170\uffda\001\002\000\126\003" +
    "\uffd9\005\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\020\uffd9\024\uffd9\027\uffd9\032\uffd9\034" +
    "\uffd9\040\uffd9\047\uffd9\050\uffd9\055\uffd9\056\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\071" +
    "\uffd9\121\uffd9\122\uffd9\126\uffd9\130\uffd9\132\uffd9\147\uffd9" +
    "\150\uffd9\152\uffd9\153\uffd9\154\uffd9\155\uffd9\156\uffd9\157" +
    "\uffd9\166\uffd9\170\uffd9\001\002\000\006\004\u02bc\075\u02bb" +
    "\001\002\000\006\003\u02bd\123\u02be\001\002\000\126\003" +
    "\uffe3\005\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\020\uffe3\024\uffe3\027\uffe3\032\uffe3\034" +
    "\uffe3\040\uffe3\047\uffe3\050\uffe3\055\uffe3\056\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\071" +
    "\uffe3\121\uffe3\122\uffe3\126\uffe3\130\uffe3\132\uffe3\147\uffe3" +
    "\150\uffe3\152\uffe3\153\uffe3\154\uffe3\155\uffe3\156\uffe3\157" +
    "\uffe3\166\uffe3\170\uffe3\001\002\000\004\004\u02c1\001\002" +
    "\000\004\004\uffdf\001\002\000\004\004\u02c0\001\002\000" +
    "\126\003\uffde\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\020\uffde\024\uffde\027\uffde\032" +
    "\uffde\034\uffde\040\uffde\047\uffde\050\uffde\055\uffde\056\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\071\uffde\121\uffde\122\uffde\126\uffde\130\uffde\132\uffde" +
    "\147\uffde\150\uffde\152\uffde\153\uffde\154\uffde\155\uffde\156" +
    "\uffde\157\uffde\166\uffde\170\uffde\001\002\000\126\003\uffdd" +
    "\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\020\uffdd\024\uffdd\027\uffdd\032\uffdd\034\uffdd" +
    "\040\uffdd\047\uffdd\050\uffdd\055\uffdd\056\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\071\uffdd" +
    "\121\uffdd\122\uffdd\126\uffdd\130\uffdd\132\uffdd\147\uffdd\150" +
    "\uffdd\152\uffdd\153\uffdd\154\uffdd\155\uffdd\156\uffdd\157\uffdd" +
    "\166\uffdd\170\uffdd\001\002\000\004\004\uff5f\001\002\000" +
    "\004\004\uff56\001\002\000\004\004\uff58\001\002\000\004" +
    "\004\uff59\001\002\000\004\004\uff57\001\002\000\004\004" +
    "\u02c8\001\002\000\130\002\uff5e\003\uff5e\005\uff5e\010\uff5e" +
    "\011\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e\016\uff5e\020" +
    "\uff5e\024\uff5e\027\uff5e\032\uff5e\034\uff5e\040\uff5e\047\uff5e" +
    "\050\uff5e\055\uff5e\056\uff5e\061\uff5e\062\uff5e\063\uff5e\064" +
    "\uff5e\065\uff5e\066\uff5e\067\uff5e\071\uff5e\121\uff5e\122\uff5e" +
    "\126\uff5e\130\uff5e\132\uff5e\147\uff5e\150\uff5e\152\uff5e\153" +
    "\uff5e\154\uff5e\155\uff5e\156\uff5e\157\uff5e\166\uff5e\170\uff5e" +
    "\001\002\000\006\004\u02cb\075\u02ca\001\002\000\006\003" +
    "\u02cc\127\u02cd\001\002\000\126\003\uffe2\005\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020" +
    "\uffe2\024\uffe2\027\uffe2\032\uffe2\034\uffe2\040\uffe2\047\uffe2" +
    "\050\uffe2\055\uffe2\056\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\071\uffe2\121\uffe2\122\uffe2" +
    "\126\uffe2\130\uffe2\132\uffe2\147\uffe2\150\uffe2\152\uffe2\153" +
    "\uffe2\154\uffe2\155\uffe2\156\uffe2\157\uffe2\166\uffe2\170\uffe2" +
    "\001\002\000\004\004\u02cf\001\002\000\004\004\u02ce\001" +
    "\002\000\126\003\uffdc\005\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc\024\uffdc\027" +
    "\uffdc\032\uffdc\034\uffdc\040\uffdc\047\uffdc\050\uffdc\055\uffdc" +
    "\056\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\067\uffdc\071\uffdc\121\uffdc\122\uffdc\126\uffdc\130\uffdc" +
    "\132\uffdc\147\uffdc\150\uffdc\152\uffdc\153\uffdc\154\uffdc\155" +
    "\uffdc\156\uffdc\157\uffdc\166\uffdc\170\uffdc\001\002\000\126" +
    "\003\uffdb\005\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\020\uffdb\024\uffdb\027\uffdb\032\uffdb" +
    "\034\uffdb\040\uffdb\047\uffdb\050\uffdb\055\uffdb\056\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\071\uffdb\121\uffdb\122\uffdb\126\uffdb\130\uffdb\132\uffdb\147" +
    "\uffdb\150\uffdb\152\uffdb\153\uffdb\154\uffdb\155\uffdb\156\uffdb" +
    "\157\uffdb\166\uffdb\170\uffdb\001\002\000\004\115\u02d1\001" +
    "\002\000\004\004\uff4d\001\002\000\004\004\u02d3\001\002" +
    "\000\130\002\uff4c\003\uff4c\005\uff4c\010\uff4c\011\uff4c\012" +
    "\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\020\uff4c\024\uff4c" +
    "\027\uff4c\032\uff4c\034\uff4c\040\uff4c\047\uff4c\050\uff4c\055" +
    "\uff4c\056\uff4c\061\uff4c\062\uff4c\063\uff4c\064\uff4c\065\uff4c" +
    "\066\uff4c\067\uff4c\071\uff4c\121\uff4c\122\uff4c\126\uff4c\130" +
    "\uff4c\132\uff4c\147\uff4c\150\uff4c\152\uff4c\153\uff4c\154\uff4c" +
    "\155\uff4c\156\uff4c\157\uff4c\166\uff4c\170\uff4c\001\002\000" +
    "\130\002\uff41\003\uff41\005\uff41\010\uff41\011\uff41\012\uff41" +
    "\013\uff41\014\uff41\015\uff41\016\uff41\020\uff41\024\uff41\027" +
    "\uff41\032\uff41\034\uff41\040\uff41\047\uff41\050\uff41\055\uff41" +
    "\056\uff41\061\uff41\062\uff41\063\uff41\064\uff41\065\uff41\066" +
    "\uff41\067\uff41\071\uff41\121\uff41\122\uff41\126\uff41\130\uff41" +
    "\132\uff41\147\uff41\150\uff41\152\uff41\153\uff41\154\uff41\155" +
    "\uff41\156\uff41\157\uff41\166\uff41\170\uff41\001\002\000\004" +
    "\003\u02d6\001\002\000\004\004\u02d7\001\002\000\130\002" +
    "\uffc1\003\uffc1\005\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\020\uffc1\024\uffc1\027\uffc1\032" +
    "\uffc1\034\uffc1\040\uffc1\047\uffc1\050\uffc1\055\uffc1\056\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067" +
    "\uffc1\071\uffc1\121\uffc1\122\uffc1\126\uffc1\130\uffc1\132\uffc1" +
    "\147\uffc1\150\uffc1\152\uffc1\153\uffc1\154\uffc1\155\uffc1\156" +
    "\uffc1\157\uffc1\166\uffc1\170\uffc1\001\002\000\004\075\u02d9" +
    "\001\002\000\004\003\u02da\001\002\000\004\004\u02db\001" +
    "\002\000\130\002\ufeb4\003\ufeb4\005\ufeb4\010\ufeb4\011\ufeb4" +
    "\012\ufeb4\013\ufeb4\014\ufeb4\015\ufeb4\016\ufeb4\020\ufeb4\024" +
    "\ufeb4\027\ufeb4\032\ufeb4\034\ufeb4\040\ufeb4\047\ufeb4\050\ufeb4" +
    "\055\ufeb4\056\ufeb4\061\ufeb4\062\ufeb4\063\ufeb4\064\ufeb4\065" +
    "\ufeb4\066\ufeb4\067\ufeb4\071\ufeb4\121\ufeb4\122\ufeb4\126\ufeb4" +
    "\130\ufeb4\132\ufeb4\147\ufeb4\150\ufeb4\152\ufeb4\153\ufeb4\154" +
    "\ufeb4\155\ufeb4\156\ufeb4\157\ufeb4\166\ufeb4\170\ufeb4\001\002" +
    "\000\010\003\277\123\301\127\302\001\002\000\004\115" +
    "\u02de\001\002\000\004\004\uff43\001\002\000\004\004\u02e0" +
    "\001\002\000\130\002\uff42\003\uff42\005\uff42\010\uff42\011" +
    "\uff42\012\uff42\013\uff42\014\uff42\015\uff42\016\uff42\020\uff42" +
    "\024\uff42\027\uff42\032\uff42\034\uff42\040\uff42\047\uff42\050" +
    "\uff42\055\uff42\056\uff42\061\uff42\062\uff42\063\uff42\064\uff42" +
    "\065\uff42\066\uff42\067\uff42\071\uff42\121\uff42\122\uff42\126" +
    "\uff42\130\uff42\132\uff42\147\uff42\150\uff42\152\uff42\153\uff42" +
    "\154\uff42\155\uff42\156\uff42\157\uff42\166\uff42\170\uff42\001" +
    "\002\000\126\003\055\005\045\010\022\011\054\012\104" +
    "\013\103\014\101\015\100\016\064\020\072\024\030\027" +
    "\026\032\062\034\073\040\034\047\075\050\021\055\105" +
    "\056\042\061\051\062\047\063\052\064\076\065\106\066" +
    "\050\067\053\071\023\121\060\122\074\126\063\130\044" +
    "\132\035\147\043\150\031\152\067\153\041\154\024\155" +
    "\077\156\061\157\046\166\027\170\056\001\002\000\004" +
    "\002\uffee\001\002\000\126\003\055\005\045\010\022\011" +
    "\054\012\104\013\103\014\101\015\100\016\064\020\072" +
    "\024\030\027\026\032\062\034\073\040\034\047\075\050" +
    "\021\055\105\056\042\061\051\062\047\063\052\064\076" +
    "\065\106\066\050\067\053\071\023\121\060\122\074\126" +
    "\063\130\044\132\035\147\043\150\031\152\067\153\041" +
    "\154\024\155\077\156\061\157\046\166\027\170\056\001" +
    "\002\000\004\002\uffea\001\002\000\004\075\u02e6\001\002" +
    "\000\004\003\u02e7\001\002\000\004\004\u02e8\001\002\000" +
    "\130\002\ufeb2\003\ufeb2\005\ufeb2\010\ufeb2\011\ufeb2\012\ufeb2" +
    "\013\ufeb2\014\ufeb2\015\ufeb2\016\ufeb2\020\ufeb2\024\ufeb2\027" +
    "\ufeb2\032\ufeb2\034\ufeb2\040\ufeb2\047\ufeb2\050\ufeb2\055\ufeb2" +
    "\056\ufeb2\061\ufeb2\062\ufeb2\063\ufeb2\064\ufeb2\065\ufeb2\066" +
    "\ufeb2\067\ufeb2\071\ufeb2\121\ufeb2\122\ufeb2\126\ufeb2\130\ufeb2" +
    "\132\ufeb2\147\ufeb2\150\ufeb2\152\ufeb2\153\ufeb2\154\ufeb2\155" +
    "\ufeb2\156\ufeb2\157\ufeb2\166\ufeb2\170\ufeb2\001\002\000\004" +
    "\075\u02ea\001\002\000\004\003\u02eb\001\002\000\004\004" +
    "\u02ec\001\002\000\130\002\ufeba\003\ufeba\005\ufeba\010\ufeba" +
    "\011\ufeba\012\ufeba\013\ufeba\014\ufeba\015\ufeba\016\ufeba\020" +
    "\ufeba\024\ufeba\027\ufeba\032\ufeba\034\ufeba\040\ufeba\047\ufeba" +
    "\050\ufeba\055\ufeba\056\ufeba\061\ufeba\062\ufeba\063\ufeba\064" +
    "\ufeba\065\ufeba\066\ufeba\067\ufeba\071\ufeba\121\ufeba\122\ufeba" +
    "\126\ufeba\130\ufeba\132\ufeba\147\ufeba\150\ufeba\152\ufeba\153" +
    "\ufeba\154\ufeba\155\ufeba\156\ufeba\157\ufeba\166\ufeba\170\ufeba" +
    "\001\002\000\004\123\u02ee\001\002\000\004\115\u02ef\001" +
    "\002\000\004\004\uff51\001\002\000\004\004\u02f1\001\002" +
    "\000\130\002\uff50\003\uff50\005\uff50\010\uff50\011\uff50\012" +
    "\uff50\013\uff50\014\uff50\015\uff50\016\uff50\020\uff50\024\uff50" +
    "\027\uff50\032\uff50\034\uff50\040\uff50\047\uff50\050\uff50\055" +
    "\uff50\056\uff50\061\uff50\062\uff50\063\uff50\064\uff50\065\uff50" +
    "\066\uff50\067\uff50\071\uff50\121\uff50\122\uff50\126\uff50\130" +
    "\uff50\132\uff50\147\uff50\150\uff50\152\uff50\153\uff50\154\uff50" +
    "\155\uff50\156\uff50\157\uff50\166\uff50\170\uff50\001\002\000" +
    "\004\075\u02f3\001\002\000\004\003\u02f4\001\002\000\004" +
    "\004\u02f5\001\002\000\130\002\ufec0\003\ufec0\005\ufec0\010" +
    "\ufec0\011\ufec0\012\ufec0\013\ufec0\014\ufec0\015\ufec0\016\ufec0" +
    "\020\ufec0\024\ufec0\027\ufec0\032\ufec0\034\ufec0\040\ufec0\047" +
    "\ufec0\050\ufec0\055\ufec0\056\ufec0\061\ufec0\062\ufec0\063\ufec0" +
    "\064\ufec0\065\ufec0\066\ufec0\067\ufec0\071\ufec0\121\ufec0\122" +
    "\ufec0\126\ufec0\130\ufec0\132\ufec0\147\ufec0\150\ufec0\152\ufec0" +
    "\153\ufec0\154\ufec0\155\ufec0\156\ufec0\157\ufec0\166\ufec0\170" +
    "\ufec0\001\002\000\070\003\245\017\257\021\251\022\237" +
    "\023\244\025\235\026\241\030\255\031\260\033\250\035" +
    "\252\036\231\037\227\041\236\042\234\043\253\044\243" +
    "\051\226\052\246\053\254\054\242\133\256\136\233\137" +
    "\232\140\230\141\240\144\225\001\002\000\130\002\uff4f" +
    "\003\uff4f\005\uff4f\010\uff4f\011\uff4f\012\uff4f\013\uff4f\014" +
    "\uff4f\015\uff4f\016\uff4f\020\uff4f\024\uff4f\027\uff4f\032\uff4f" +
    "\034\uff4f\040\uff4f\047\uff4f\050\uff4f\055\uff4f\056\uff4f\061" +
    "\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f\066\uff4f\067\uff4f" +
    "\071\uff4f\121\uff4f\122\uff4f\126\uff4f\130\uff4f\132\uff4f\147" +
    "\uff4f\150\uff4f\152\uff4f\153\uff4f\154\uff4f\155\uff4f\156\uff4f" +
    "\157\uff4f\166\uff4f\170\uff4f\001\002\000\004\075\u02f9\001" +
    "\002\000\004\003\u02fa\001\002\000\004\004\u02fb\001\002" +
    "\000\130\002\ufebe\003\ufebe\005\ufebe\010\ufebe\011\ufebe\012" +
    "\ufebe\013\ufebe\014\ufebe\015\ufebe\016\ufebe\020\ufebe\024\ufebe" +
    "\027\ufebe\032\ufebe\034\ufebe\040\ufebe\047\ufebe\050\ufebe\055" +
    "\ufebe\056\ufebe\061\ufebe\062\ufebe\063\ufebe\064\ufebe\065\ufebe" +
    "\066\ufebe\067\ufebe\071\ufebe\121\ufebe\122\ufebe\126\ufebe\130" +
    "\ufebe\132\ufebe\147\ufebe\150\ufebe\152\ufebe\153\ufebe\154\ufebe" +
    "\155\ufebe\156\ufebe\157\ufebe\166\ufebe\170\ufebe\001\002\000" +
    "\126\003\055\005\045\010\022\011\054\012\104\013\103" +
    "\014\101\015\100\016\064\020\072\024\030\027\026\032" +
    "\062\034\073\040\034\047\075\050\021\055\105\056\042" +
    "\061\051\062\047\063\052\064\076\065\106\066\050\067" +
    "\053\071\023\121\060\122\074\126\063\130\044\132\035" +
    "\147\043\150\031\152\067\153\041\154\024\155\077\156" +
    "\061\157\046\166\027\170\056\001\002\000\004\002\ufff2" +
    "\001\002\000\004\115\u02ff\001\002\000\004\004\uff47\001" +
    "\002\000\004\004\u0301\001\002\000\130\002\uff46\003\uff46" +
    "\005\uff46\010\uff46\011\uff46\012\uff46\013\uff46\014\uff46\015" +
    "\uff46\016\uff46\020\uff46\024\uff46\027\uff46\032\uff46\034\uff46" +
    "\040\uff46\047\uff46\050\uff46\055\uff46\056\uff46\061\uff46\062" +
    "\uff46\063\uff46\064\uff46\065\uff46\066\uff46\067\uff46\071\uff46" +
    "\121\uff46\122\uff46\126\uff46\130\uff46\132\uff46\147\uff46\150" +
    "\uff46\152\uff46\153\uff46\154\uff46\155\uff46\156\uff46\157\uff46" +
    "\166\uff46\170\uff46\001\002\000\132\002\uffbc\003\uffbc\005" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\020\uffbc\024\uffbc\027\uffbc\032\uffbc\034\uffbc\040" +
    "\uffbc\047\uffbc\050\uffbc\055\uffbc\056\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\071\uffbc\115" +
    "\u030d\121\uffbc\122\uffbc\126\uffbc\130\uffbc\132\uffbc\147\uffbc" +
    "\150\uffbc\152\uffbc\153\uffbc\154\uffbc\155\uffbc\156\uffbc\157" +
    "\uffbc\166\uffbc\170\uffbc\001\002\000\014\003\u0305\047\u01f4" +
    "\122\u01f8\155\u01f7\166\u01f9\001\002\000\130\002\uffc0\003" +
    "\uffc0\005\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\020\uffc0\024\uffc0\027\uffc0\032\uffc0\034" +
    "\uffc0\040\uffc0\047\uffc0\050\uffc0\055\uffc0\056\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\071" +
    "\uffc0\121\uffc0\122\uffc0\126\uffc0\130\uffc0\132\uffc0\147\uffc0" +
    "\150\uffc0\152\uffc0\153\uffc0\154\uffc0\155\uffc0\156\uffc0\157" +
    "\uffc0\166\uffc0\170\uffc0\001\002\000\010\003\u0309\115\uff98" +
    "\120\u030a\001\002\000\004\115\u0307\001\002\000\006\003" +
    "\u0309\120\u030a\001\002\000\130\002\uffbf\003\uffbf\005\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\020\uffbf\024\uffbf\027\uffbf\032\uffbf\034\uffbf\040\uffbf" +
    "\047\uffbf\050\uffbf\055\uffbf\056\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\071\uffbf\121\uffbf" +
    "\122\uffbf\126\uffbf\130\uffbf\132\uffbf\147\uffbf\150\uffbf\152" +
    "\uffbf\153\uffbf\154\uffbf\155\uffbf\156\uffbf\157\uffbf\166\uffbf" +
    "\170\uffbf\001\002\000\130\002\uffba\003\uffba\005\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\020\uffba\024\uffba\027\uffba\032\uffba\034\uffba\040\uffba\047" +
    "\uffba\050\uffba\055\uffba\056\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\065\uffba\066\uffba\067\uffba\071\uffba\121\uffba\122" +
    "\uffba\126\uffba\130\uffba\132\uffba\147\uffba\150\uffba\152\uffba" +
    "\153\uffba\154\uffba\155\uffba\156\uffba\157\uffba\166\uffba\170" +
    "\uffba\001\002\000\110\003\u0205\005\045\010\022\011\054" +
    "\012\104\013\103\014\101\015\100\016\064\020\072\024" +
    "\030\027\026\032\062\034\073\040\034\047\075\050\021" +
    "\055\105\056\042\065\106\066\050\071\023\121\u0207\122" +
    "\074\126\u0208\132\035\147\u0203\150\031\152\067\153\041" +
    "\154\024\155\077\156\061\157\046\166\027\001\002\000" +
    "\130\002\uffbb\003\uffbb\005\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\024\uffbb\027" +
    "\uffbb\032\uffbb\034\uffbb\040\uffbb\047\uffbb\050\uffbb\055\uffbb" +
    "\056\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\071\uffbb\121\uffbb\122\uffbb\126\uffbb\130\uffbb" +
    "\132\uffbb\147\uffbb\150\uffbb\152\uffbb\153\uffbb\154\uffbb\155" +
    "\uffbb\156\uffbb\157\uffbb\166\uffbb\170\uffbb\001\002\000\130" +
    "\002\uffbd\003\uffbd\005\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd\024\uffbd\027\uffbd" +
    "\032\uffbd\034\uffbd\040\uffbd\047\uffbd\050\uffbd\055\uffbd\056" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\071\uffbd\121\uffbd\122\uffbd\126\uffbd\130\uffbd\132" +
    "\uffbd\147\uffbd\150\uffbd\152\uffbd\153\uffbd\154\uffbd\155\uffbd" +
    "\156\uffbd\157\uffbd\166\uffbd\170\uffbd\001\002\000\006\003" +
    "\u0309\120\u030a\001\002\000\130\002\uffbe\003\uffbe\005\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\020\uffbe\024\uffbe\027\uffbe\032\uffbe\034\uffbe\040\uffbe" +
    "\047\uffbe\050\uffbe\055\uffbe\056\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\071\uffbe\121\uffbe" +
    "\122\uffbe\126\uffbe\130\uffbe\132\uffbe\147\uffbe\150\uffbe\152" +
    "\uffbe\153\uffbe\154\uffbe\155\uffbe\156\uffbe\157\uffbe\166\uffbe" +
    "\170\uffbe\001\002\000\004\075\u0310\001\002\000\004\003" +
    "\u0311\001\002\000\004\004\u0312\001\002\000\130\002\ufeb0" +
    "\003\ufeb0\005\ufeb0\010\ufeb0\011\ufeb0\012\ufeb0\013\ufeb0\014" +
    "\ufeb0\015\ufeb0\016\ufeb0\020\ufeb0\024\ufeb0\027\ufeb0\032\ufeb0" +
    "\034\ufeb0\040\ufeb0\047\ufeb0\050\ufeb0\055\ufeb0\056\ufeb0\061" +
    "\ufeb0\062\ufeb0\063\ufeb0\064\ufeb0\065\ufeb0\066\ufeb0\067\ufeb0" +
    "\071\ufeb0\121\ufeb0\122\ufeb0\126\ufeb0\130\ufeb0\132\ufeb0\147" +
    "\ufeb0\150\ufeb0\152\ufeb0\153\ufeb0\154\ufeb0\155\ufeb0\156\ufeb0" +
    "\157\ufeb0\166\ufeb0\170\ufeb0\001\002\000\004\075\u0314\001" +
    "\002\000\004\003\u0315\001\002\000\004\004\u0316\001\002" +
    "\000\130\002\ufec4\003\ufec4\005\ufec4\010\ufec4\011\ufec4\012" +
    "\ufec4\013\ufec4\014\ufec4\015\ufec4\016\ufec4\020\ufec4\024\ufec4" +
    "\027\ufec4\032\ufec4\034\ufec4\040\ufec4\047\ufec4\050\ufec4\055" +
    "\ufec4\056\ufec4\061\ufec4\062\ufec4\063\ufec4\064\ufec4\065\ufec4" +
    "\066\ufec4\067\ufec4\071\ufec4\121\ufec4\122\ufec4\126\ufec4\130" +
    "\ufec4\132\ufec4\147\ufec4\150\ufec4\152\ufec4\153\ufec4\154\ufec4" +
    "\155\ufec4\156\ufec4\157\ufec4\166\ufec4\170\ufec4\001\002\000" +
    "\126\003\055\005\045\010\022\011\054\012\104\013\103" +
    "\014\101\015\100\016\064\020\072\024\030\027\026\032" +
    "\062\034\073\040\034\047\075\050\021\055\105\056\042" +
    "\061\051\062\047\063\052\064\076\065\106\066\050\067" +
    "\053\071\023\121\060\122\074\126\063\130\044\132\035" +
    "\147\043\150\031\152\067\153\041\154\024\155\077\156" +
    "\061\157\046\166\027\170\056\001\002\000\004\002\ufffd" +
    "\001\002\000\012\003\004\122\007\126\005\130\006\001" +
    "\002\000\004\002\ufff7\001\002\000\012\003\004\122\007" +
    "\126\005\130\006\001\002\000\004\002\ufff9\001\002\000" +
    "\012\003\004\122\007\126\005\130\006\001\002\000\004" +
    "\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u031c\000\004\002\007\001\001\000\004\046\u031c\001" +
    "\001\000\004\047\u031a\001\001\000\004\050\u0318\001\001" +
    "\000\004\044\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u0316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\032\004\037\005\031\006\101\014\065" +
    "\017\070\024\056\027\064\035\067\036\024\037\035\042" +
    "\036\001\001\000\004\151\u0312\001\001\000\004\163\u030e" +
    "\001\001\000\004\031\u0303\001\001\000\002\001\001\000" +
    "\004\052\u02fb\001\001\000\004\154\u02f7\001\001\000\002" +
    "\001\001\000\004\153\u02f1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\156\u02e8\001\001" +
    "\000\004\162\u02e4\001\001\000\002\001\001\000\004\056" +
    "\u02e2\001\001\000\004\054\u02e0\001\001\000\002\001\001" +
    "\000\004\161\u02d7\001\001\000\004\064\u02d4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u02c1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\164\u01e4\001\001" +
    "\000\006\053\u01e0\062\u01e1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\155\u01ce\001\001\000\004\063\u01cb\001\001\000\004\172" +
    "\u01c7\001\001\000\004\055\u01c5\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u01be\001\001\000\002\001" +
    "\001\000\004\152\u01ba\001\001\000\004\171\u01b6\001\001" +
    "\000\002\001\001\000\004\157\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\150\170\170\172\001\001" +
    "\000\006\147\160\167\156\001\001\000\002\001\001\000" +
    "\006\146\146\166\144\001\001\000\006\145\130\165\126" +
    "\001\001\000\004\160\122\001\001\000\002\001\001\000" +
    "\004\025\112\001\001\000\004\077\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\144\u014d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\124\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\111\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\114\u0120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\140\u0132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\133\u0136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\126\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\113\u0140\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\112\u0143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\u0147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\137" +
    "\u014b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\u0151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\134\u0155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\u0159\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\115\u015d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\143\u0161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\117\u0165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\131\u0169\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\116\u016d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\132\u0171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\135\u0175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\141\u0179\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\127\u017d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\142\u0181\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\130" +
    "\u0185\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\136\u0189\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\u018d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\u01bf\004\037\005\031\006\101\014\065" +
    "\017\070\024\056\027\064\035\067\036\024\037\035\042" +
    "\036\001\001\000\002\001\001\000\004\021\u01c1\001\001" +
    "\000\002\001\001\000\004\105\u01c3\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\u01c6\004\037\005\031" +
    "\006\101\014\065\017\070\024\056\027\064\035\067\036" +
    "\024\037\035\042\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u01d4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\u01db\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\u01de\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\u01e3\004\037\005\031\006\101\014\065\017" +
    "\070\024\056\027\064\035\067\036\024\037\035\042\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u01ec\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\u01f5\030\u01f9\033\u01f2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u0200\001\001\000\002" +
    "\001\001\000\016\005\u0201\014\u0209\017\u020a\024\u0205\027" +
    "\u0208\034\u0203\001\001\000\002\001\001\000\004\065\u021e" +
    "\001\001\000\004\074\u021b\001\001\000\002\001\001\000" +
    "\004\072\u0218\001\001\000\004\070\u0216\001\001\000\002" +
    "\001\001\000\004\073\u0211\001\001\000\004\071\u020f\001" +
    "\001\000\004\066\u020d\001\001\000\004\067\u020b\001\001" +
    "\000\016\005\u0201\014\u0209\017\u020a\024\u0205\027\u0208\034" +
    "\u020c\001\001\000\002\001\001\000\016\005\u0201\014\u0209" +
    "\017\u020a\024\u0205\027\u0208\034\u020e\001\001\000\002\001" +
    "\001\000\016\005\u0201\014\u0209\017\u020a\024\u0205\027\u0208" +
    "\034\u0210\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\u0201\014\u0209\017\u020a\024\u0205\027\u0208\034\u0213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\u0201\014\u0209\017\u020a\024\u0205\027\u0208" +
    "\034\u0217\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\u0201\014\u0209\017\u020a\024\u0205\027\u0208\034\u021a" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\u0201\014\u0209\017\u020a\024\u0205\027\u0208\034\u021d\001\001" +
    "\000\002\001\001\000\016\005\u0201\014\u0209\017\u020a\024" +
    "\u0205\027\u0208\034\u021f\001\001\000\002\001\001\000\004" +
    "\041\u0221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\u0297\033\u0296" +
    "\001\001\000\006\007\u0295\033\u0294\001\001\000\006\007" +
    "\u0293\033\u0292\001\001\000\006\007\u0291\033\u0290\001\001" +
    "\000\006\007\u028f\033\u028e\001\001\000\006\007\u028d\033" +
    "\u028c\001\001\000\006\007\u028b\033\u028a\001\001\000\006" +
    "\007\u0289\033\u0288\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u0299\001\001\000\002" +
    "\001\001\000\006\007\u02b1\033\u02b0\001\001\000\006\007" +
    "\u02af\033\u02ae\001\001\000\006\007\u02ad\033\u02ac\001\001" +
    "\000\006\007\u02ab\033\u02aa\001\001\000\006\007\u02a9\033" +
    "\u02a8\001\001\000\006\007\u02a7\033\u02a6\001\001\000\006" +
    "\007\u02a5\033\u02a4\001\001\000\006\007\u02a3\033\u02a2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u02be\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\075" +
    "\u02c6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\u02d1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u02dc\001\001\000\002\001\001\000\004" +
    "\106\u02de\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\u02e1\004\037\005\031\006\101\014\065\017\070" +
    "\024\056\027\064\035\067\036\024\037\035\042\036\001" +
    "\001\000\002\001\001\000\032\003\u02e3\004\037\005\031" +
    "\006\101\014\065\017\070\024\056\027\064\035\067\036" +
    "\024\037\035\042\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\u02ef\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u02f6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\u02fc\004\037\005\031\006\101" +
    "\014\065\017\070\024\056\027\064\035\067\036\024\037" +
    "\035\042\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\104\u02ff\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\u01f5\030\u0305\033\u01f2" +
    "\001\001\000\002\001\001\000\004\032\u030b\001\001\000" +
    "\002\001\001\000\004\032\u0307\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\u0201\014\u0209\017\u020a\024" +
    "\u0205\027\u0208\034\u030a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u030d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\u0317\004\037\005\031" +
    "\006\101\014\065\017\070\024\056\027\064\035\067\036" +
    "\024\037\035\042\036\001\001\000\002\001\001\000\004" +
    "\002\u0319\001\001\000\002\001\001\000\004\002\u031b\001" +
    "\001\000\002\001\001\000\004\002\u031d\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    int idenx; // num de fila
  //  Hashtable<String, Lexema> tabla = new Hashtable<>();
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // OBJ_PARAMETROS ::= PortD Parentesis_izq Identificador NT$117 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$117
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // NT$117 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortD ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$117",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // OBJ_PARAMETROS ::= PortC Parentesis_izq Identificador NT$116 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$116
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // NT$116 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortC ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$116",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // OBJ_PARAMETROS ::= PortB Parentesis_izq Identificador NT$115 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$115
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // NT$115 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortB ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$115",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // OBJ_PARAMETROS ::= PortA Parentesis_izq Identificador NT$114 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$114
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // NT$114 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$114",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // OBJ_PARAMETROS ::= PortD Parentesis_izq Numero_Entero NT$113 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$113
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // NT$113 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortD ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$113",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // OBJ_PARAMETROS ::= PortC Parentesis_izq Numero_Entero NT$112 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$112
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // NT$112 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortC ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$112",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // OBJ_PARAMETROS ::= PortB Parentesis_izq Numero_Entero NT$111 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$111
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // NT$111 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortB ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$111",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // OBJ_PARAMETROS ::= PortA Parentesis_izq Numero_Entero NT$110 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$110
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // NT$110 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$110",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // OBJETO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> OBJETO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // OBJETO ::= SmartCamera NT$109 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$109
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // NT$109 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$109",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // OBJETO ::= Device NT$108 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$108
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // NT$108 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Device error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$108",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // OBJETO ::= Alarm NT$107 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$107
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // NT$107 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Alarm error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$107",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // OBJETO ::= Camera NT$106 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$106
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // NT$106 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Camera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$106",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // OBJETO ::= Window NT$105 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$105
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // NT$105 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Window error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$105",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // OBJETO ::= Door NT$104 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$104
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // NT$104 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Door error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$104",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // OBJETO ::= LightRGB NT$103 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$103
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // NT$103 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ LightRGB error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$103",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // OBJETO ::= Light NT$102 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$102
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // NT$102 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Light error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$102",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // OBJETO ::= Ac NT$101 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$101
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // NT$101 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Ac error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$101",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // OBJETO ::= Temp NT$100 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$100
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // NT$100 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$100",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // OBJETO ::= SmartCamera NT$99 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$99
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // NT$99 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$99",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // OBJETO ::= Device NT$98 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$98
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // NT$98 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Device( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$98",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // OBJETO ::= Alarm NT$97 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$97
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // NT$97 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Alarm( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$97",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // OBJETO ::= Camera NT$96 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$96
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // NT$96 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Camera( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$96",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // OBJETO ::= Window NT$95 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$95
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // NT$95 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Window( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$95",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // OBJETO ::= Door NT$94 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$94
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // NT$94 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Door( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$94",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // OBJETO ::= LightRGB NT$93 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$93
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // NT$93 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ LightRGB( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$93",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // OBJETO ::= Light NT$92 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$92
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // NT$92 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Light( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$92",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // OBJETO ::= Ac NT$91 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$91
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // NT$91 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Ac( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$91",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // OBJETO ::= Temp NT$90 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$90
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // NT$90 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$90",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // DEC_OBJETO ::= error NT$89 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$89
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // NT$89 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$89",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // DEC_OBJETO ::= New NT$88 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$88
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // NT$88 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New OBJETO ; ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$88",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // EXP_LIST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LIST",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // DECL_TIPO ::= error NT$87 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$87
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // NT$87 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$87",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // DECL_TIPO ::= DEC_OBJETO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ DEC_OBJETO ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // DECL_TIPO ::= EXP_LIST 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ EXP_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // DECL ::= Enable NT$86 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$86
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // NT$86 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$86",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // DECL ::= New NT$85 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$85
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // NT$85 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$85",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // DECL ::= PortD NT$84 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$84
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // NT$84 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$84",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // DECL ::= PortC NT$83 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$83
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // NT$83 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$83",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // DECL ::= PortB NT$82 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // NT$82 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$82",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // DECL ::= PortA NT$81 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // NT$81 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$81",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // DECL ::= Initialize NT$80 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$80
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // NT$80 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$80",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // DECL ::= Home NT$79 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$79
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // NT$79 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$79",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // DECL ::= SmartCamera NT$78 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // NT$78 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$78",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // DECL ::= Device NT$77 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // NT$77 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$77",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // DECL ::= Alarm NT$76 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // NT$76 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$76",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // DECL ::= Camera NT$75 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // NT$75 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$75",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // DECL ::= Window NT$74 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // NT$74 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$74",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // DECL ::= Door NT$73 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // NT$73 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$73",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // DECL ::= LightRGB NT$72 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // NT$72 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$72",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // DECL ::= Light NT$71 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // NT$71 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$71",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // DECL ::= Ac NT$70 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // NT$70 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$70",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // DECL ::= Temp NT$69 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // NT$69 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$69",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // DECL ::= Identificador Asignacion Identificador Suma Identificador PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");
              if(Main.buscarid(s+"")  ){//si primer id existe
               System.out.println("id existe");
               if(Main.buscarid(a+"") ) { //si 2do id existe
                    if(Main.buscarid(b+"") ) { //si 3er id existe
                if((Main.returntipo(s+"") == Main.returntipo(s+""))  ){// son compatible?
                  Main.listaIdTipo.add(Main.removeid(s+""));
                  Main.listaIdValor.add(s+"");
                  Main.listaIdLinea.add((sright+1));
                  Main.listaValoresId.add(a+"");
                System.out.println("tipo");
              }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera "+(Main.returntipo(s+""))); 
                 Main.error = true; 
            }
                }else{  
                        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+b+" no declarada  en: " ); 
                        Main.error = true; 
                    }
           
                 }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+a+" no declarada  en: " ); 
                    Main.error = true; 
                 
                }
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                     Main.error = true; 
                }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // DECL ::= Identificador Asignacion Identificador PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");
              if(Main.buscarid(s+"")  ){//si primer id existe
               System.out.println("id existe");
               if(Main.buscarid(a+"") ) { //si 2do id existe
                if((Main.returntipo(s+"") == Main.returntipo(s+""))  ){// son compatible?
                  Main.listaIdTipo.add(Main.removeid(s+""));
                  Main.listaIdValor.add(s+"");
                  Main.listaIdLinea.add((sright+1));
                  Main.listaValoresId.add(a+"");
                System.out.println("tipo");
              }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera "+(Main.returntipo(s+""))); 
                 Main.error = true; 
            }
                }else{  
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+a+" no declarada  en: " ); 
                    Main.error = true; 
                    }
           
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
                }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // DECL ::= Identificador Asignacion False PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");
            if(Main.buscarid(s+"")  ){
               System.out.println("id existe");
            if(Main.returntipo(s+"").equals("Bool")) {
          Main.listaIdTipo.add(Main.removeid(s+""));
          Main.listaIdValor.add(s+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
          System.out.println("tipo");
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera True o False "); 
                 Main.error = true; 
            }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // DECL ::= Identificador Asignacion True PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");
            if(Main.buscarid(s+"")  ){
               System.out.println("id existe");
            if(Main.returntipo(s+"").equals("Bool")) {
          Main.listaIdTipo.add(Main.removeid(s+""));
          Main.listaIdValor.add(s+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
          System.out.println("tipo");
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera True o False  "); 
                 Main.error = true; 
            }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // DECL ::= Identificador Asignacion error Suma Numero_Flotante PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" Suma error PComa ]\n");
            if((Main.buscarid(s+""))  ){ //sino encuentro id: print tipo incompatible, si: variable no declarada
                    System.out.println("id existe "+s);
                    System.out.println("error1 "+s);
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros Reales "); 
                    Main.error = true; 
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
System.out.println("error2 "+s);
            }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // DECL ::= Identificador Asignacion Numero_Flotante Suma error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" Suma error PComa ]\n");
            if((Main.buscarid(s+""))  ){ //sino encuentro id: print tipo incompatible, si: variable no declarada
                    System.out.println("id existe "+s);
                    System.out.println("error1 "+s);
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros Reales "); 
                    Main.error = true; 
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
System.out.println("error2 "+s);
            }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // DECL ::= Identificador Asignacion Numero_Flotante Suma Numero_Flotante PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" Suma "+b+" PComa ]\n");
            if(Main.buscarid(s+"")  ){
                System.out.println("id existe");
            if(Main.returntipo(s+"").equals("Float")) {
          Main.listaIdTipo.add(Main.removeid(s+""));
          Main.listaIdValor.add(s+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+" + "+b);
          System.out.println("tipo");
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros Reales "); 
                 Main.error = true; 
            }
        }else{
           Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
           Main.error = true; 
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // DECL ::= Identificador Asignacion Numero_Flotante PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");
            if(Main.buscarid(s+"")  ){
               System.out.println("id existe");
            if(Main.returntipo(s+"").equals("Float")) {
          Main.listaIdTipo.add(Main.removeid(s+""));
          Main.listaIdValor.add(s+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
          System.out.println("tipo");
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros Reales "); 
                 Main.error = true; 
            }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // DECL ::= Identificador Asignacion error Suma Cadena PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" Suma error PComa ]\n");
            if((Main.buscarid(s+""))  ){ //sino encuentro id: print tipo incompatible, si: variable no declarada
                    System.out.println("id existe "+s);
                    System.out.println("error1 "+s);
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Cadenas "); 
                    Main.error = true; 
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
System.out.println("error2 "+s);
            }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // DECL ::= Identificador Asignacion Cadena Suma error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" Suma error PComa ]\n");
            if((Main.buscarid(s+""))  ){ //sino encuentro id: print tipo incompatible, si: variable no declarada
                    System.out.println("id existe "+s);
                    System.out.println("error1 "+s);
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Cadenas "); 
                    Main.error = true; 
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
System.out.println("error2 "+s);
            }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // DECL ::= Identificador Asignacion Cadena Suma Cadena PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" Suma "+b+" PComa ]\n");
            if(Main.buscarid(s+"")  ){
                System.out.println("id existe");
            if(Main.returntipo(s+"").equals("Text")) {
          Main.listaIdTipo.add(Main.removeid(s+""));
          Main.listaIdValor.add(s+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+" + "+b);
          System.out.println("tipo");
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Cadenas "); 
                 Main.error = true; 
            }
        }else{
           Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
           Main.error = true; 
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // DECL ::= Identificador Asignacion Cadena PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");
            if(Main.buscarid(s+"")  ){
               System.out.println("id existe");
            if(Main.returntipo(s+"").equals("Text")) {
          Main.listaIdTipo.add(Main.removeid(s+""));
          Main.listaIdValor.add(s+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
          System.out.println("tipo");
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Cadenas "); 
                 Main.error = true; 
            }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // DECL ::= Identificador Asignacion error Suma Numero_Entero PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" Suma error PComa ]\n");
            if((Main.buscarid(s+""))  ){ //sino encuentro id: print tipo incompatible, si: variable no declarada
                    System.out.println("id existe "+s);
                    System.out.println("error1 "+s);
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros Enteros "); 
                    Main.error = true; 
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
System.out.println("error2 "+s);
            }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // DECL ::= Identificador Asignacion Numero_Entero Suma error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" Suma error PComa ]\n");
            if((Main.buscarid(s+""))  ){ //sino encuentro id: print tipo incompatible, si: variable no declarada
                    System.out.println("id existe "+s);
                    System.out.println("error1 "+s);
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros Enteros "); 
                    Main.error = true; 
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
System.out.println("error2 "+s);
            }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // DECL ::= Identificador Asignacion Numero_Entero Suma Numero_Entero PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" Suma "+b+" PComa ]\n");
            if(Main.buscarid(s+"")  ){
             System.out.println("id existe");
            if(Main.returntipo(s+"").equals("Int")) {
          Main.listaIdTipo.add(Main.removeid(s+""));
          Main.listaIdValor.add(s+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+" + "+b);
                 System.out.println("tipo");
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros Enteros "); 
                    Main.error = true; 
            }
        }else{
           Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
          Main.error = true; 

        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // DECL ::= Identificador Asignacion Numero_Entero PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");
            if(Main.buscarid(s+"")  ){
             System.out.println("id existe");
            if(Main.returntipo(s+"").equals("Int")) {
          Main.listaIdTipo.add(Main.removeid(s+""));
          Main.listaIdValor.add(s+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
            System.out.println("tipo");
            }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros Enteros "); 
                    Main.error = true; 
            }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ENA_PORT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ENA_PORT ::= Enable Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ Enable() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ACT_PORT ::= PortD error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ACT_PORT ::= PortC error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortC => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ACT_PORT ::= PortB error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortB => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ACT_PORT ::= PortA error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortA => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ACT_PORT ::= PortD NT$68 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // NT$68 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$68",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ACT_PORT ::= PortC NT$67 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NT$67 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortC => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$67",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ACT_PORT ::= PortB NT$66 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NT$66 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortB => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$66",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ACT_PORT ::= PortA NT$65 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NT$65 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortA => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$65",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // THIS_FUNC_TYPE ::= DeleteFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ DeleteFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // THIS_FUNC_TYPE ::= SaveFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ SaveFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // THIS_FUNC_TYPE ::= FaceCheck Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ FaceCheck() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // THIS_FUNC_TYPE ::= Move Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // THIS_FUNC_TYPE ::= Move Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // THIS_FUNC_TYPE ::= StopRec Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ StopRec() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // THIS_FUNC_TYPE ::= Record Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Record() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // THIS_FUNC_TYPE ::= Doorbell Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Doorbell() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // THIS_FUNC_TYPE ::= IsUnlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsUnlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // THIS_FUNC_TYPE ::= IsLock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsLock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // THIS_FUNC_TYPE ::= IsClose Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsClose() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // THIS_FUNC_TYPE ::= IsOpen Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsOpen() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // THIS_FUNC_TYPE ::= Unlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Unlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // THIS_FUNC_TYPE ::= Lock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Lock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // THIS_FUNC_TYPE ::= Close Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Close() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // THIS_FUNC_TYPE ::= Open Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Open() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // THIS_FUNC_TYPE ::= Color Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Color("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // THIS_FUNC_TYPE ::= LightMode Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ LightMode("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // THIS_FUNC_TYPE ::= Color Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Color("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // THIS_FUNC_TYPE ::= LightMode Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ LightMode("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // THIS_FUNC_TYPE ::= Off Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Off() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // THIS_FUNC_TYPE ::= On Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ On() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // THIS_FUNC_TYPE ::= Set Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Set("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // THIS_FUNC_TYPE ::= Shutdown Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Shutdown() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // THIS_FUNC_TYPE ::= Start Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Start() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // THIS_FUNC_TYPE ::= Set Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Set("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // THIS_FUNC_TYPE ::= GetTemp Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ GetTemp() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // THIS_FUNC ::= This Punto THIS_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC ::= [ This Punto FUNC_TYPE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // FUNC_PARAMS ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e011 - Sintaxis erronea en la función Program -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC Coma Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", THIS_FUNC, "+b+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+", THIS_FUNC ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // FUNC_PARAMS ::= Cadena Coma Numero_Entero Coma Numero_Entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", "+b+", "+c+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // FUNC_PARAMS ::= Numero_Entero Coma Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+","+a+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // FUNC_TYPE ::= error NT$64 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NT$64 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$64",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // FUNC_TYPE ::= DeleteFace Parentesis_izq Parentesis_der NT$63 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // NT$63 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ DeleteFace(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$63",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FUNC_TYPE ::= SaveFace Parentesis_izq Parentesis_der NT$62 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // NT$62 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ SaveFace(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$62",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // FUNC_TYPE ::= FaceCheck Parentesis_izq Parentesis_der NT$61 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$61 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ FaceCheck(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$61",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // FUNC_TYPE ::= Move Parentesis_izq Cadena Coma Numero_Entero Coma Numero_Entero Parentesis_der NT$60 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // NT$60 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Move("+s+","+a+","+b+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$60",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // FUNC_TYPE ::= StopRec Parentesis_izq Parentesis_der NT$59 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // NT$59 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ StopRec(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$59",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // FUNC_TYPE ::= Record Parentesis_izq Parentesis_der NT$58 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$58 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Record(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$58",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // FUNC_TYPE ::= Doorbell Parentesis_izq Parentesis_der NT$57 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NT$57 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Doorbell(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$57",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // FUNC_TYPE ::= IsUnlock Parentesis_izq Parentesis_der NT$56 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NT$56 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsUnlock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$56",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // FUNC_TYPE ::= IsLock Parentesis_izq Parentesis_der NT$55 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NT$55 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsLock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$55",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // FUNC_TYPE ::= IsClose Parentesis_izq Parentesis_der NT$54 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NT$54 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsClose(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$54",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // FUNC_TYPE ::= IsOpen Parentesis_izq Parentesis_der NT$53 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$53 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOpen(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$53",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // FUNC_TYPE ::= Unlock Parentesis_izq Parentesis_der NT$52 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$52 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Unlock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$52",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // FUNC_TYPE ::= Lock Parentesis_izq Parentesis_der NT$51 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NT$51 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Lock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$51",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // FUNC_TYPE ::= Close Parentesis_izq Parentesis_der NT$50 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$50 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Close(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$50",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // FUNC_TYPE ::= Open Parentesis_izq Parentesis_der NT$49 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$49 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Open(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$49",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // FUNC_TYPE ::= Color Parentesis_izq Identificador Parentesis_der NT$48 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // NT$48 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Color("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$48",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // FUNC_TYPE ::= LightMode Parentesis_izq Identificador Parentesis_der NT$47 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // NT$47 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ LightMode("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$47",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // FUNC_TYPE ::= Color Parentesis_izq Cadena Parentesis_der NT$46 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // NT$46 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Color("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$46",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // FUNC_TYPE ::= LightMode Parentesis_izq Numero_Entero Parentesis_der NT$45 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // NT$45 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ LightMode("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$45",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // FUNC_TYPE ::= Shutdown Parentesis_izq Parentesis_der NT$44 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // NT$44 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$44",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // FUNC_TYPE ::= Start Parentesis_izq Parentesis_der NT$43 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$43 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$43",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // FUNC_TYPE ::= Off Parentesis_izq Parentesis_der NT$42 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$42 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$42",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // FUNC_TYPE ::= On Parentesis_izq Parentesis_der NT$41 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$41 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ On(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$41",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // FUNC_TYPE ::= Program Parentesis_izq FUNC_PARAMS Parentesis_der NT$40 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$40 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Program(FUNC_PARAMS); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$40",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // FUNC_TYPE ::= Set Parentesis_izq Identificador Parentesis_der NT$39 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NT$39 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Set("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$39",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // FUNC_TYPE ::= Set Parentesis_izq Numero_Entero Parentesis_der NT$38 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$38 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Set("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$38",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FUNC_TYPE ::= GetTemp Parentesis_izq Parentesis_der NT$37 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$37 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ GetTemp(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$37",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // FUNC_TYPE ::= IsMove Parentesis_izq Parentesis_der NT$36 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$36 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsMove(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$36",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // FUNC_TYPE ::= IsOn Parentesis_izq Parentesis_der NT$35 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$35 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOn(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$35",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // FUNC ::= Punto error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Punto FUNC_TYPE ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // FUNC ::= Retroceder Parentesis_izq FUNC_PARAMS Parentesis_der NT$34 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$34 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Retroceder(FUNC_PARAMS); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$34",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // FUNC ::= Avanzar Parentesis_izq FUNC_PARAMS Parentesis_der NT$33 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$33 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Avanzar(FUNC_PARAMS); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$33",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FUNC ::= Detener Parentesis_izq Parentesis_der NT$32 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$32 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Detener(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$32",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FUNC ::= IsSound Parentesis_izq Parentesis_der NT$31 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$31 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsSound(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$31",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FUNC ::= Whistle Parentesis_izq Parentesis_der NT$30 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$30 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Whistle(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$30",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FUNC ::= Capture Parentesis_izq Parentesis_der NT$29 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$29 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Capture(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$29",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FUNC ::= Camera Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // FUNC ::= Micro Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // FUNC ::= RecordTime Parentesis_izq Numero_Entero Parentesis_der NT$28 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$28 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ RecordTime("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$28",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // VALUE_IN ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis erronea en el método Receive -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // VALUE_IN ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // VALUE_IN ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // VALUE_IN ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VALUE_OUT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis erronea en el método Display -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VALUE_OUT ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VALUE_OUT ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VALUE_OUT ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // IN_OUT ::= Receive error NT$27 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$27 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis en el método Receive erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$27",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // IN_OUT ::= Receive Parentesis_izq VALUE_IN Parentesis_der NT$26 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$26 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive VALUE PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$26",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // IN_OUT ::= Display VALUE_OUT NT$25 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$25 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Display VALUE PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$25",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FUNC_TYPE_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE_IF ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FUNC_TYPE_IF ::= IsMove Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsMove() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUNC_TYPE_IF ::= IsOn Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsOn() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // COND_FOR_2 ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_FOR_2",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // COND_FOR_2 ::= Llave_izq STMT_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ { STMT_IF }  ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_FOR_2",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FOR_STMT ::= For Parentesis_izq TIPO Identificador Asignacion Numero_Entero PComa COND PComa Identificador Inc Parentesis_der COND_FOR_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FOR_STMT ::= [ For(TIPO "+s+" = "+a+"; COND ;"+c+" Inc) ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_STMT",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // IF_FUNC_TYPE ::= Identificador Punto DeleteFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".DeleteFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // IF_FUNC_TYPE ::= Identificador Punto SaveFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".SaveFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // IF_FUNC_TYPE ::= Identificador Punto FaceCheck Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".FaceCheck() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // IF_FUNC_TYPE ::= Identificador Punto Move Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+a+".Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // IF_FUNC_TYPE ::= Identificador Punto Move Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+a+".Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // IF_FUNC_TYPE ::= Identificador Punto StopRec Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".StopRec() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // IF_FUNC_TYPE ::= Identificador Punto Record Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Record() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // IF_FUNC_TYPE ::= Identificador Punto Doorbell Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Doorbell() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IF_FUNC_TYPE ::= Identificador Punto IsUnlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".IsUnlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IF_FUNC_TYPE ::= Identificador Punto IsOn Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+".IsLock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IF_FUNC_TYPE ::= Identificador Punto IsLock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+".IsLock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // IF_FUNC_TYPE ::= Identificador Punto IsClose Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIF_FUNC_TYPE ::= [ "+s+".IsClose() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // IF_FUNC_TYPE ::= Identificador Punto IsOpen Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".IsOpen() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IF_FUNC_TYPE ::= Identificador Punto Unlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Unlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // IF_FUNC_TYPE ::= Identificador Punto Lock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Lock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // IF_FUNC_TYPE ::= Identificador Punto Close Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Close() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IF_FUNC_TYPE ::= Identificador Punto Open Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Open() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IF_FUNC_TYPE ::= Identificador Punto Color Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Color("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IF_FUNC_TYPE ::= Identificador Punto LightMode Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".LightMode("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IF_FUNC_TYPE ::= Identificador Punto Color Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Color("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IF_FUNC_TYPE ::= Identificador Punto LightMode Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".LightMode("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IF_FUNC_TYPE ::= Identificador Punto Off Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Off() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IF_FUNC_TYPE ::= Identificador Punto On Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".On() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IF_FUNC_TYPE ::= Identificador Punto Shutdown Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Shutdown() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IF_FUNC_TYPE ::= Identificador Punto Start Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Start() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IF_FUNC_TYPE ::= Identificador Punto Set Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Set("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IF_FUNC_TYPE ::= Identificador Punto Set Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Set("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IF_FUNC_TYPE ::= Identificador Punto GetTemp Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".GetTemp() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IF_FUNC_TYPE ::= IsSound Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ IsSound() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IF_FUNC_TYPE ::= Camera Punto FUNC_TYPE_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IF_FUNC_TYPE ::= Micro Punto FUNC_TYPE_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // STMT_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ]\n");
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // STMT_IF ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ }); ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // STMT_IF ::= Llave_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ } ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // STMT_IF ::= ERROR3 NT$24 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$24 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR3 ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$24",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // STMT_IF ::= ERROR NT$23 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$23 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$23",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // STMT_IF ::= error NT$22 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$22 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$22",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // STMT_IF ::= IF_STMT NT$21 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$21 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$21",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // STMT_IF ::= IN_OUT NT$20 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$20 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$20",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STMT_IF ::= FUNC NT$19 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$19 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ FUNC STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STMT_IF ::= ACT_PORT NT$18 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$18 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ACT_PORT STMT_IF]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // STMT_IF ::= DECL NT$17 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$17 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ DECL STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COND ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e015 - Condición inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COND ::= IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ IF_FUNC_TYPE ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COND ::= IF_FUNC_TYPE Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COND ::= IF_FUNC_TYPE And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COND ::= IF_FUNC_TYPE Menor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COND ::= IF_FUNC_TYPE Menor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COND ::= IF_FUNC_TYPE Mayor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COND ::= IF_FUNC_TYPE Mayor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COND ::= IF_FUNC_TYPE Diferente IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COND ::= IF_FUNC_TYPE Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COND ::= EXP Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= EXP And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= EXP Menor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= EXP Menor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COND ::= EXP Mayor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COND ::= EXP Mayor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COND ::= EXP Diferente IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COND ::= EXP Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COND ::= IF_FUNC_TYPE Or EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COND ::= IF_FUNC_TYPE And EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COND ::= IF_FUNC_TYPE Menor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COND ::= IF_FUNC_TYPE Menor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COND ::= IF_FUNC_TYPE Mayor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COND ::= IF_FUNC_TYPE Mayor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COND ::= IF_FUNC_TYPE Diferente EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COND ::= IF_FUNC_TYPE Igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COND ::= EXP Or EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COND ::= EXP And EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND ::= EXP Menor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND ::= EXP Menor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND ::= EXP Mayor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND ::= EXP Mayor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND ::= EXP Diferente EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND ::= EXP Igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
        
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND_IF_2 ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND_IF_2 ::= Llave_izq STMT_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ { IF_FUNC_TYPE }  ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND_IF ::= Parentesis_izq error COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND_IF ::= error Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COND_IF ::= Parentesis_izq COND Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ ( COND ) COND_IF_2 ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF_STMT ::= If COND_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> IF_STMT ::= [ If COND_IF ; ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_STMT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STMT ::= ERROR3 NT$16 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$16 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STMT ::= ERROR NT$15 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$15 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STMT ::= error NT$14 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$14 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STMT ::= IN_OUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ IN_OUT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STMT ::= FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ FUNC ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STMT ::= ACT_PORT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ ACT_PORT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STMT ::= DECL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ DECL ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CIERRE ::= IF_STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ IF_STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CIERRE ::= STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CIERRE ::= ERROR2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CIERRE ::= ERROR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CIERRE ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CIERRE ::= Llave_der Parentesis_der PComa error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CIERRE ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= Bool 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Bool ]\n");
     //   Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= Float 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Float ]\n");
   //     Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= Text 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Text ]\n");
     //   Main.listaIdValor.add(s+"");
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= Int 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Int ]\n");
     //   Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLS ::= Bool Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un True o False "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLS ::= Bool Identificador Asignacion False PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLS ::= Bool Identificador Asignacion True PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLS ::= Float Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Número real "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLS ::= Float Identificador Asignacion Numero_Flotante PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
         Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
       
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLS ::= Text Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Cadena "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLS ::= Text Identificador Asignacion Cadena PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLS ::= Int Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Número entero "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLS ::= Int Identificador Asignacion Numero_Entero NT$13 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$13 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Int "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLVA ::= Bool Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Bool "+s+" ]\n");
        //llenar tablad de simbolo
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(" "); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLVA ::= Float Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Float "+s+" ]\n");
        //llenar tablad de simbolo
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(" "); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLVA ::= Text Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Text "+s+" ]\n");
        //llenar tablad de simbolo
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(" "); 
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLVA ::= Int Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Int "+s+" ]\n");
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(" ");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }  
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLVA ::= DECLS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLVA ::= [ DECLS ]\n"); 
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPOR ::= Import Identificador Punto Identificador NT$12 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$12 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" Punto "+a+" PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IMPOR ::= Import Identificador NT$11 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$11 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STMT_LIST ::= CIERRE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ CIERRE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STMT_LIST ::= FOR_STMT NT$10 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ FOR_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STMT_LIST ::= IF_STMT NT$9 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IF_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STMT_LIST ::= STMT NT$8 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STMT_LIST ::= error NT$7 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STMT_LIST ::= DECLVA NT$6 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
// declaraciones
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ DECLVA STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STMT_LIST ::= IMPOR NT$5 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IMPOR STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - No se encontró el Metodo Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= ERROR2 NT$4 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= ERROR NT$3 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error NT$2 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Identificador error NT$1 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ "+s+" error { STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e004 - Sintaxis del Metodo Initialize Erronea -> ");  
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Identificador NT$0 Punto Initialize Parentesis_izq Home Llave_izq STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO "+s+".Initialize(Home{ STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

