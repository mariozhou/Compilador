
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 02 18:31:40 MST 2021
//----------------------------------------------------

package Main;

import java.util.Hashtable;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.awt.Color;
import java.io.BufferedWriter;
import java_cup.runtime.*;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 02 18:31:40 MST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\341\000\002\002\004\000\002\047\002\000\002\002" +
    "\012\000\002\050\002\000\002\002\006\000\002\051\002" +
    "\000\002\002\005\000\002\052\002\000\002\002\005\000" +
    "\002\053\002\000\002\002\005\000\002\002\003\000\002" +
    "\054\002\000\002\003\005\000\002\055\002\000\002\003" +
    "\005\000\002\056\002\000\002\003\005\000\002\057\002" +
    "\000\002\003\005\000\002\060\002\000\002\003\005\000" +
    "\002\061\002\000\002\003\005\000\002\062\002\000\002" +
    "\003\005\000\002\003\003\000\002\063\002\000\002\035" +
    "\006\000\002\064\002\000\002\035\010\000\002\036\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\065\002\000\002\037\010\000\002" +
    "\037\007\000\002\037\007\000\002\037\007\000\002\037" +
    "\007\000\002\037\007\000\002\037\007\000\002\037\007" +
    "\000\002\037\007\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\006\005\000\002" +
    "\006\006\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\066\002\000\002\004\005\000\002\067\002\000\002" +
    "\004\006\000\002\070\002\000\002\004\006\000\002\027" +
    "\004\000\002\031\006\000\002\031\005\000\002\031\005" +
    "\000\002\031\003\000\002\032\004\000\002\032\003\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\003\000\002\030" +
    "\003\000\002\071\002\000\002\034\005\000\002\072\002" +
    "\000\002\034\005\000\002\073\002\000\002\034\005\000" +
    "\002\074\002\000\002\034\005\000\002\075\002\000\002" +
    "\034\005\000\002\076\002\000\002\034\006\000\002\077" +
    "\002\000\002\034\006\000\002\100\002\000\002\034\006" +
    "\000\002\034\003\000\002\034\005\000\002\034\005\000" +
    "\002\034\003\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\101\002\000\002\042\020\000\002\044" +
    "\004\000\002\044\003\000\002\043\007\000\002\041\005" +
    "\000\002\041\005\000\002\041\003\000\002\102\002\000" +
    "\002\024\006\000\002\103\002\000\002\024\010\000\002" +
    "\104\002\000\002\024\006\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\105\002\000\002\017\010\000\002\017\005\000\002" +
    "\017\005\000\002\106\002\000\002\017\007\000\002\107" +
    "\002\000\002\017\007\000\002\110\002\000\002\017\007" +
    "\000\002\111\002\000\002\017\007\000\002\112\002\000" +
    "\002\017\010\000\002\113\002\000\002\017\010\000\002" +
    "\017\004\000\002\114\002\000\002\020\007\000\002\115" +
    "\002\000\002\020\007\000\002\116\002\000\002\020\007" +
    "\000\002\117\002\000\002\020\007\000\002\120\002\000" +
    "\002\020\007\000\002\121\002\000\002\020\007\000\002" +
    "\122\002\000\002\020\014\000\002\123\002\000\002\020" +
    "\005\000\002\021\005\000\002\021\007\000\002\021\005" +
    "\000\002\021\007\000\002\021\003\000\002\022\005\000" +
    "\002\023\005\000\002\014\005\000\002\010\005\000\002" +
    "\010\003\000\002\005\006\000\002\005\006\000\002\013" +
    "\003\000\002\013\003\000\002\124\002\000\002\013\005" +
    "\000\002\125\002\000\002\016\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\006\000\002\007\006\000\002" +
    "\007\005\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\126\002\000\002\011\006\000\002\127\002\000" +
    "\002\011\006\000\002\130\002\000\002\012\007\000\002" +
    "\131\002\000\002\012\005\000\002\012\003\000\002\132" +
    "\002\000\002\015\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0184\000\012\003\004\122\007\126\005\130\006\001" +
    "\002\000\014\002\ufff6\003\ufffc\122\ufffc\126\ufffc\130\ufffc" +
    "\001\002\000\012\003\ufffa\122\ufffa\126\ufffa\130\ufffa\001" +
    "\002\000\012\003\ufff8\122\ufff8\126\ufff8\130\ufff8\001\002" +
    "\000\006\003\012\005\000\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\070\003\ufffe\005\ufffe" +
    "\015\ufffe\047\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\121\ufffe\122\ufffe" +
    "\126\ufffe\130\ufffe\147\ufffe\150\ufffe\152\ufffe\153\ufffe\154" +
    "\ufffe\155\ufffe\156\ufffe\157\ufffe\166\ufffe\170\ufffe\001\002" +
    "\000\004\005\014\001\002\000\004\011\015\001\002\000" +
    "\004\114\016\001\002\000\004\047\017\001\002\000\004" +
    "\120\020\001\002\000\070\003\047\005\037\015\066\047" +
    "\063\061\044\062\041\063\045\064\064\065\070\066\043" +
    "\067\046\070\042\071\021\121\052\122\062\126\054\130" +
    "\036\147\035\150\025\152\057\153\034\154\022\155\065" +
    "\156\053\157\040\166\024\170\050\001\002\000\006\003" +
    "\u0176\114\u0175\001\002\000\004\114\u0171\001\002\000\070" +
    "\003\ufff3\005\ufff3\015\ufff3\047\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\121\ufff3\122\ufff3\126\ufff3\130\ufff3\147\ufff3\150\ufff3\152" +
    "\ufff3\153\ufff3\154\ufff3\155\ufff3\156\ufff3\157\ufff3\166\ufff3" +
    "\170\ufff3\001\002\000\004\005\u016d\001\002\000\004\114" +
    "\u0168\001\002\000\072\002\uffc8\003\uffc8\005\uffc8\015\uffc8" +
    "\047\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\121\uffc8\122\uffc8\126\uffc8" +
    "\130\uffc8\147\uffc8\150\uffc8\152\uffc8\153\uffc8\154\uffc8\155" +
    "\uffc8\156\uffc8\157\uffc8\166\uffc8\170\uffc8\001\002\000\004" +
    "\002\uffff\001\002\000\070\003\uffe2\005\uffe2\015\uffe2\047" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\121\uffe2\122\uffe2\126\uffe2\130" +
    "\uffe2\147\uffe2\150\uffe2\152\uffe2\153\uffe2\154\uffe2\155\uffe2" +
    "\156\uffe2\157\uffe2\166\uffe2\170\uffe2\001\002\000\070\003" +
    "\uffe9\005\uffe9\015\uffe9\047\uffe9\061\uffe9\062\uffe9\063\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\121" +
    "\uffe9\122\uffe9\126\uffe9\130\uffe9\147\uffe9\150\uffe9\152\uffe9" +
    "\153\uffe9\154\uffe9\155\uffe9\156\uffe9\157\uffe9\166\uffe9\170" +
    "\uffe9\001\002\000\070\003\uffeb\005\uffeb\015\uffeb\047\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\121\uffeb\122\uffeb\126\uffeb\130\uffeb" +
    "\147\uffeb\150\uffeb\152\uffeb\153\uffeb\154\uffeb\155\uffeb\156" +
    "\uffeb\157\uffeb\166\uffeb\170\uffeb\001\002\000\072\002\uffca" +
    "\003\uffef\005\uffef\015\uffef\047\uffef\061\uffef\062\uffef\063" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef" +
    "\121\uffef\122\uffef\126\uffef\130\uffef\147\uffef\150\uffef\152" +
    "\uffef\153\uffef\154\uffef\155\uffef\156\uffef\157\uffef\166\uffef" +
    "\170\uffef\001\002\000\004\114\u015d\001\002\000\004\003" +
    "\uffc0\001\002\000\004\002\uffcb\001\002\000\004\003\u0159" +
    "\001\002\000\004\114\u0155\001\002\000\004\122\u014e\001" +
    "\002\000\004\114\u014a\001\002\000\012\003\u0144\122\u0146" +
    "\123\u0145\127\u0147\001\002\000\004\122\u013b\001\002\000" +
    "\004\122\u0134\001\002\000\004\114\321\001\002\000\074" +
    "\002\uffcd\003\ufff1\004\uffc4\005\ufff1\015\ufff1\047\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\121\ufff1\122\ufff1\126\ufff1\130\ufff1\147" +
    "\ufff1\150\ufff1\152\ufff1\153\ufff1\154\ufff1\155\ufff1\156\ufff1" +
    "\157\ufff1\166\ufff1\170\ufff1\001\002\000\004\122\306\001" +
    "\002\000\072\002\uffc5\003\uffc5\005\uffc5\015\uffc5\047\uffc5" +
    "\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067" +
    "\uffc5\070\uffc5\071\uffc5\121\uffc5\122\uffc5\126\uffc5\130\uffc5" +
    "\147\uffc5\150\uffc5\152\uffc5\153\uffc5\154\uffc5\155\uffc5\156" +
    "\uffc5\157\uffc5\166\uffc5\170\uffc5\001\002\000\004\115\303" +
    "\001\002\000\004\114\277\001\002\000\006\002\uffcc\003" +
    "\uffc2\001\002\000\072\002\uffc9\003\uffed\005\uffed\015\uffed" +
    "\047\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\121\uffed\122\uffed\126\uffed" +
    "\130\uffed\147\uffed\150\uffed\152\uffed\153\uffed\154\uffed\155" +
    "\uffed\156\uffed\157\uffed\166\uffed\170\uffed\001\002\000\072" +
    "\002\uffc7\003\uffc7\005\uffc7\015\uffc7\047\uffc7\061\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7" +
    "\071\uffc7\121\uffc7\122\uffc7\126\uffc7\130\uffc7\147\uffc7\150" +
    "\uffc7\152\uffc7\153\uffc7\154\uffc7\155\uffc7\156\uffc7\157\uffc7" +
    "\166\uffc7\170\uffc7\001\002\000\004\114\243\001\002\000" +
    "\070\003\ufff5\005\ufff5\015\ufff5\047\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071" +
    "\ufff5\121\ufff5\122\ufff5\126\ufff5\130\ufff5\147\ufff5\150\ufff5" +
    "\152\ufff5\153\ufff5\154\ufff5\155\ufff5\156\ufff5\157\ufff5\166" +
    "\ufff5\170\ufff5\001\002\000\072\002\uffc6\003\uffc6\005\uffc6" +
    "\015\uffc6\047\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\121\uffc6\122\uffc6" +
    "\126\uffc6\130\uffc6\147\uffc6\150\uffc6\152\uffc6\153\uffc6\154" +
    "\uffc6\155\uffc6\156\uffc6\157\uffc6\166\uffc6\170\uffc6\001\002" +
    "\000\004\075\201\001\002\000\004\005\124\001\002\000" +
    "\004\122\113\001\002\000\004\114\107\001\002\000\004" +
    "\003\105\001\002\000\004\002\uffe7\001\002\000\006\003" +
    "\071\114\072\001\002\000\004\004\uff80\001\002\000\012" +
    "\003\074\122\076\123\075\127\077\001\002\000\004\115" +
    "\100\001\002\000\004\115\uff77\001\002\000\004\115\uff79" +
    "\001\002\000\004\115\uff7a\001\002\000\004\115\uff78\001" +
    "\002\000\004\004\uff82\001\002\000\004\004\102\001\002" +
    "\000\072\002\uff81\003\uff81\005\uff81\015\uff81\047\uff81\061" +
    "\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066\uff81\067\uff81" +
    "\070\uff81\071\uff81\121\uff81\122\uff81\126\uff81\130\uff81\147" +
    "\uff81\150\uff81\152\uff81\153\uff81\154\uff81\155\uff81\156\uff81" +
    "\157\uff81\166\uff81\170\uff81\001\002\000\004\004\104\001" +
    "\002\000\072\002\uff7f\003\uff7f\005\uff7f\015\uff7f\047\uff7f" +
    "\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067" +
    "\uff7f\070\uff7f\071\uff7f\121\uff7f\122\uff7f\126\uff7f\130\uff7f" +
    "\147\uff7f\150\uff7f\152\uff7f\153\uff7f\154\uff7f\155\uff7f\156" +
    "\uff7f\157\uff7f\166\uff7f\170\uff7f\001\002\000\004\004\106" +
    "\001\002\000\072\002\uff4e\003\uff4e\005\uff4e\015\uff4e\047" +
    "\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e" +
    "\067\uff4e\070\uff4e\071\uff4e\121\uff4e\122\uff4e\126\uff4e\130" +
    "\uff4e\147\uff4e\150\uff4e\152\uff4e\153\uff4e\154\uff4e\155\uff4e" +
    "\156\uff4e\157\uff4e\166\uff4e\170\uff4e\001\002\000\004\115" +
    "\110\001\002\000\004\004\uff6e\001\002\000\004\004\112" +
    "\001\002\000\072\002\uff6d\003\uff6d\005\uff6d\015\uff6d\047" +
    "\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d" +
    "\067\uff6d\070\uff6d\071\uff6d\121\uff6d\122\uff6d\126\uff6d\130" +
    "\uff6d\147\uff6d\150\uff6d\152\uff6d\153\uff6d\154\uff6d\155\uff6d" +
    "\156\uff6d\157\uff6d\166\uff6d\170\uff6d\001\002\000\006\004" +
    "\115\075\114\001\002\000\010\003\117\142\120\143\116" +
    "\001\002\000\070\003\uffde\005\uffde\015\uffde\047\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde" +
    "\070\uffde\071\uffde\121\uffde\122\uffde\126\uffde\130\uffde\147" +
    "\uffde\150\uffde\152\uffde\153\uffde\154\uffde\155\uffde\156\uffde" +
    "\157\uffde\166\uffde\170\uffde\001\002\000\004\004\123\001" +
    "\002\000\004\004\122\001\002\000\004\004\121\001\002" +
    "\000\070\003\uffd6\005\uffd6\015\uffd6\047\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6" +
    "\071\uffd6\121\uffd6\122\uffd6\126\uffd6\130\uffd6\147\uffd6\150" +
    "\uffd6\152\uffd6\153\uffd6\154\uffd6\155\uffd6\156\uffd6\157\uffd6" +
    "\166\uffd6\170\uffd6\001\002\000\070\003\uffd4\005\uffd4\015" +
    "\uffd4\047\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4" +
    "\066\uffd4\067\uffd4\070\uffd4\071\uffd4\121\uffd4\122\uffd4\126" +
    "\uffd4\130\uffd4\147\uffd4\150\uffd4\152\uffd4\153\uffd4\154\uffd4" +
    "\155\uffd4\156\uffd4\157\uffd4\166\uffd4\170\uffd4\001\002\000" +
    "\070\003\uffd5\005\uffd5\015\uffd5\047\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071" +
    "\uffd5\121\uffd5\122\uffd5\126\uffd5\130\uffd5\147\uffd5\150\uffd5" +
    "\152\uffd5\153\uffd5\154\uffd5\155\uffd5\156\uffd5\157\uffd5\166" +
    "\uffd5\170\uffd5\001\002\000\022\003\133\025\130\026\134" +
    "\051\135\052\125\053\131\054\126\144\132\001\002\000" +
    "\004\114\175\001\002\000\004\114\171\001\002\000\072" +
    "\002\uff73\003\uff73\005\uff73\015\uff73\047\uff73\061\uff73\062" +
    "\uff73\063\uff73\064\uff73\065\uff73\066\uff73\067\uff73\070\uff73" +
    "\071\uff73\121\uff73\122\uff73\126\uff73\130\uff73\147\uff73\150" +
    "\uff73\152\uff73\153\uff73\154\uff73\155\uff73\156\uff73\157\uff73" +
    "\166\uff73\170\uff73\001\002\000\004\114\165\001\002\000" +
    "\004\114\154\001\002\000\004\114\150\001\002\000\004" +
    "\004\uff57\001\002\000\004\114\142\001\002\000\004\114" +
    "\136\001\002\000\004\115\137\001\002\000\004\004\uff5d" +
    "\001\002\000\004\004\141\001\002\000\072\002\uff5c\003" +
    "\uff5c\005\uff5c\015\uff5c\047\uff5c\061\uff5c\062\uff5c\063\uff5c" +
    "\064\uff5c\065\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\121" +
    "\uff5c\122\uff5c\126\uff5c\130\uff5c\147\uff5c\150\uff5c\152\uff5c" +
    "\153\uff5c\154\uff5c\155\uff5c\156\uff5c\157\uff5c\166\uff5c\170" +
    "\uff5c\001\002\000\004\115\143\001\002\000\004\004\uff61" +
    "\001\002\000\004\004\145\001\002\000\072\002\uff60\003" +
    "\uff60\005\uff60\015\uff60\047\uff60\061\uff60\062\uff60\063\uff60" +
    "\064\uff60\065\uff60\066\uff60\067\uff60\070\uff60\071\uff60\121" +
    "\uff60\122\uff60\126\uff60\130\uff60\147\uff60\150\uff60\152\uff60" +
    "\153\uff60\154\uff60\155\uff60\156\uff60\157\uff60\166\uff60\170" +
    "\uff60\001\002\000\004\004\147\001\002\000\072\002\uff56" +
    "\003\uff56\005\uff56\015\uff56\047\uff56\061\uff56\062\uff56\063" +
    "\uff56\064\uff56\065\uff56\066\uff56\067\uff56\070\uff56\071\uff56" +
    "\121\uff56\122\uff56\126\uff56\130\uff56\147\uff56\150\uff56\152" +
    "\uff56\153\uff56\154\uff56\155\uff56\156\uff56\157\uff56\166\uff56" +
    "\170\uff56\001\002\000\004\115\151\001\002\000\004\004" +
    "\uff65\001\002\000\004\004\153\001\002\000\072\002\uff64" +
    "\003\uff64\005\uff64\015\uff64\047\uff64\061\uff64\062\uff64\063" +
    "\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070\uff64\071\uff64" +
    "\121\uff64\122\uff64\126\uff64\130\uff64\147\uff64\150\uff64\152" +
    "\uff64\153\uff64\154\uff64\155\uff64\156\uff64\157\uff64\166\uff64" +
    "\170\uff64\001\002\000\004\127\155\001\002\000\004\006" +
    "\156\001\002\000\004\123\157\001\002\000\004\006\160" +
    "\001\002\000\004\123\161\001\002\000\004\115\162\001" +
    "\002\000\004\004\uff59\001\002\000\004\004\164\001\002" +
    "\000\072\002\uff58\003\uff58\005\uff58\015\uff58\047\uff58\061" +
    "\uff58\062\uff58\063\uff58\064\uff58\065\uff58\066\uff58\067\uff58" +
    "\070\uff58\071\uff58\121\uff58\122\uff58\126\uff58\130\uff58\147" +
    "\uff58\150\uff58\152\uff58\153\uff58\154\uff58\155\uff58\156\uff58" +
    "\157\uff58\166\uff58\170\uff58\001\002\000\004\115\166\001" +
    "\002\000\004\004\uff5f\001\002\000\004\004\170\001\002" +
    "\000\072\002\uff5e\003\uff5e\005\uff5e\015\uff5e\047\uff5e\061" +
    "\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e\067\uff5e" +
    "\070\uff5e\071\uff5e\121\uff5e\122\uff5e\126\uff5e\130\uff5e\147" +
    "\uff5e\150\uff5e\152\uff5e\153\uff5e\154\uff5e\155\uff5e\156\uff5e" +
    "\157\uff5e\166\uff5e\170\uff5e\001\002\000\004\115\172\001" +
    "\002\000\004\004\uff63\001\002\000\004\004\174\001\002" +
    "\000\072\002\uff62\003\uff62\005\uff62\015\uff62\047\uff62\061" +
    "\uff62\062\uff62\063\uff62\064\uff62\065\uff62\066\uff62\067\uff62" +
    "\070\uff62\071\uff62\121\uff62\122\uff62\126\uff62\130\uff62\147" +
    "\uff62\150\uff62\152\uff62\153\uff62\154\uff62\155\uff62\156\uff62" +
    "\157\uff62\166\uff62\170\uff62\001\002\000\004\115\176\001" +
    "\002\000\004\004\uff5b\001\002\000\004\004\200\001\002" +
    "\000\072\002\uff5a\003\uff5a\005\uff5a\015\uff5a\047\uff5a\061" +
    "\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a" +
    "\070\uff5a\071\uff5a\121\uff5a\122\uff5a\126\uff5a\130\uff5a\147" +
    "\uff5a\150\uff5a\152\uff5a\153\uff5a\154\uff5a\155\uff5a\156\uff5a" +
    "\157\uff5a\166\uff5a\170\uff5a\001\002\000\020\114\205\122" +
    "\207\123\211\127\203\134\204\142\210\143\206\001\002" +
    "\000\004\004\240\001\002\000\040\003\uff3c\004\uff3c\076" +
    "\uff3c\077\uff3c\100\uff3c\101\uff3c\102\uff3c\103\uff3c\104\uff3c" +
    "\105\uff3c\106\uff3c\107\uff3c\110\uff3c\111\uff3c\115\uff3c\001" +
    "\002\000\040\003\uff3d\004\uff3d\076\uff3d\077\uff3d\100\uff3d" +
    "\101\uff3d\102\uff3d\103\uff3d\104\uff3d\105\uff3d\106\uff3d\107" +
    "\uff3d\110\uff3d\111\uff3d\115\uff3d\001\002\000\022\003\230" +
    "\114\205\122\207\123\211\127\203\134\204\142\210\143" +
    "\206\001\002\000\040\003\uff39\004\uff39\076\uff39\077\uff39" +
    "\100\uff39\101\uff39\102\uff39\103\uff39\104\uff39\105\uff39\106" +
    "\uff39\107\uff39\110\uff39\111\uff39\115\uff39\001\002\000\040" +
    "\003\uff3b\004\uff3b\076\uff3b\077\uff3b\100\uff3b\101\uff3b\102" +
    "\uff3b\103\uff3b\104\uff3b\105\uff3b\106\uff3b\107\uff3b\110\uff3b" +
    "\111\uff3b\115\uff3b\001\002\000\040\003\uff3a\004\uff3a\076" +
    "\uff3a\077\uff3a\100\uff3a\101\uff3a\102\uff3a\103\uff3a\104\uff3a" +
    "\105\uff3a\106\uff3a\107\uff3a\110\uff3a\111\uff3a\115\uff3a\001" +
    "\002\000\040\003\uff3e\004\uff3e\076\uff3e\077\uff3e\100\uff3e" +
    "\101\uff3e\102\uff3e\103\uff3e\104\uff3e\105\uff3e\106\uff3e\107" +
    "\uff3e\110\uff3e\111\uff3e\115\uff3e\001\002\000\014\004\217" +
    "\104\215\105\214\106\216\107\213\001\002\000\022\003" +
    "\226\114\205\122\207\123\211\127\203\134\204\142\210" +
    "\143\206\001\002\000\022\003\224\114\205\122\207\123" +
    "\211\127\203\134\204\142\210\143\206\001\002\000\022" +
    "\003\222\114\205\122\207\123\211\127\203\134\204\142" +
    "\210\143\206\001\002\000\022\003\220\114\205\122\207" +
    "\123\211\127\203\134\204\142\210\143\206\001\002\000" +
    "\072\002\uff4a\003\uff4a\005\uff4a\015\uff4a\047\uff4a\061\uff4a" +
    "\062\uff4a\063\uff4a\064\uff4a\065\uff4a\066\uff4a\067\uff4a\070" +
    "\uff4a\071\uff4a\121\uff4a\122\uff4a\126\uff4a\130\uff4a\147\uff4a" +
    "\150\uff4a\152\uff4a\153\uff4a\154\uff4a\155\uff4a\156\uff4a\157" +
    "\uff4a\166\uff4a\170\uff4a\001\002\000\040\003\uff36\004\uff36" +
    "\076\uff36\077\uff36\100\uff36\101\uff36\102\uff36\103\uff36\104" +
    "\uff36\105\uff36\106\uff36\107\uff36\110\uff36\111\uff36\115\uff36" +
    "\001\002\000\040\003\uff41\004\uff41\076\uff41\077\uff41\100" +
    "\uff41\101\uff41\102\uff41\103\uff41\104\uff41\105\uff41\106\uff41" +
    "\107\uff41\110\uff41\111\uff41\115\uff41\001\002\000\040\003" +
    "\uff38\004\uff38\076\uff38\077\uff38\100\uff38\101\uff38\102\uff38" +
    "\103\uff38\104\uff38\105\uff38\106\uff38\107\uff38\110\uff38\111" +
    "\uff38\115\uff38\001\002\000\040\003\uff43\004\uff43\076\uff43" +
    "\077\uff43\100\uff43\101\uff43\102\uff43\103\uff43\104\uff43\105" +
    "\uff43\106\216\107\213\110\uff43\111\uff43\115\uff43\001\002" +
    "\000\040\003\uff37\004\uff37\076\uff37\077\uff37\100\uff37\101" +
    "\uff37\102\uff37\103\uff37\104\uff37\105\uff37\106\uff37\107\uff37" +
    "\110\uff37\111\uff37\115\uff37\001\002\000\040\003\uff42\004" +
    "\uff42\076\uff42\077\uff42\100\uff42\101\uff42\102\uff42\103\uff42" +
    "\104\uff42\105\uff42\106\216\107\213\110\uff42\111\uff42\115" +
    "\uff42\001\002\000\040\003\uff35\004\uff35\076\uff35\077\uff35" +
    "\100\uff35\101\uff35\102\uff35\103\uff35\104\uff35\105\uff35\106" +
    "\uff35\107\uff35\110\uff35\111\uff35\115\uff35\001\002\000\040" +
    "\003\uff40\004\uff40\076\uff40\077\uff40\100\uff40\101\uff40\102" +
    "\uff40\103\uff40\104\uff40\105\uff40\106\uff40\107\uff40\110\uff40" +
    "\111\uff40\115\uff40\001\002\000\022\114\205\115\235\122" +
    "\207\123\211\127\203\134\204\142\210\143\206\001\002" +
    "\000\016\003\233\104\215\105\214\106\216\107\213\115" +
    "\232\001\002\000\040\003\uff3f\004\uff3f\076\uff3f\077\uff3f" +
    "\100\uff3f\101\uff3f\102\uff3f\103\uff3f\104\uff3f\105\uff3f\106" +
    "\uff3f\107\uff3f\110\uff3f\111\uff3f\115\uff3f\001\002\000\004" +
    "\115\234\001\002\000\040\003\uff34\004\uff34\076\uff34\077" +
    "\uff34\100\uff34\101\uff34\102\uff34\103\uff34\104\uff34\105\uff34" +
    "\106\uff34\107\uff34\110\uff34\111\uff34\115\uff34\001\002\000" +
    "\040\003\uff32\004\uff32\076\uff32\077\uff32\100\uff32\101\uff32" +
    "\102\uff32\103\uff32\104\uff32\105\uff32\106\uff32\107\uff32\110" +
    "\uff32\111\uff32\115\uff32\001\002\000\014\104\215\105\214" +
    "\106\216\107\213\115\237\001\002\000\040\003\uff33\004" +
    "\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103\uff33" +
    "\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\111\uff33\115" +
    "\uff33\001\002\000\072\002\uff4b\003\uff4b\005\uff4b\015\uff4b" +
    "\047\uff4b\061\uff4b\062\uff4b\063\uff4b\064\uff4b\065\uff4b\066" +
    "\uff4b\067\uff4b\070\uff4b\071\uff4b\121\uff4b\122\uff4b\126\uff4b" +
    "\130\uff4b\147\uff4b\150\uff4b\152\uff4b\153\uff4b\154\uff4b\155" +
    "\uff4b\156\uff4b\157\uff4b\166\uff4b\170\uff4b\001\002\000\070" +
    "\003\047\005\037\015\066\047\063\061\044\062\041\063" +
    "\045\064\064\065\070\066\043\067\046\070\042\071\021" +
    "\121\052\122\062\126\054\130\036\147\035\150\025\152" +
    "\057\153\034\154\022\155\065\156\053\157\040\166\024" +
    "\170\050\001\002\000\004\002\ufff4\001\002\000\010\003" +
    "\244\123\246\127\247\001\002\000\004\115\uff51\001\002" +
    "\000\004\115\267\001\002\000\004\006\265\001\002\000" +
    "\004\006\250\001\002\000\006\123\251\135\253\001\002" +
    "\000\004\006\263\001\002\000\006\006\261\115\uff53\001" +
    "\002\000\004\005\254\001\002\000\004\017\256\001\002" +
    "\000\006\006\uff50\115\uff50\001\002\000\004\114\257\001" +
    "\002\000\004\115\260\001\002\000\006\006\uff4f\115\uff4f" +
    "\001\002\000\004\127\262\001\002\000\004\115\uff52\001" +
    "\002\000\004\123\264\001\002\000\004\115\uff54\001\002" +
    "\000\004\123\266\001\002\000\004\115\uff55\001\002\000" +
    "\004\004\uff6a\001\002\000\004\004\271\001\002\000\072" +
    "\002\uff69\003\uff69\005\uff69\015\uff69\047\uff69\061\uff69\062" +
    "\uff69\063\uff69\064\uff69\065\uff69\066\uff69\067\uff69\070\uff69" +
    "\071\uff69\121\uff69\122\uff69\126\uff69\130\uff69\147\uff69\150" +
    "\uff69\152\uff69\153\uff69\154\uff69\155\uff69\156\uff69\157\uff69" +
    "\166\uff69\170\uff69\001\002\000\070\003\047\005\037\015" +
    "\066\047\063\061\044\062\041\063\045\064\064\065\070" +
    "\066\043\067\046\070\042\071\021\121\052\122\062\126" +
    "\054\130\036\147\035\150\025\152\057\153\034\154\022" +
    "\155\065\156\053\157\040\166\024\170\050\001\002\000" +
    "\004\002\uffec\001\002\000\004\003\275\001\002\000\004" +
    "\004\276\001\002\000\072\002\uffc1\003\uffc1\005\uffc1\015" +
    "\uffc1\047\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\121\uffc1\122\uffc1\126" +
    "\uffc1\130\uffc1\147\uffc1\150\uffc1\152\uffc1\153\uffc1\154\uffc1" +
    "\155\uffc1\156\uffc1\157\uffc1\166\uffc1\170\uffc1\001\002\000" +
    "\004\115\300\001\002\000\004\004\uff70\001\002\000\004" +
    "\004\302\001\002\000\072\002\uff6f\003\uff6f\005\uff6f\015" +
    "\uff6f\047\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f" +
    "\066\uff6f\067\uff6f\070\uff6f\071\uff6f\121\uff6f\122\uff6f\126" +
    "\uff6f\130\uff6f\147\uff6f\150\uff6f\152\uff6f\153\uff6f\154\uff6f" +
    "\155\uff6f\156\uff6f\157\uff6f\166\uff6f\170\uff6f\001\002\000" +
    "\004\004\304\001\002\000\006\002\uffcf\003\305\001\002" +
    "\000\004\002\uffce\001\002\000\006\004\uffe6\005\307\001" +
    "\002\000\004\122\312\001\002\000\004\004\311\001\002" +
    "\000\070\003\uffe5\005\uffe5\015\uffe5\047\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5" +
    "\071\uffe5\121\uffe5\122\uffe5\126\uffe5\130\uffe5\147\uffe5\150" +
    "\uffe5\152\uffe5\153\uffe5\154\uffe5\155\uffe5\156\uffe5\157\uffe5" +
    "\166\uffe5\170\uffe5\001\002\000\004\004\uffe4\001\002\000" +
    "\004\004\314\001\002\000\070\003\uffe3\005\uffe3\015\uffe3" +
    "\047\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\067\uffe3\070\uffe3\071\uffe3\121\uffe3\122\uffe3\126\uffe3" +
    "\130\uffe3\147\uffe3\150\uffe3\152\uffe3\153\uffe3\154\uffe3\155" +
    "\uffe3\156\uffe3\157\uffe3\166\uffe3\170\uffe3\001\002\000\004" +
    "\004\320\001\002\000\070\003\047\005\037\015\066\047" +
    "\063\061\044\062\041\063\045\064\064\065\070\066\043" +
    "\067\046\070\042\071\021\121\052\122\062\126\054\130" +
    "\036\147\035\150\025\152\057\153\034\154\022\155\065" +
    "\156\053\157\040\166\024\170\050\001\002\000\004\002" +
    "\ufff0\001\002\000\072\002\uffc3\003\uffc3\005\uffc3\015\uffc3" +
    "\047\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\067\uffc3\070\uffc3\071\uffc3\121\uffc3\122\uffc3\126\uffc3" +
    "\130\uffc3\147\uffc3\150\uffc3\152\uffc3\153\uffc3\154\uffc3\155" +
    "\uffc3\156\uffc3\157\uffc3\166\uffc3\170\uffc3\001\002\000\004" +
    "\061\322\001\002\000\004\122\323\001\002\000\004\075" +
    "\324\001\002\000\004\123\325\001\002\000\004\004\uff8c" +
    "\001\002\000\004\004\327\001\002\000\030\003\334\047" +
    "\333\114\205\122\207\123\211\127\203\134\204\142\210" +
    "\143\206\155\330\166\336\001\002\000\004\114\u0132\001" +
    "\002\000\014\004\uffa5\076\u012b\110\u0129\111\u012a\115\uffa5" +
    "\001\002\000\004\004\376\001\002\000\004\005\374\001" +
    "\002\000\006\004\uffa4\115\uffa4\001\002\000\032\076\356" +
    "\077\352\100\355\101\351\102\350\103\357\104\215\105" +
    "\214\106\216\107\213\110\353\111\354\001\002\000\004" +
    "\005\337\001\002\000\010\003\342\054\341\144\343\001" +
    "\002\000\014\004\uff8f\076\uff8f\110\uff8f\111\uff8f\115\uff8f" +
    "\001\002\000\004\114\346\001\002\000\014\004\uff85\076" +
    "\uff85\110\uff85\111\uff85\115\uff85\001\002\000\004\114\344" +
    "\001\002\000\004\115\345\001\002\000\014\004\uff87\076" +
    "\uff87\110\uff87\111\uff87\115\uff87\001\002\000\004\115\347" +
    "\001\002\000\014\004\uff86\076\uff86\110\uff86\111\uff86\115" +
    "\uff86\001\002\000\020\114\205\122\207\123\211\127\203" +
    "\134\204\142\210\143\206\001\002\000\020\114\205\122" +
    "\207\123\211\127\203\134\204\142\210\143\206\001\002" +
    "\000\020\114\205\122\207\123\211\127\203\134\204\142" +
    "\210\143\206\001\002\000\026\047\333\114\205\122\207" +
    "\123\211\127\203\134\204\142\210\143\206\155\330\166" +
    "\336\001\002\000\026\047\333\114\205\122\207\123\211" +
    "\127\203\134\204\142\210\143\206\155\330\166\336\001" +
    "\002\000\020\114\205\122\207\123\211\127\203\134\204" +
    "\142\210\143\206\001\002\000\026\047\333\114\205\122" +
    "\207\123\211\127\203\134\204\142\210\143\206\155\330" +
    "\166\336\001\002\000\026\047\333\114\205\122\207\123" +
    "\211\127\203\134\204\142\210\143\206\155\330\166\336" +
    "\001\002\000\006\004\uffab\115\uffab\001\002\000\016\004" +
    "\uffb6\104\215\105\214\106\216\107\213\115\uffb6\001\002" +
    "\000\006\004\uffac\115\uffac\001\002\000\016\004\uffb7\104" +
    "\215\105\214\106\216\107\213\115\uffb7\001\002\000\016" +
    "\004\uffb5\104\215\105\214\106\216\107\213\115\uffb5\001" +
    "\002\000\006\004\uffa9\115\uffa9\001\002\000\016\004\uffb0" +
    "\104\215\105\214\106\216\107\213\115\uffb0\001\002\000" +
    "\006\004\uffaa\115\uffaa\001\002\000\016\004\uffb1\104\215" +
    "\105\214\106\216\107\213\115\uffb1\001\002\000\016\004" +
    "\uffb3\104\215\105\214\106\216\107\213\115\uffb3\001\002" +
    "\000\016\004\uffb4\104\215\105\214\106\216\107\213\115" +
    "\uffb4\001\002\000\016\004\uffb2\104\215\105\214\106\216" +
    "\107\213\115\uffb2\001\002\000\010\003\342\054\341\144" +
    "\343\001\002\000\014\004\uff8e\076\uff8e\110\uff8e\111\uff8e" +
    "\115\uff8e\001\002\000\004\122\377\001\002\000\004\112" +
    "\u0100\001\002\000\004\115\u0101\001\002\000\006\003\u0102" +
    "\120\u0103\001\002\000\070\003\uff89\005\uff89\015\uff89\047" +
    "\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89" +
    "\067\uff89\070\uff89\071\uff89\121\uff89\122\uff89\126\uff89\130" +
    "\uff89\147\uff89\150\uff89\152\uff89\153\uff89\154\uff89\155\uff89" +
    "\156\uff89\157\uff89\166\uff89\170\uff89\001\002\000\050\003" +
    "\u010c\005\037\015\066\047\063\065\070\066\043\071\021" +
    "\121\u0108\122\062\126\u0107\147\u0105\150\025\152\057\153" +
    "\034\154\022\155\065\156\053\157\040\166\024\001\002" +
    "\000\070\003\uff8b\005\uff8b\015\uff8b\047\uff8b\061\uff8b\062" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\121\uff8b\122\uff8b\126\uff8b\130\uff8b\147\uff8b\150" +
    "\uff8b\152\uff8b\153\uff8b\154\uff8b\155\uff8b\156\uff8b\157\uff8b" +
    "\166\uff8b\170\uff8b\001\002\000\004\004\uff95\001\002\000" +
    "\050\003\uffa1\005\uffa1\015\uffa1\047\uffa1\065\uffa1\066\uffa1" +
    "\071\uffa1\121\uffa1\122\uffa1\126\uffa1\147\uffa1\150\uffa1\152" +
    "\uffa1\153\uffa1\154\uffa1\155\uffa1\156\uffa1\157\uffa1\166\uffa1" +
    "\001\002\000\004\004\uff97\001\002\000\076\002\uff93\003" +
    "\uff93\005\uff93\015\uff93\047\uff93\061\uff93\062\uff93\063\uff93" +
    "\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072" +
    "\u011b\115\u011a\121\uff93\122\uff93\126\uff93\130\uff93\147\uff93" +
    "\150\uff93\152\uff93\153\uff93\154\uff93\155\uff93\156\uff93\157" +
    "\uff93\166\uff93\170\uff93\001\002\000\050\003\uffa3\005\uffa3" +
    "\015\uffa3\047\uffa3\065\uffa3\066\uffa3\071\uffa3\121\uffa3\122" +
    "\uffa3\126\uffa3\147\uffa3\150\uffa3\152\uffa3\153\uffa3\154\uffa3" +
    "\155\uffa3\156\uffa3\157\uffa3\166\uffa3\001\002\000\050\003" +
    "\uff9b\005\uff9b\015\uff9b\047\uff9b\065\uff9b\066\uff9b\071\uff9b" +
    "\121\uff9b\122\uff9b\126\uff9b\147\uff9b\150\uff9b\152\uff9b\153" +
    "\uff9b\154\uff9b\155\uff9b\156\uff9b\157\uff9b\166\uff9b\001\002" +
    "\000\050\003\uff9f\005\uff9f\015\uff9f\047\uff9f\065\uff9f\066" +
    "\uff9f\071\uff9f\121\uff9f\122\uff9f\126\uff9f\147\uff9f\150\uff9f" +
    "\152\uff9f\153\uff9f\154\uff9f\155\uff9f\156\uff9f\157\uff9f\166" +
    "\uff9f\001\002\000\074\002\uff90\003\uff90\004\uff99\005\uff90" +
    "\015\uff90\047\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065" +
    "\uff90\066\uff90\067\uff90\070\uff90\071\uff90\121\uff90\122\uff90" +
    "\126\uff90\130\uff90\147\uff90\150\uff90\152\uff90\153\uff90\154" +
    "\uff90\155\uff90\156\uff90\157\uff90\166\uff90\170\uff90\001\002" +
    "\000\070\003\uff8a\005\uff8a\015\uff8a\047\uff8a\061\uff8a\062" +
    "\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a" +
    "\071\uff8a\121\uff8a\122\uff8a\126\uff8a\130\uff8a\147\uff8a\150" +
    "\uff8a\152\uff8a\153\uff8a\154\uff8a\155\uff8a\156\uff8a\157\uff8a" +
    "\166\uff8a\170\uff8a\001\002\000\050\003\uff9d\005\uff9d\015" +
    "\uff9d\047\uff9d\065\uff9d\066\uff9d\071\uff9d\121\uff9d\122\uff9d" +
    "\126\uff9d\147\uff9d\150\uff9d\152\uff9d\153\uff9d\154\uff9d\155" +
    "\uff9d\156\uff9d\157\uff9d\166\uff9d\001\002\000\050\003\u010c" +
    "\005\037\015\066\047\063\065\070\066\043\071\021\121" +
    "\u0108\122\062\126\u0107\147\u0105\150\025\152\057\153\034" +
    "\154\022\155\065\156\053\157\040\166\024\001\002\000" +
    "\072\002\uff9c\003\uff9c\005\uff9c\015\uff9c\047\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070" +
    "\uff9c\071\uff9c\121\uff9c\122\uff9c\126\uff9c\130\uff9c\147\uff9c" +
    "\150\uff9c\152\uff9c\153\uff9c\154\uff9c\155\uff9c\156\uff9c\157" +
    "\uff9c\166\uff9c\170\uff9c\001\002\000\004\004\u0112\001\002" +
    "\000\050\003\u010c\005\037\015\066\047\063\065\070\066" +
    "\043\071\021\121\u0108\122\062\126\u0107\147\u0105\150\025" +
    "\152\057\153\034\154\022\155\065\156\053\157\040\166" +
    "\024\001\002\000\072\002\uff98\003\uff98\005\uff98\015\uff98" +
    "\047\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066" +
    "\uff98\067\uff98\070\uff98\071\uff98\121\uff98\122\uff98\126\uff98" +
    "\130\uff98\147\uff98\150\uff98\152\uff98\153\uff98\154\uff98\155" +
    "\uff98\156\uff98\157\uff98\166\uff98\170\uff98\001\002\000\050" +
    "\003\u010c\005\037\015\066\047\063\065\070\066\043\071" +
    "\021\121\u0108\122\062\126\u0107\147\u0105\150\025\152\057" +
    "\153\034\154\022\155\065\156\053\157\040\166\024\001" +
    "\002\000\072\002\uff9e\003\uff9e\005\uff9e\015\uff9e\047\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067" +
    "\uff9e\070\uff9e\071\uff9e\121\uff9e\122\uff9e\126\uff9e\130\uff9e" +
    "\147\uff9e\150\uff9e\152\uff9e\153\uff9e\154\uff9e\155\uff9e\156" +
    "\uff9e\157\uff9e\166\uff9e\170\uff9e\001\002\000\050\003\u010c" +
    "\005\037\015\066\047\063\065\070\066\043\071\021\121" +
    "\u0108\122\062\126\u0107\147\u0105\150\025\152\057\153\034" +
    "\154\022\155\065\156\053\157\040\166\024\001\002\000" +
    "\072\002\uff9a\003\uff9a\005\uff9a\015\uff9a\047\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070" +
    "\uff9a\071\uff9a\121\uff9a\122\uff9a\126\uff9a\130\uff9a\147\uff9a" +
    "\150\uff9a\152\uff9a\153\uff9a\154\uff9a\155\uff9a\156\uff9a\157" +
    "\uff9a\166\uff9a\170\uff9a\001\002\000\050\003\u010c\005\037" +
    "\015\066\047\063\065\070\066\043\071\021\121\u0108\122" +
    "\062\126\u0107\147\u0105\150\025\152\057\153\034\154\022" +
    "\155\065\156\053\157\040\166\024\001\002\000\072\002" +
    "\uffa2\003\uffa2\005\uffa2\015\uffa2\047\uffa2\061\uffa2\062\uffa2" +
    "\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071" +
    "\uffa2\121\uffa2\122\uffa2\126\uffa2\130\uffa2\147\uffa2\150\uffa2" +
    "\152\uffa2\153\uffa2\154\uffa2\155\uffa2\156\uffa2\157\uffa2\166" +
    "\uffa2\170\uffa2\001\002\000\004\004\u0120\001\002\000\006" +
    "\003\u011d\120\u011e\001\002\000\072\002\uff92\003\uff92\005" +
    "\uff92\015\uff92\047\uff92\061\uff92\062\uff92\063\uff92\064\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\121\uff92\122" +
    "\uff92\126\uff92\130\uff92\147\uff92\150\uff92\152\uff92\153\uff92" +
    "\154\uff92\155\uff92\156\uff92\157\uff92\166\uff92\170\uff92\001" +
    "\002\000\072\002\uffb8\003\uffb8\005\uffb8\015\uffb8\047\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\070\uffb8\071\uffb8\121\uffb8\122\uffb8\126\uffb8\130\uffb8" +
    "\147\uffb8\150\uffb8\152\uffb8\153\uffb8\154\uffb8\155\uffb8\156" +
    "\uffb8\157\uffb8\166\uffb8\170\uffb8\001\002\000\050\003\u010c" +
    "\005\037\015\066\047\063\065\070\066\043\071\021\121" +
    "\u0108\122\062\126\u0107\147\u0105\150\025\152\057\153\034" +
    "\154\022\155\065\156\053\157\040\166\024\001\002\000" +
    "\072\002\uffb9\003\uffb9\005\uffb9\015\uffb9\047\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\121\uffb9\122\uffb9\126\uffb9\130\uffb9\147\uffb9" +
    "\150\uffb9\152\uffb9\153\uffb9\154\uffb9\155\uffb9\156\uffb9\157" +
    "\uffb9\166\uffb9\170\uffb9\001\002\000\072\002\uff91\003\uff91" +
    "\005\uff91\015\uff91\047\uff91\061\uff91\062\uff91\063\uff91\064" +
    "\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91\121\uff91" +
    "\122\uff91\126\uff91\130\uff91\147\uff91\150\uff91\152\uff91\153" +
    "\uff91\154\uff91\155\uff91\156\uff91\157\uff91\166\uff91\170\uff91" +
    "\001\002\000\004\004\u0122\001\002\000\050\003\u010c\005" +
    "\037\015\066\047\063\065\070\066\043\071\021\121\u0108" +
    "\122\062\126\u0107\147\u0105\150\025\152\057\153\034\154" +
    "\022\155\065\156\053\157\040\166\024\001\002\000\072" +
    "\002\uff96\003\uff96\005\uff96\015\uff96\047\uff96\061\uff96\062" +
    "\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96" +
    "\071\uff96\121\uff96\122\uff96\126\uff96\130\uff96\147\uff96\150" +
    "\uff96\152\uff96\153\uff96\154\uff96\155\uff96\156\uff96\157\uff96" +
    "\166\uff96\170\uff96\001\002\000\050\003\u010c\005\037\015" +
    "\066\047\063\065\070\066\043\071\021\121\u0108\122\062" +
    "\126\u0107\147\u0105\150\025\152\057\153\034\154\022\155" +
    "\065\156\053\157\040\166\024\001\002\000\072\002\uffa0" +
    "\003\uffa0\005\uffa0\015\uffa0\047\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0" +
    "\121\uffa0\122\uffa0\126\uffa0\130\uffa0\147\uffa0\150\uffa0\152" +
    "\uffa0\153\uffa0\154\uffa0\155\uffa0\156\uffa0\157\uffa0\166\uffa0" +
    "\170\uffa0\001\002\000\004\004\u0127\001\002\000\050\003" +
    "\u010c\005\037\015\066\047\063\065\070\066\043\071\021" +
    "\121\u0108\122\062\126\u0107\147\u0105\150\025\152\057\153" +
    "\034\154\022\155\065\156\053\157\040\166\024\001\002" +
    "\000\072\002\uff94\003\uff94\005\uff94\015\uff94\047\uff94\061" +
    "\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94" +
    "\070\uff94\071\uff94\121\uff94\122\uff94\126\uff94\130\uff94\147" +
    "\uff94\150\uff94\152\uff94\153\uff94\154\uff94\155\uff94\156\uff94" +
    "\157\uff94\166\uff94\170\uff94\001\002\000\026\047\333\114" +
    "\205\122\207\123\211\127\203\134\204\142\210\143\206" +
    "\155\330\166\336\001\002\000\026\047\333\114\205\122" +
    "\207\123\211\127\203\134\204\142\210\143\206\155\330" +
    "\166\336\001\002\000\026\047\333\114\205\122\207\123" +
    "\211\127\203\134\204\142\210\143\206\155\330\166\336" +
    "\001\002\000\006\004\uffa8\115\uffa8\001\002\000\016\004" +
    "\uffaf\104\215\105\214\106\216\107\213\115\uffaf\001\002" +
    "\000\006\004\uffa6\115\uffa6\001\002\000\016\004\uffad\104" +
    "\215\105\214\106\216\107\213\115\uffad\001\002\000\006" +
    "\004\uffa7\115\uffa7\001\002\000\016\004\uffae\104\215\105" +
    "\214\106\216\107\213\115\uffae\001\002\000\004\115\u0133" +
    "\001\002\000\014\004\uff8d\076\uff8d\110\uff8d\111\uff8d\115" +
    "\uff8d\001\002\000\006\004\u0136\075\u0135\001\002\000\006" +
    "\003\u0137\134\u0138\001\002\000\070\003\uffdf\005\uffdf\015" +
    "\uffdf\047\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\067\uffdf\070\uffdf\071\uffdf\121\uffdf\122\uffdf\126" +
    "\uffdf\130\uffdf\147\uffdf\150\uffdf\152\uffdf\153\uffdf\154\uffdf" +
    "\155\uffdf\156\uffdf\157\uffdf\166\uffdf\170\uffdf\001\002\000" +
    "\004\004\u013a\001\002\000\004\004\u0139\001\002\000\070" +
    "\003\uffd8\005\uffd8\015\uffd8\047\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8" +
    "\121\uffd8\122\uffd8\126\uffd8\130\uffd8\147\uffd8\150\uffd8\152" +
    "\uffd8\153\uffd8\154\uffd8\155\uffd8\156\uffd8\157\uffd8\166\uffd8" +
    "\170\uffd8\001\002\000\070\003\uffd7\005\uffd7\015\uffd7\047" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\070\uffd7\071\uffd7\121\uffd7\122\uffd7\126\uffd7\130" +
    "\uffd7\147\uffd7\150\uffd7\152\uffd7\153\uffd7\154\uffd7\155\uffd7" +
    "\156\uffd7\157\uffd7\166\uffd7\170\uffd7\001\002\000\006\004" +
    "\u013d\075\u013c\001\002\000\006\003\u013e\123\u013f\001\002" +
    "\000\070\003\uffe1\005\uffe1\015\uffe1\047\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1" +
    "\071\uffe1\121\uffe1\122\uffe1\126\uffe1\130\uffe1\147\uffe1\150" +
    "\uffe1\152\uffe1\153\uffe1\154\uffe1\155\uffe1\156\uffe1\157\uffe1" +
    "\166\uffe1\170\uffe1\001\002\000\004\004\u0142\001\002\000" +
    "\004\004\uffdd\001\002\000\004\004\u0141\001\002\000\070" +
    "\003\uffdc\005\uffdc\015\uffdc\047\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc" +
    "\121\uffdc\122\uffdc\126\uffdc\130\uffdc\147\uffdc\150\uffdc\152" +
    "\uffdc\153\uffdc\154\uffdc\155\uffdc\156\uffdc\157\uffdc\166\uffdc" +
    "\170\uffdc\001\002\000\070\003\uffdb\005\uffdb\015\uffdb\047" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\121\uffdb\122\uffdb\126\uffdb\130" +
    "\uffdb\147\uffdb\150\uffdb\152\uffdb\153\uffdb\154\uffdb\155\uffdb" +
    "\156\uffdb\157\uffdb\166\uffdb\170\uffdb\001\002\000\004\004" +
    "\uff84\001\002\000\004\004\uff7b\001\002\000\004\004\uff7d" +
    "\001\002\000\004\004\uff7e\001\002\000\004\004\uff7c\001" +
    "\002\000\004\004\u0149\001\002\000\072\002\uff83\003\uff83" +
    "\005\uff83\015\uff83\047\uff83\061\uff83\062\uff83\063\uff83\064" +
    "\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83\121\uff83" +
    "\122\uff83\126\uff83\130\uff83\147\uff83\150\uff83\152\uff83\153" +
    "\uff83\154\uff83\155\uff83\156\uff83\157\uff83\166\uff83\170\uff83" +
    "\001\002\000\030\003\334\047\333\114\205\122\207\123" +
    "\211\127\203\134\204\142\210\143\206\155\330\166\336" +
    "\001\002\000\004\115\u014c\001\002\000\006\003\u0102\120" +
    "\u0103\001\002\000\070\003\uff88\005\uff88\015\uff88\047\uff88" +
    "\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067" +
    "\uff88\070\uff88\071\uff88\121\uff88\122\uff88\126\uff88\130\uff88" +
    "\147\uff88\150\uff88\152\uff88\153\uff88\154\uff88\155\uff88\156" +
    "\uff88\157\uff88\166\uff88\170\uff88\001\002\000\006\004\u0150" +
    "\075\u014f\001\002\000\006\003\u0151\127\u0152\001\002\000" +
    "\070\003\uffe0\005\uffe0\015\uffe0\047\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\121\uffe0\122\uffe0\126\uffe0\130\uffe0\147\uffe0\150\uffe0" +
    "\152\uffe0\153\uffe0\154\uffe0\155\uffe0\156\uffe0\157\uffe0\166" +
    "\uffe0\170\uffe0\001\002\000\004\004\u0154\001\002\000\004" +
    "\004\u0153\001\002\000\070\003\uffda\005\uffda\015\uffda\047" +
    "\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda" +
    "\067\uffda\070\uffda\071\uffda\121\uffda\122\uffda\126\uffda\130" +
    "\uffda\147\uffda\150\uffda\152\uffda\153\uffda\154\uffda\155\uffda" +
    "\156\uffda\157\uffda\166\uffda\170\uffda\001\002\000\070\003" +
    "\uffd9\005\uffd9\015\uffd9\047\uffd9\061\uffd9\062\uffd9\063\uffd9" +
    "\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\121" +
    "\uffd9\122\uffd9\126\uffd9\130\uffd9\147\uffd9\150\uffd9\152\uffd9" +
    "\153\uffd9\154\uffd9\155\uffd9\156\uffd9\157\uffd9\166\uffd9\170" +
    "\uffd9\001\002\000\004\115\u0156\001\002\000\004\004\uff72" +
    "\001\002\000\004\004\u0158\001\002\000\072\002\uff71\003" +
    "\uff71\005\uff71\015\uff71\047\uff71\061\uff71\062\uff71\063\uff71" +
    "\064\uff71\065\uff71\066\uff71\067\uff71\070\uff71\071\uff71\121" +
    "\uff71\122\uff71\126\uff71\130\uff71\147\uff71\150\uff71\152\uff71" +
    "\153\uff71\154\uff71\155\uff71\156\uff71\157\uff71\166\uff71\170" +
    "\uff71\001\002\000\072\002\uff66\003\uff66\005\uff66\015\uff66" +
    "\047\uff66\061\uff66\062\uff66\063\uff66\064\uff66\065\uff66\066" +
    "\uff66\067\uff66\070\uff66\071\uff66\121\uff66\122\uff66\126\uff66" +
    "\130\uff66\147\uff66\150\uff66\152\uff66\153\uff66\154\uff66\155" +
    "\uff66\156\uff66\157\uff66\166\uff66\170\uff66\001\002\000\004" +
    "\003\u015b\001\002\000\004\004\u015c\001\002\000\072\002" +
    "\uffbf\003\uffbf\005\uffbf\015\uffbf\047\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\121\uffbf\122\uffbf\126\uffbf\130\uffbf\147\uffbf\150\uffbf" +
    "\152\uffbf\153\uffbf\154\uffbf\155\uffbf\156\uffbf\157\uffbf\166" +
    "\uffbf\170\uffbf\001\002\000\010\003\244\123\246\127\247" +
    "\001\002\000\004\115\u015f\001\002\000\004\004\uff68\001" +
    "\002\000\004\004\u0161\001\002\000\072\002\uff67\003\uff67" +
    "\005\uff67\015\uff67\047\uff67\061\uff67\062\uff67\063\uff67\064" +
    "\uff67\065\uff67\066\uff67\067\uff67\070\uff67\071\uff67\121\uff67" +
    "\122\uff67\126\uff67\130\uff67\147\uff67\150\uff67\152\uff67\153" +
    "\uff67\154\uff67\155\uff67\156\uff67\157\uff67\166\uff67\170\uff67" +
    "\001\002\000\070\003\047\005\037\015\066\047\063\061" +
    "\044\062\041\063\045\064\064\065\070\066\043\067\046" +
    "\070\042\071\021\121\052\122\062\126\054\130\036\147" +
    "\035\150\025\152\057\153\034\154\022\155\065\156\053" +
    "\157\040\166\024\170\050\001\002\000\004\002\uffee\001" +
    "\002\000\070\003\047\005\037\015\066\047\063\061\044" +
    "\062\041\063\045\064\064\065\070\066\043\067\046\070" +
    "\042\071\021\121\052\122\062\126\054\130\036\147\035" +
    "\150\025\152\057\153\034\154\022\155\065\156\053\157" +
    "\040\166\024\170\050\001\002\000\004\002\uffea\001\002" +
    "\000\070\003\047\005\037\015\066\047\063\061\044\062" +
    "\041\063\045\064\064\065\070\066\043\067\046\070\042" +
    "\071\021\121\052\122\062\126\054\130\036\147\035\150" +
    "\025\152\057\153\034\154\022\155\065\156\053\157\040" +
    "\166\024\170\050\001\002\000\004\002\uffe8\001\002\000" +
    "\004\123\u0169\001\002\000\004\115\u016a\001\002\000\004" +
    "\004\uff76\001\002\000\004\004\u016c\001\002\000\072\002" +
    "\uff75\003\uff75\005\uff75\015\uff75\047\uff75\061\uff75\062\uff75" +
    "\063\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071" +
    "\uff75\121\uff75\122\uff75\126\uff75\130\uff75\147\uff75\150\uff75" +
    "\152\uff75\153\uff75\154\uff75\155\uff75\156\uff75\157\uff75\166" +
    "\uff75\170\uff75\001\002\000\022\003\133\025\130\026\134" +
    "\051\135\052\125\053\131\054\126\144\132\001\002\000" +
    "\072\002\uff74\003\uff74\005\uff74\015\uff74\047\uff74\061\uff74" +
    "\062\uff74\063\uff74\064\uff74\065\uff74\066\uff74\067\uff74\070" +
    "\uff74\071\uff74\121\uff74\122\uff74\126\uff74\130\uff74\147\uff74" +
    "\150\uff74\152\uff74\153\uff74\154\uff74\155\uff74\156\uff74\157" +
    "\uff74\166\uff74\170\uff74\001\002\000\070\003\047\005\037" +
    "\015\066\047\063\061\044\062\041\063\045\064\064\065" +
    "\070\066\043\067\046\070\042\071\021\121\052\122\062" +
    "\126\054\130\036\147\035\150\025\152\057\153\034\154" +
    "\022\155\065\156\053\157\040\166\024\170\050\001\002" +
    "\000\004\002\ufff2\001\002\000\004\115\u0172\001\002\000" +
    "\004\004\uff6c\001\002\000\004\004\u0174\001\002\000\072" +
    "\002\uff6b\003\uff6b\005\uff6b\015\uff6b\047\uff6b\061\uff6b\062" +
    "\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\070\uff6b" +
    "\071\uff6b\121\uff6b\122\uff6b\126\uff6b\130\uff6b\147\uff6b\150" +
    "\uff6b\152\uff6b\153\uff6b\154\uff6b\155\uff6b\156\uff6b\157\uff6b" +
    "\166\uff6b\170\uff6b\001\002\000\030\003\u017b\047\333\114" +
    "\205\122\207\123\211\127\203\134\204\142\210\143\206" +
    "\155\330\166\336\001\002\000\074\002\uffba\003\uffba\005" +
    "\uffba\015\uffba\047\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\115\u0178\121" +
    "\uffba\122\uffba\126\uffba\130\uffba\147\uffba\150\uffba\152\uffba" +
    "\153\uffba\154\uffba\155\uffba\156\uffba\157\uffba\166\uffba\170" +
    "\uffba\001\002\000\072\002\uffbe\003\uffbe\005\uffbe\015\uffbe" +
    "\047\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\067\uffbe\070\uffbe\071\uffbe\121\uffbe\122\uffbe\126\uffbe" +
    "\130\uffbe\147\uffbe\150\uffbe\152\uffbe\153\uffbe\154\uffbe\155" +
    "\uffbe\156\uffbe\157\uffbe\166\uffbe\170\uffbe\001\002\000\006" +
    "\003\u011d\120\u011e\001\002\000\072\002\uffbc\003\uffbc\005" +
    "\uffbc\015\uffbc\047\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\121\uffbc\122" +
    "\uffbc\126\uffbc\130\uffbc\147\uffbc\150\uffbc\152\uffbc\153\uffbc" +
    "\154\uffbc\155\uffbc\156\uffbc\157\uffbc\166\uffbc\170\uffbc\001" +
    "\002\000\004\115\u017d\001\002\000\010\003\u011d\115\uffa4" +
    "\120\u011e\001\002\000\072\002\uffbb\003\uffbb\005\uffbb\015" +
    "\uffbb\047\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb" +
    "\066\uffbb\067\uffbb\070\uffbb\071\uffbb\121\uffbb\122\uffbb\126" +
    "\uffbb\130\uffbb\147\uffbb\150\uffbb\152\uffbb\153\uffbb\154\uffbb" +
    "\155\uffbb\156\uffbb\157\uffbb\166\uffbb\170\uffbb\001\002\000" +
    "\006\003\u011d\120\u011e\001\002\000\072\002\uffbd\003\uffbd" +
    "\005\uffbd\015\uffbd\047\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\121\uffbd" +
    "\122\uffbd\126\uffbd\130\uffbd\147\uffbd\150\uffbd\152\uffbd\153" +
    "\uffbd\154\uffbd\155\uffbd\156\uffbd\157\uffbd\166\uffbd\170\uffbd" +
    "\001\002\000\070\003\047\005\037\015\066\047\063\061" +
    "\044\062\041\063\045\064\064\065\070\066\043\067\046" +
    "\070\042\071\021\121\052\122\062\126\054\130\036\147" +
    "\035\150\025\152\057\153\034\154\022\155\065\156\053" +
    "\157\040\166\024\170\050\001\002\000\004\002\ufffd\001" +
    "\002\000\012\003\004\122\007\126\005\130\006\001\002" +
    "\000\004\002\ufff7\001\002\000\012\003\004\122\007\126" +
    "\005\130\006\001\002\000\004\002\ufff9\001\002\000\012" +
    "\003\004\122\007\126\005\130\006\001\002\000\004\002" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0184\000\004\002\007\001\001\000\004\051\u0184\001" +
    "\001\000\004\052\u0182\001\001\000\004\053\u0180\001\001" +
    "\000\004\047\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u017e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\026\004\032\005\025\006\066\014\055" +
    "\017\060\024\050\027\054\035\057\036\022\037\027\042" +
    "\031\043\030\001\001\000\004\031\u0176\001\001\000\002" +
    "\001\001\000\004\055\u016e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u0165\001\001\000\004\061\u0163\001" +
    "\001\000\004\057\u0161\001\001\000\002\001\001\000\004" +
    "\070\u0159\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\315\066\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\273\001\001\000\004\060\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\102\001\001" +
    "\000\004\025\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\103\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\123" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\120\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\116\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\114\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\122\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\115\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\211" +
    "\046\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\226\001\001\000\004\007\224" +
    "\001\001\000\004\007\222\001\001\000\004\007\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\241\004\032\005\025\006\066\014\055\017\060\024\050" +
    "\027\054\035\057\036\022\037\027\042\031\043\030\001" +
    "\001\000\002\001\001\000\004\021\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\112\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\272\004\032\005\025\006\066\014\055" +
    "\017\060\024\050\027\054\035\057\036\022\037\027\042" +
    "\031\043\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\316" +
    "\004\032\005\025\006\066\014\055\017\060\024\050\027" +
    "\054\035\057\036\022\037\027\042\031\043\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\325\001\001\000\002\001\001\000\010\007\334\030" +
    "\331\033\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\372\001\001\000" +
    "\004\007\371\001\001\000\004\007\370\001\001\000\006" +
    "\007\367\033\366\001\001\000\006\007\365\033\364\001" +
    "\001\000\004\007\363\001\001\000\006\007\362\033\361" +
    "\001\001\000\006\007\360\033\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\374\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u0103\001\001\000\002\001\001\000" +
    "\016\005\u0108\014\u0105\017\u010a\024\u010d\027\u0109\034\u010c" +
    "\001\001\000\002\001\001\000\004\100\u0125\001\001\000" +
    "\004\072\u0123\001\001\000\004\077\u0120\001\001\000\002" +
    "\001\001\000\004\071\u0117\001\001\000\004\075\u0115\001" +
    "\001\000\004\073\u0113\001\001\000\004\076\u0110\001\001" +
    "\000\002\001\001\000\004\074\u010e\001\001\000\016\005" +
    "\u0108\014\u0105\017\u010a\024\u010d\027\u0109\034\u010f\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\u0108\014" +
    "\u0105\017\u010a\024\u010d\027\u0109\034\u0112\001\001\000\002" +
    "\001\001\000\016\005\u0108\014\u0105\017\u010a\024\u010d\027" +
    "\u0109\034\u0114\001\001\000\002\001\001\000\016\005\u0108" +
    "\014\u0105\017\u010a\024\u010d\027\u0109\034\u0116\001\001\000" +
    "\002\001\001\000\016\005\u0108\014\u0105\017\u010a\024\u010d" +
    "\027\u0109\034\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\u0108\014\u0105\017\u010a\024\u010d\027" +
    "\u0109\034\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\u0108\014\u0105\017\u010a\024" +
    "\u010d\027\u0109\034\u0122\001\001\000\002\001\001\000\016" +
    "\005\u0108\014\u0105\017\u010a\024\u010d\027\u0109\034\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\u0108" +
    "\014\u0105\017\u010a\024\u010d\027\u0109\034\u0127\001\001\000" +
    "\002\001\001\000\006\007\u0130\033\u012f\001\001\000\006" +
    "\007\u012e\033\u012d\001\001\000\006\007\u012c\033\u012b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\334\030" +
    "\u014a\033\330\001\001\000\002\001\001\000\004\044\u014c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\u0156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u015d\001\001\000\002\001\001" +
    "\000\004\113\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\u0162\004\032\005\025\006\066\014\055" +
    "\017\060\024\050\027\054\035\057\036\022\037\027\042" +
    "\031\043\030\001\001\000\002\001\001\000\034\003\u0164" +
    "\004\032\005\025\006\066\014\055\017\060\024\050\027" +
    "\054\035\057\036\022\037\027\042\031\043\030\001\001" +
    "\000\002\001\001\000\034\003\u0166\004\032\005\025\006" +
    "\066\014\055\017\060\024\050\027\054\035\057\036\022" +
    "\037\027\042\031\043\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\u016a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u016d\001" +
    "\001\000\002\001\001\000\034\003\u016f\004\032\005\025" +
    "\006\066\014\055\017\060\024\050\027\054\035\057\036" +
    "\022\037\027\042\031\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\111\u0172\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\334\030\u0179\033\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u017b\001\001\000\002\001\001\000\004\032\u017d\001" +
    "\001\000\002\001\001\000\034\003\u017f\004\032\005\025" +
    "\006\066\014\055\017\060\024\050\027\054\035\057\036" +
    "\022\037\027\042\031\043\030\001\001\000\002\001\001" +
    "\000\004\002\u0181\001\001\000\002\001\001\000\004\002" +
    "\u0183\001\001\000\002\001\001\000\004\002\u0185\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    int idenx; // num de fila
    ArrayList<String> listavalor1 = new ArrayList<String>();  // guarda tipos
    ArrayList<String> listapila = new ArrayList<String>();  
    ArrayList<String> listacond = new ArrayList<String>();   
    ArrayList<String> listaexp = new ArrayList<String>();   
    Stack<String> pila = new Stack(); // pilasemantica
    Stack<String> pilac = new Stack(); // pilade codigo intermedio
    int temporal =0;
    int label =0;
    String resultado ="";

 //  Hashtable<String, Lexema> tabla = new Hashtable<>();
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    
    public boolean valorTipo(ArrayList<String> list,String op){
        String x= list.get(list.size()-1);//ultimo elemento agregar en asignacion sera la id
        String v;
        
        switch(Operador(op)){
        case "arit":
            for (int i = 0; i < list.size(); i++) {
              if((list.get(i).equals("Text") || list.get(i).equals("Bool")) ) {
                System.out.println(list.get(i)+"");       
                System.out.println("false en arit");  
                   
                return false;    
                }
            }
            return vTipo(list);
       
        case "logico":
            for (int i = 0; i < list.size(); i++) {
              if((list.get(i).equals("Text") || list.get(i).equals("Int")|| list.get(i).equals("Float") ) ) {
            System.out.println(list.get(i)+"");       
            System.out.println("false en logica"); 
                    
                return false;    
                }
            }
            return vTipo(list);

        case "comp":
            for (int i = 0; i < list.size(); i++) {
              if((list.get(i).equals("Text") || list.get(i).equals("Bool")) ) {
            System.out.println(list.get(i)+"");       
            System.out.println("false en compara");  
                   
                return false;    
                }
            }
            return vTipo(list);
        case "igual":
            System.out.println("== op");  
            return vTipo(list);
        case "":
            System.out.println("sin op");  
                
            return vTipo(list);
        default:
            return vTipo(list);
        }  
    }

    public boolean vTipo(ArrayList<String> list){
        String x = list.get(list.size()-1);//ultimo elemento agregar en asignacion sera la id
        String v;
         
        for (int i = 0; i < list.size(); i++) {     
            v = list.get(i);
            if(v.equals(x)){
            }else{
 
                return false;
                 }
            }
                listavalor1.clear();
                listavalor1.add(x);
            return true;
    }
    
    
    public String Operador(String token) {
        if( (token.equals("+") || token.equals("-") || token.equals("*")|| token.equals("/")) ){
            return "arit";    
        }if( (token.equals(">=") || token.equals("<=")|| token.equals("!=") || token.equals("<")|| token.equals(">") ) ){
            return "comp";     
        }if( (token.equals("||") || token.equals("&&")) ){
            return "logico";     
        }if(token.equals("==") ){
            return "igual"; // 
        }else{ return ""; } 
    }

    public String operar(String Izq, String op, String Der) {
        
        String a = Izq;
        String b = Der;

        switch (op) {
            case "+":
                return a+"+"+b;
            case "-":
                return a+"-"+b;
            case "*":
                return a+"*"+b;
            case "/":
                return a+"/"+b;
            default:
                return "false";
        }
    }
/* -------------------------------- codigo intermedio ------------------------------------ */
   public void pos() { // exp en sufijo a CodIntermedio
        String Der, Izq,x;

        for (int i = 0; i < listapila.size(); i++) {
                  System.out.println(listapila.get(i));
            }

        if(listapila.size()==1){
            resultado = resultado + "= "+listapila.get(0)+" "+listapila.get(1)+"\n\n";
            System.out.println(resultado); // imprimir codigo intermedio
            Main.insertCodInt(resultado);
        }else{

        for (String token : listapila) {
        if(!(token.charAt(0)== '@')){
            if (cOperador(token)) {
                Der = pila.pop();
                if (pila.isEmpty()) {
                    System.err.println("Error, elemento faltante");
                }
                Izq = pila.pop();
                temporal++;
                
                resultado = resultado+ coperar(Izq, token, Der)+"t"+temporal+"\n";
                pila.push("t"+temporal);
            } else {
               pila.push(token);
            }  
        }else{   
            resultado = resultado +"= "+"t"+temporal+" "+token+"\n\n";
            }
        }

        System.out.println(resultado); // imprimir codigo intermedio
        Main.insertCodInt(resultado);
        temporal = 0;
        }
    }
/*---------------------------------------------------------------*/
   public String exp(int t,String id) { // acomodar exp en sufijo 
        String Der, Izq,x,res="";
        if(t == 1){
             for (String token : listacond) {
                if (cOperador(token)) {
                Der = pila.pop();
                if (pila.isEmpty()) {
                    System.err.println("Error, elemento faltante");
                }
                Izq = pila.pop();
                x = coperar(Izq, token, Der)+" ";
                System.out.println(x);
                listacond.clear();
                return  x;
                
            } else {
               pila.push(token);
            }  
            }

        }else{
        for (String token : listapila) {
            if (cOperador(token)) {
                Der = pila.pop();
                if (pila.isEmpty()) {
                    System.err.println("Error, elemento faltante");
                }
                Izq = pila.pop();
                temporal++;
                res = res+ coperar(Izq, token, Der)+"t"+temporal+"\n";
                pila.push("t"+temporal);
            } else {
               pila.push(token);
            }  
        }
        res = res +"= "+"t"+temporal+" "+id+"\n\n";
        System.out.println(res); // imprimir codigo intermedio
        temporal = 0;
        return res;
       
        }
            return "false";
    }


    private boolean cOperador(String token) {
        return token.equals("+") || token.equals("-") || token.equals("*")
                || token.equals("/") || token.equals(">")|| token.equals("==");
    }

   public String coperar(String Izq, String op, String Der) {
        String a = Izq;
        String b = Der;

        switch (op) {
            case "+":
                return "suma "+a+" "+b+" ";
            case "-":
                return "resta "+a+" "+b+" ";
            case "*":
                return "mul "+a+" "+b+" ";
            case "/":
                return "div "+a+" "+b+" ";
            case ">":
                return a+" > "+b+" ";
            case "==":
                return a+" == "+b+" ";    
            default:
                return "false";
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // OBJ_PARAMETROS ::= PortA Parentesis_izq Numero_Entero NT$51 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$51 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$51",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OBJETO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> OBJETO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OBJETO ::= SmartCamera NT$50 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$50 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$50",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // OBJETO ::= Temp NT$49 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$49 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$49",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // DEC_OBJETO ::= error NT$48 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$48 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$48",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // DEC_OBJETO ::= New NT$47 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$47 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New OBJETO ; ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$47",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EXP_2 ::= False 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ False ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EXP_2 ::= True 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ True ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EXP_2 ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXP_2 ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // EXP_2 ::= Numero_Flotante 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // EXP_2 ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // EXP ::= Parentesis_izq error Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP ( error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // EXP ::= Parentesis_izq error EXP Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( error EXP ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXP ::= Parentesis_izq EXP error Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXP ::= EXP Division error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXP ::= EXP Multiplicacion error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXP ::= EXP Resta error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXP ::= EXP Suma error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXP ::= False 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ False ]\n");
                parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
             //    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXP ::= True 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ True ]\n");
                parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
             //    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXP ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listacond.add(s+"");
                parser.listapila.add(s+"");
                parser.listavalor1.add(Main.returntipo(s+""));  //agregar Tipo a la arraylist
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXP ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listavalor1.add("Text");    //agregar Tipo a la arraylist
                 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXP ::= Numero_Flotante 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listacond.add(s+"");
                parser.listapila.add(s+"");
                parser.listavalor1.add("Float");    //agregar Tipo a la arraylist
             //    
              
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXP ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
                parser.listacond.add(s+"");
                parser.listapila.add(s+"");
                parser.listavalor1.add("Int");    //agregar Tipo a la arraylist
                 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXP ::= Parentesis_izq EXP Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP ) ]\n"); 
                
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXP ::= EXP Division EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / EXP ]\n"); 
                parser.listapila.add(a+"");
                if(parser.valorTipo(parser.listavalor1,a+"") ){

                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;     
                    parser.listavalor1.clear();
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXP ::= EXP Multiplicacion EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * EXP ]\n");
                parser.listapila.add(a+"");
                if(parser.valorTipo(parser.listavalor1,a+"") ){

                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;     
                    parser.listavalor1.clear();
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXP ::= EXP Resta EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - EXP ]\n");
                parser.listapila.add(a+"");
                if(parser.valorTipo(parser.listavalor1,a+"") ){
                    
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;      
                    parser.listavalor1.clear();
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXP ::= EXP Suma EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + EXP ]\n"); 
                parser.listapila.add(a+"");
                if(parser.valorTipo(parser.listavalor1,a+"") ){
                    
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
                    Main.error = true;     
                    parser.listavalor1.clear();
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXP_LIST ::= EXP NT$46 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LIST",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$46 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP_LIST ::= [ EXP PComa ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$46",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // DECL_TIPO ::= error NT$45 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$45 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$45",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DECL_TIPO ::= DEC_OBJETO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ DEC_OBJETO ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // DECL_TIPO ::= EXP_LIST 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ EXP_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DECL ::= Identificador Asignacion EXP PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = EXP PComa ]\n");
        parser.listavalor1.add(Main.returntipo(s+""));  //agregar Tipo a la arraylist
            if(Main.buscarid(s+"")  ){
                if(parser.valorTipo(parser.listavalor1,"") ){ //tipos compatibles??
                    parser.listapila.add("@"+s);
                    parser.pos();
                    parser.listavalor1.clear();
                    parser.listapila.clear();
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles  "); 
                    Main.error = true;   
                    parser.listavalor1.clear();
                }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
                 parser.listavalor1.clear();
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // DECL ::= Identificador Asignacion VALOR PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP ::= [ "+s+" = "+a+" PComa ]\n");   
        parser.listavalor1.add(Main.returntipo(s+""));  //agregar Tipo a la arraylist
            if(Main.buscarid(s+"")  ){ //id declarada??
                if(parser.valorTipo(parser.listavalor1,"") ){ //tipos compatibles??
                    System.out.println("3");
                    parser.listavalor1.clear();
                }else{
                    Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera Numeros "); 
                    Main.error = true;   
                    parser.listavalor1.clear();
                }
                 }else{
                 Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e019 - Variable "+s+" no declarada  en: " ); 
                 Main.error = true; 
                 parser.listavalor1.clear();
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ENA_PORT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ENA_PORT ::= Enable Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ Enable() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ACT_PORT ::= PortD error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // THIS_FUNC_TYPE ::= GetTemp Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ GetTemp() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // THIS_FUNC ::= This Punto THIS_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC ::= [ This Punto FUNC_TYPE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // FUNC_PARAMS ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e011 - Sintaxis erronea en la función Program -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC Coma Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", THIS_FUNC, "+b+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+", THIS_FUNC ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // FUNC_PARAMS ::= Cadena Coma Numero_Entero Coma Numero_Entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", "+b+", "+c+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // FUNC_PARAMS ::= Numero_Entero Coma Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+","+a+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FUNC_TYPE ::= error NT$44 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$44 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$44",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // FUNC_TYPE ::= Move Parentesis_izq Cadena Coma Numero_Entero Coma Numero_Entero Parentesis_der NT$43 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$43 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Move("+s+","+a+","+b+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$43",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FUNC_TYPE ::= StopRec Parentesis_izq Parentesis_der NT$42 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$42 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ StopRec(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$42",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FUNC_TYPE ::= Record Parentesis_izq Parentesis_der NT$41 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$41 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Record(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$41",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FUNC_TYPE ::= Off Parentesis_izq Parentesis_der NT$40 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$40 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$40",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FUNC_TYPE ::= On Parentesis_izq Parentesis_der NT$39 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$39 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ On(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$39",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUNC_TYPE ::= IsMove Parentesis_izq Parentesis_der NT$38 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$38 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsMove(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$38",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FUNC_TYPE ::= IsOn Parentesis_izq Parentesis_der NT$37 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$37 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOn(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$37",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FUNC ::= Punto error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Punto FUNC_TYPE ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FUNC ::= Retroceder Parentesis_izq FUNC_PARAMS Parentesis_der NT$36 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$36 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Retroceder(FUNC_PARAMS); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$36",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FUNC ::= Avanzar Parentesis_izq FUNC_PARAMS Parentesis_der NT$35 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$35 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Avanzar(FUNC_PARAMS); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$35",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FUNC ::= Detener Parentesis_izq Parentesis_der NT$34 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$34 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Detener(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$34",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FUNC ::= IsSound Parentesis_izq Parentesis_der NT$33 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$33 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsSound(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$33",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // FUNC ::= Whistle Parentesis_izq Parentesis_der NT$32 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$32 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Whistle(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$32",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FUNC ::= Capture Parentesis_izq Parentesis_der NT$31 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$31 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Capture(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$31",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FUNC ::= Camera Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FUNC ::= Micro Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FUNC ::= RecordTime Parentesis_izq Numero_Entero Parentesis_der NT$30 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$30 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ RecordTime("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$30",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VALUE_IN ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis erronea en el método Receive -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VALUE_IN ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VALUE_IN ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VALUE_IN ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VALUE_OUT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis erronea en el método Display -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VALUE_OUT ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VALUE_OUT ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALUE_OUT ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IN_OUT ::= Receive error NT$29 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$29 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis en el método Receive erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$29",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IN_OUT ::= Receive Parentesis_izq VALUE_IN Parentesis_der NT$28 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$28 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive VALUE PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$28",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IN_OUT ::= Display VALUE_OUT NT$27 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$27 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Display VALUE PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$27",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUNC_TYPE_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE_IF ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FUNC_TYPE_IF ::= IsMove Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsMove() ]\n"); 
        parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
         
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FUNC_TYPE_IF ::= IsOn Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsOn() ]\n"); 
        parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
         
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // While_STMT ::= While Parentesis_izq COND Parentesis_der COND_FOR_2 
            {
              Object RESULT =null;
		
     //   Main.arbolSin.add("( "+(sright+1)+" ) ---> While_STMT ::= [ While ( COND ) COND_FOR_2 ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("While_STMT",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COND_FOR_2 ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_FOR_2",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COND_FOR_2 ::= Llave_izq STMT_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ { STMT_IF }  ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_FOR_2",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FOR_STMT ::= For Parentesis_izq Int Identificador Asignacion Numero_Entero NT$26 PComa COND PComa Identificador Inc Parentesis_der COND_FOR_2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_STMT",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$26 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) ---> FOR_STMT ::= [ For(TIPO "+s+" = "+a+"; COND ;"+s+" Inc) ]\n");
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(a+""); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$26",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IF_FUNC_TYPE ::= IsSound Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ IsSound() ]\n"); 
         parser.listavalor1.add("Bool");    //agregar Tipo a la arraylist
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IF_FUNC_TYPE ::= Camera Punto FUNC_TYPE_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IF_FUNC_TYPE ::= Micro Punto FUNC_TYPE_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // STMT_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ]\n");
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // STMT_IF ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ }); ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // STMT_IF ::= Llave_der Else COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ } ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // STMT_IF ::= Llave_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ } ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // STMT_IF ::= ERROR3 NT$25 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$25 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR3 ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$25",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // STMT_IF ::= ERROR NT$24 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$24 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$24",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // STMT_IF ::= error NT$23 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$23 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$23",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // STMT_IF ::= IF_STMT NT$22 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$22 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$22",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // STMT_IF ::= IN_OUT NT$21 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$21 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$21",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // STMT_IF ::= FUNC NT$20 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$20 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ FUNC STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$20",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // STMT_IF ::= ACT_PORT NT$19 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$19 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ACT_PORT STMT_IF]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // STMT_IF ::= DECL NT$18 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$18 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ DECL STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e015 - Condición inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ IF_FUNC_TYPE ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COND ::= IF_FUNC_TYPE Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COND ::= IF_FUNC_TYPE And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COND ::= IF_FUNC_TYPE Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }          
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COND ::= EXP Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COND ::= EXP And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COND ::= EXP Diferente IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COND ::= EXP Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COND ::= IF_FUNC_TYPE Or EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COND ::= IF_FUNC_TYPE And EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
         
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COND ::= IF_FUNC_TYPE Igual EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");    
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COND ::= EXP Or EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COND ::= EXP And EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COND ::= EXP Menor_igual EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COND ::= EXP Menor EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listavalor1.clear();
            parser.listapila.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND ::= EXP Mayor_igual EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
        parser.listapila.clear();
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND ::= EXP Mayor EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
        parser.listacond.add(a+"");
        parser.listapila.clear();
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND ::= EXP Diferente EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
        parser.listacond.add(a+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();
            
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listapila.clear();
            parser.listavalor1.clear();
        } 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND ::= EXP Igual EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
        System.out.println(parser.valorTipo(parser.listavalor1,a+"")+"");

        parser.listacond.add(a+"");
        if(parser.valorTipo(parser.listavalor1,a+"") ){
            parser.listapila.clear();
            parser.listavalor1.clear();    
        }else{
            Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e021 - Tipos incompatibles para el operador '"+a+"': "); 
            Main.error = true;      
            parser.listavalor1.clear();
        }            
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND_IF_2 ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND_IF_2 ::= Llave_izq STMT_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ { IF_FUNC_TYPE }  ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND_IF ::= Parentesis_izq error COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND_IF ::= error Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND_IF ::= Parentesis_izq COND Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ ( COND ) COND_IF_2 ]\n");

             System.out.println("cond:");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF_STMT ::= If COND_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> IF_STMT ::= [ If COND_IF ; ]\n");
        parser.resultado+="if";
      //   parser.resultado ++ "= "+listapila.get(0)+" "+listapila.get(1)+"\n\n";
      //   Main.insertCodInt(resultado);

        System.out.println("if:");
        String x="";
        
          for (int i = 0; i < parser.listacond.size(); i++) {
                  x+= parser.listacond.get(i);
            }
        System.out.println("cond:"+x);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_STMT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // STMT ::= ERROR3 NT$17 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$17 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STMT ::= ERROR NT$16 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$16 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STMT ::= error NT$15 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$15 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // STMT ::= IN_OUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ IN_OUT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // STMT ::= FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ FUNC ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STMT ::= ACT_PORT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ ACT_PORT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STMT ::= DECL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ DECL ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CIERRE ::= IF_STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ IF_STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CIERRE ::= STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CIERRE ::= ERROR2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CIERRE ::= ERROR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CIERRE ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CIERRE ::= Llave_der Parentesis_der PComa error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CIERRE ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO ::= Bool 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Bool ]\n");
     //   Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO ::= Float 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Float ]\n");
   //     Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= Text 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Text ]\n");
     //   Main.listaIdValor.add(s+"");
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= Int 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Int ]\n");
     //   Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLS ::= Bool Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un True o False "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLS ::= Bool Identificador Asignacion False PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLS ::= Bool Identificador Asignacion True PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLS ::= Float Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Número real "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLS ::= Float Identificador Asignacion Numero_Flotante PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
         Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
       
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLS ::= Text Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Cadena "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLS ::= Text Identificador Asignacion Cadena PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Text "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
      
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLS ::= Int Identificador Asignacion error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error "+s+" ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e020 - Tipos incompatibles se espera un Número entero "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLS ::= Int Identificador Asignacion Numero_Entero NT$14 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$14 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLS ::= [ Int "+s+" = "+a+"; ]\n");  
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(a+"");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLVA ::= Bool Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Bool "+s+" ]\n");
        //llenar tablad de simbolo
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(" "); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLVA ::= Float Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Float "+s+" ]\n");
        //llenar tablad de simbolo
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(" "); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLVA ::= Text Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Text "+s+" ]\n");
        //llenar tablad de simbolo
        Main.listaIdValor.add(s+"");
        Main.listaIdTipo.add(b+"");
        Main.listaIdLinea.add((sright+1));
        Main.listaValoresId.add(" "); 
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLVA ::= Int Identificador PComa 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLVA ::= [  Int "+s+" ]\n");
        if(!Main.buscarid(s+"")){ //buscar id repetido
          //llenar tablad de simbolo
          Main.listaIdValor.add(s+"");
          Main.listaIdTipo.add(b+"");
          Main.listaIdLinea.add((sright+1));
          Main.listaValoresId.add(" ");
        }else{
          Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error semantico - e018 - Variable "+s+" ya declarada  en: " ); 
          Main.error = true; 
        }  
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLVA ::= DECLS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLVA ::= [ DECLS ]\n"); 
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPOR ::= Import Identificador Punto Identificador NT$13 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$13 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" Punto "+a+" PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPOR ::= Import Identificador NT$12 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$12 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMT_LIST ::= CIERRE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ CIERRE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STMT_LIST ::= While_STMT NT$11 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [  While_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STMT_LIST ::= FOR_STMT NT$10 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ FOR_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STMT_LIST ::= IF_STMT NT$9 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IF_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STMT_LIST ::= STMT NT$8 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STMT_LIST ::= error NT$7 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STMT_LIST ::= DECLVA NT$6 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
// declaraciones
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ DECLVA STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STMT_LIST ::= IMPOR NT$5 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IMPOR STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - No se encontró el Metodo Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= ERROR2 NT$4 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= ERROR NT$3 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error NT$2 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Identificador error NT$1 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ "+s+" error { STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e004 - Sintaxis del Metodo Initialize Erronea -> ");  
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Identificador NT$0 Punto Initialize Parentesis_izq Camera Llave_izq STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO "+s+".Initialize(Camera{ STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

