
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 01 00:06:30 MDT 2021
//----------------------------------------------------

package Main;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 01 00:06:30 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\002\002\004\000\002\044\002\000\002\002" +
    "\012\000\002\045\002\000\002\002\006\000\002\046\002" +
    "\000\002\002\005\000\002\047\002\000\002\002\005\000" +
    "\002\050\002\000\002\002\005\000\002\002\003\000\002" +
    "\051\002\000\002\003\005\000\002\052\002\000\002\003" +
    "\005\000\002\053\002\000\002\003\005\000\002\054\002" +
    "\000\002\003\005\000\002\055\002\000\002\003\005\000" +
    "\002\056\002\000\002\003\005\000\002\003\003\000\002" +
    "\057\002\000\002\035\006\000\002\060\002\000\002\035" +
    "\010\000\002\061\002\000\002\036\006\000\002\062\002" +
    "\000\002\036\010\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\006" +
    "\005\000\002\006\006\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\063\002\000\002\004\005\000\002\064" +
    "\002\000\002\004\006\000\002\065\002\000\002\004\006" +
    "\000\002\027\004\000\002\031\006\000\002\031\005\000" +
    "\002\031\005\000\002\031\003\000\002\032\004\000\002" +
    "\032\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\003\000\002\030\003\000\002\066\002\000" +
    "\002\034\005\000\002\067\002\000\002\034\005\000\002" +
    "\070\002\000\002\034\005\000\002\071\002\000\002\034" +
    "\005\000\002\072\002\000\002\034\005\000\002\073\002" +
    "\000\002\034\006\000\002\074\002\000\002\034\006\000" +
    "\002\075\002\000\002\034\006\000\002\034\003\000\002" +
    "\034\005\000\002\034\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\007\000\002\033\010" +
    "\000\002\033\010\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\033\007\000\002\033\010\000\002" +
    "\033\010\000\002\033\010\000\002\033\010\000\002\033" +
    "\007\000\002\033\007\000\002\033\007\000\002\033\007" +
    "\000\002\033\007\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\033\007\000\002\033\010\000\002\033" +
    "\010\000\002\033\007\000\002\033\007\000\002\033\007" +
    "\000\002\042\017\000\002\043\004\000\002\043\003\000" +
    "\002\041\005\000\002\041\005\000\002\041\003\000\002" +
    "\076\002\000\002\024\006\000\002\077\002\000\002\024" +
    "\010\000\002\100\002\000\002\024\006\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\101\002\000\002\017\010\000\002\017" +
    "\005\000\002\017\005\000\002\102\002\000\002\017\007" +
    "\000\002\103\002\000\002\017\007\000\002\104\002\000" +
    "\002\017\007\000\002\105\002\000\002\017\007\000\002" +
    "\106\002\000\002\017\010\000\002\107\002\000\002\017" +
    "\010\000\002\017\004\000\002\110\002\000\002\020\007" +
    "\000\002\111\002\000\002\020\007\000\002\112\002\000" +
    "\002\020\007\000\002\113\002\000\002\020\010\000\002" +
    "\114\002\000\002\020\010\000\002\115\002\000\002\020" +
    "\010\000\002\116\002\000\002\020\007\000\002\117\002" +
    "\000\002\020\007\000\002\120\002\000\002\020\007\000" +
    "\002\121\002\000\002\020\007\000\002\122\002\000\002" +
    "\020\010\000\002\123\002\000\002\020\010\000\002\124" +
    "\002\000\002\020\010\000\002\125\002\000\002\020\010" +
    "\000\002\126\002\000\002\020\007\000\002\127\002\000" +
    "\002\020\007\000\002\130\002\000\002\020\007\000\002" +
    "\131\002\000\002\020\007\000\002\132\002\000\002\020" +
    "\007\000\002\133\002\000\002\020\007\000\002\134\002" +
    "\000\002\020\007\000\002\135\002\000\002\020\007\000" +
    "\002\136\002\000\002\020\007\000\002\137\002\000\002" +
    "\020\007\000\002\140\002\000\002\020\007\000\002\141" +
    "\002\000\002\020\014\000\002\142\002\000\002\020\007" +
    "\000\002\143\002\000\002\020\007\000\002\144\002\000" +
    "\002\020\007\000\002\145\002\000\002\020\005\000\002" +
    "\021\005\000\002\021\007\000\002\021\005\000\002\021" +
    "\007\000\002\021\003\000\002\022\005\000\002\023\005" +
    "\000\002\023\006\000\002\023\005\000\002\023\005\000" +
    "\002\023\006\000\002\023\005\000\002\023\005\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\006\000\002\023" +
    "\006\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\146\002\000\002\014\007\000\002\147\002\000" +
    "\002\014\007\000\002\150\002\000\002\014\007\000\002" +
    "\151\002\000\002\014\007\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\010\005" +
    "\000\002\010\003\000\002\005\005\000\002\152\002\000" +
    "\002\005\007\000\002\153\002\000\002\005\007\000\002" +
    "\154\002\000\002\005\007\000\002\155\002\000\002\005" +
    "\007\000\002\156\002\000\002\005\007\000\002\157\002" +
    "\000\002\005\007\000\002\160\002\000\002\005\007\000" +
    "\002\161\002\000\002\005\007\000\002\162\002\000\002" +
    "\005\007\000\002\163\002\000\002\005\007\000\002\164" +
    "\002\000\002\005\007\000\002\165\002\000\002\005\007" +
    "\000\002\166\002\000\002\005\007\000\002\167\002\000" +
    "\002\005\007\000\002\170\002\000\002\005\007\000\002" +
    "\171\002\000\002\005\007\000\002\172\002\000\002\005" +
    "\007\000\002\173\002\000\002\005\007\000\002\013\003" +
    "\000\002\013\003\000\002\174\002\000\002\013\005\000" +
    "\002\175\002\000\002\011\006\000\002\176\002\000\002" +
    "\011\006\000\002\177\002\000\002\012\007\000\002\200" +
    "\002\000\002\012\007\000\002\201\002\000\002\012\007" +
    "\000\002\202\002\000\002\012\007\000\002\203\002\000" +
    "\002\012\007\000\002\204\002\000\002\012\007\000\002" +
    "\205\002\000\002\012\007\000\002\206\002\000\002\012" +
    "\007\000\002\207\002\000\002\012\007\000\002\210\002" +
    "\000\002\012\007\000\002\211\002\000\002\012\005\000" +
    "\002\212\002\000\002\012\005\000\002\213\002\000\002" +
    "\012\005\000\002\214\002\000\002\012\005\000\002\215" +
    "\002\000\002\012\005\000\002\216\002\000\002\012\005" +
    "\000\002\217\002\000\002\012\005\000\002\220\002\000" +
    "\002\012\005\000\002\221\002\000\002\012\005\000\002" +
    "\222\002\000\002\012\005\000\002\012\003\000\002\223" +
    "\002\000\002\015\007\000\002\224\002\000\002\015\007" +
    "\000\002\225\002\000\002\015\007\000\002\226\002\000" +
    "\002\015\007\000\002\227\002\000\002\015\007\000\002" +
    "\230\002\000\002\015\007\000\002\231\002\000\002\015" +
    "\007\000\002\232\002\000\002\015\007\000\002\233\002" +
    "\000\002\016\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\006\000\002" +
    "\007\006\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0372\000\012\003\004\122\007\126\005\130\006\001" +
    "\002\000\014\002\ufff6\003\ufffc\122\ufffc\126\ufffc\130\ufffc" +
    "\001\002\000\012\003\ufffa\122\ufffa\126\ufffa\130\ufffa\001" +
    "\002\000\012\003\ufff8\122\ufff8\126\ufff8\130\ufff8\001\002" +
    "\000\006\003\012\005\000\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\126\003\ufffe\005\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\020\ufffe\024\ufffe\027\ufffe\032\ufffe\034\ufffe\040\ufffe" +
    "\047\ufffe\050\ufffe\055\ufffe\056\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\071\ufffe\121\ufffe" +
    "\122\ufffe\126\ufffe\130\ufffe\132\ufffe\147\ufffe\150\ufffe\152" +
    "\ufffe\153\ufffe\154\ufffe\155\ufffe\156\ufffe\157\ufffe\166\ufffe" +
    "\170\ufffe\001\002\000\004\005\014\001\002\000\004\011" +
    "\015\001\002\000\004\114\016\001\002\000\004\010\017" +
    "\001\002\000\004\120\020\001\002\000\126\003\055\005" +
    "\044\010\022\011\054\012\104\013\103\014\101\015\100" +
    "\016\064\020\072\024\031\027\027\032\062\034\073\040" +
    "\035\047\075\050\021\055\105\056\041\061\051\062\047" +
    "\063\052\064\076\065\106\066\050\067\053\071\024\121" +
    "\060\122\074\126\063\130\045\132\036\147\043\150\032" +
    "\152\067\153\042\154\025\155\077\156\061\157\046\166" +
    "\030\170\056\001\002\000\004\075\ufedb\001\002\000\004" +
    "\075\ufec7\001\002\000\004\122\u035a\001\002\000\006\003" +
    "\u034e\114\u034d\001\002\000\004\114\u0349\001\002\000\126" +
    "\003\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\020\ufff3\024\ufff3\027\ufff3\032\ufff3" +
    "\034\ufff3\040\ufff3\047\ufff3\050\ufff3\055\ufff3\056\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\071\ufff3\121\ufff3\122\ufff3\126\ufff3\130\ufff3\132\ufff3\147" +
    "\ufff3\150\ufff3\152\ufff3\153\ufff3\154\ufff3\155\ufff3\156\ufff3" +
    "\157\ufff3\166\ufff3\170\ufff3\001\002\000\004\075\ufed5\001" +
    "\002\000\004\005\u0341\001\002\000\004\075\ufed7\001\002" +
    "\000\004\114\u0338\001\002\000\130\002\uffd1\003\uffd1\005" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\020\uffd1\024\uffd1\027\uffd1\032\uffd1\034\uffd1\040" +
    "\uffd1\047\uffd1\050\uffd1\055\uffd1\056\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\071\uffd1\121" +
    "\uffd1\122\uffd1\126\uffd1\130\uffd1\132\uffd1\147\uffd1\150\uffd1" +
    "\152\uffd1\153\uffd1\154\uffd1\155\uffd1\156\uffd1\157\uffd1\166" +
    "\uffd1\170\uffd1\001\002\000\004\002\uffff\001\002\000\004" +
    "\075\ufed1\001\002\000\004\075\ufec9\001\002\000\126\003" +
    "\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\020\uffeb\024\uffeb\027\uffeb\032\uffeb\034" +
    "\uffeb\040\uffeb\047\uffeb\050\uffeb\055\uffeb\056\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\071" +
    "\uffeb\121\uffeb\122\uffeb\126\uffeb\130\uffeb\132\uffeb\147\uffeb" +
    "\150\uffeb\152\uffeb\153\uffeb\154\uffeb\155\uffeb\156\uffeb\157" +
    "\uffeb\166\uffeb\170\uffeb\001\002\000\130\002\uffd3\003\uffef" +
    "\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\020\uffef\024\uffef\027\uffef\032\uffef\034\uffef" +
    "\040\uffef\047\uffef\050\uffef\055\uffef\056\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\071\uffef" +
    "\121\uffef\122\uffef\126\uffef\130\uffef\132\uffef\147\uffef\150" +
    "\uffef\152\uffef\153\uffef\154\uffef\155\uffef\156\uffef\157\uffef" +
    "\166\uffef\170\uffef\001\002\000\004\075\ufecb\001\002\000" +
    "\004\114\u0323\001\002\000\004\003\uffc9\001\002\000\004" +
    "\003\u031f\001\002\000\004\002\uffd4\001\002\000\004\114" +
    "\u031b\001\002\000\004\122\uffdf\001\002\000\012\003\u0315" +
    "\122\u0317\123\u0316\127\u0318\001\002\000\004\122\uffe0\001" +
    "\002\000\004\122\uffde\001\002\000\004\114\u024e\001\002" +
    "\000\004\075\ufec5\001\002\000\132\002\uffd6\003\ufff1\004" +
    "\uffcd\005\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\020\ufff1\024\ufff1\027\ufff1\032\ufff1\034" +
    "\ufff1\040\ufff1\047\ufff1\050\ufff1\055\ufff1\056\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\071" +
    "\ufff1\121\ufff1\122\ufff1\126\ufff1\130\ufff1\132\ufff1\147\ufff1" +
    "\150\ufff1\152\ufff1\153\ufff1\154\ufff1\155\ufff1\156\ufff1\157" +
    "\ufff1\166\ufff1\170\ufff1\001\002\000\004\122\u023f\001\002" +
    "\000\130\002\uffce\003\uffce\005\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\020\uffce\024\uffce" +
    "\027\uffce\032\uffce\034\uffce\040\uffce\047\uffce\050\uffce\055" +
    "\uffce\056\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\066\uffce\067\uffce\071\uffce\121\uffce\122\uffce\126\uffce\130" +
    "\uffce\132\uffce\147\uffce\150\uffce\152\uffce\153\uffce\154\uffce" +
    "\155\uffce\156\uffce\157\uffce\166\uffce\170\uffce\001\002\000" +
    "\004\115\u023c\001\002\000\004\114\u0238\001\002\000\004" +
    "\075\ufed3\001\002\000\006\002\uffd5\003\uffcb\001\002\000" +
    "\004\075\ufeb9\001\002\000\130\002\uffd2\003\uffed\005\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\020\uffed\024\uffed\027\uffed\032\uffed\034\uffed\040\uffed" +
    "\047\uffed\050\uffed\055\uffed\056\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\071\uffed\121\uffed" +
    "\122\uffed\126\uffed\130\uffed\132\uffed\147\uffed\150\uffed\152" +
    "\uffed\153\uffed\154\uffed\155\uffed\156\uffed\157\uffed\166\uffed" +
    "\170\uffed\001\002\000\130\002\uffd0\003\uffd0\005\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\020\uffd0\024\uffd0\027\uffd0\032\uffd0\034\uffd0\040\uffd0\047" +
    "\uffd0\050\uffd0\055\uffd0\056\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\066\uffd0\067\uffd0\071\uffd0\121\uffd0\122" +
    "\uffd0\126\uffd0\130\uffd0\132\uffd0\147\uffd0\150\uffd0\152\uffd0" +
    "\153\uffd0\154\uffd0\155\uffd0\156\uffd0\157\uffd0\166\uffd0\170" +
    "\uffd0\001\002\000\004\114\u0226\001\002\000\126\003\ufff5" +
    "\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\020\ufff5\024\ufff5\027\ufff5\032\ufff5\034\ufff5" +
    "\040\ufff5\047\ufff5\050\ufff5\055\ufff5\056\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\071\ufff5" +
    "\121\ufff5\122\ufff5\126\ufff5\130\ufff5\132\ufff5\147\ufff5\150" +
    "\ufff5\152\ufff5\153\ufff5\154\ufff5\155\ufff5\156\ufff5\157\ufff5" +
    "\166\ufff5\170\ufff5\001\002\000\130\002\uffcf\003\uffcf\005" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\024\uffcf\027\uffcf\032\uffcf\034\uffcf\040" +
    "\uffcf\047\uffcf\050\uffcf\055\uffcf\056\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\071\uffcf\121" +
    "\uffcf\122\uffcf\126\uffcf\130\uffcf\132\uffcf\147\uffcf\150\uffcf" +
    "\152\uffcf\153\uffcf\154\uffcf\155\uffcf\156\uffcf\157\uffcf\166" +
    "\uffcf\170\uffcf\001\002\000\004\075\ufed9\001\002\000\004" +
    "\075\ufebb\001\002\000\004\075\u0187\001\002\000\006\005" +
    "\210\075\ufecf\001\002\000\004\122\uffdd\001\002\000\004" +
    "\114\203\001\002\000\010\003\172\075\ufebd\131\ufee4\001" +
    "\002\000\010\003\160\075\ufebf\131\ufee6\001\002\000\004" +
    "\002\uffe9\001\002\000\010\003\147\075\ufec1\131\ufee8\001" +
    "\002\000\010\003\130\075\ufec3\131\ufeea\001\002\000\004" +
    "\075\ufecd\001\002\000\006\003\107\114\110\001\002\000" +
    "\004\004\uff62\001\002\000\012\003\112\122\114\123\113" +
    "\127\115\001\002\000\004\115\116\001\002\000\004\115" +
    "\uff59\001\002\000\004\115\uff5b\001\002\000\004\115\uff5c" +
    "\001\002\000\004\115\uff5a\001\002\000\004\004\uff64\001" +
    "\002\000\004\004\120\001\002\000\130\002\uff63\003\uff63" +
    "\005\uff63\010\uff63\011\uff63\012\uff63\013\uff63\014\uff63\015" +
    "\uff63\016\uff63\020\uff63\024\uff63\027\uff63\032\uff63\034\uff63" +
    "\040\uff63\047\uff63\050\uff63\055\uff63\056\uff63\061\uff63\062" +
    "\uff63\063\uff63\064\uff63\065\uff63\066\uff63\067\uff63\071\uff63" +
    "\121\uff63\122\uff63\126\uff63\130\uff63\132\uff63\147\uff63\150" +
    "\uff63\152\uff63\153\uff63\154\uff63\155\uff63\156\uff63\157\uff63" +
    "\166\uff63\170\uff63\001\002\000\004\004\122\001\002\000" +
    "\130\002\uff61\003\uff61\005\uff61\010\uff61\011\uff61\012\uff61" +
    "\013\uff61\014\uff61\015\uff61\016\uff61\020\uff61\024\uff61\027" +
    "\uff61\032\uff61\034\uff61\040\uff61\047\uff61\050\uff61\055\uff61" +
    "\056\uff61\061\uff61\062\uff61\063\uff61\064\uff61\065\uff61\066" +
    "\uff61\067\uff61\071\uff61\121\uff61\122\uff61\126\uff61\130\uff61" +
    "\132\uff61\147\uff61\150\uff61\152\uff61\153\uff61\154\uff61\155" +
    "\uff61\156\uff61\157\uff61\166\uff61\170\uff61\001\002\000\004" +
    "\075\124\001\002\000\004\003\125\001\002\000\004\004" +
    "\126\001\002\000\130\002\ufecc\003\ufecc\005\ufecc\010\ufecc" +
    "\011\ufecc\012\ufecc\013\ufecc\014\ufecc\015\ufecc\016\ufecc\020" +
    "\ufecc\024\ufecc\027\ufecc\032\ufecc\034\ufecc\040\ufecc\047\ufecc" +
    "\050\ufecc\055\ufecc\056\ufecc\061\ufecc\062\ufecc\063\ufecc\064" +
    "\ufecc\065\ufecc\066\ufecc\067\ufecc\071\ufecc\121\ufecc\122\ufecc" +
    "\126\ufecc\130\ufecc\132\ufecc\147\ufecc\150\ufecc\152\ufecc\153" +
    "\ufecc\154\ufecc\155\ufecc\156\ufecc\157\ufecc\166\ufecc\170\ufecc" +
    "\001\002\000\004\075\142\001\002\000\004\004\141\001" +
    "\002\000\004\131\132\001\002\000\006\003\134\016\133" +
    "\001\002\000\004\114\137\001\002\000\004\004\ufedd\001" +
    "\002\000\004\004\136\001\002\000\130\002\ufee9\003\ufee9" +
    "\005\ufee9\010\ufee9\011\ufee9\012\ufee9\013\ufee9\014\ufee9\015" +
    "\ufee9\016\ufee9\020\ufee9\024\ufee9\027\ufee9\032\ufee9\034\ufee9" +
    "\040\ufee9\047\ufee9\050\ufee9\055\ufee9\056\ufee9\061\ufee9\062" +
    "\ufee9\063\ufee9\064\ufee9\065\ufee9\066\ufee9\067\ufee9\071\ufee9" +
    "\121\ufee9\122\ufee9\126\ufee9\130\ufee9\132\ufee9\147\ufee9\150" +
    "\ufee9\152\ufee9\153\ufee9\154\ufee9\155\ufee9\156\ufee9\157\ufee9" +
    "\166\ufee9\170\ufee9\001\002\000\004\115\140\001\002\000" +
    "\004\004\ufede\001\002\000\130\002\ufee2\003\ufee2\005\ufee2" +
    "\010\ufee2\011\ufee2\012\ufee2\013\ufee2\014\ufee2\015\ufee2\016" +
    "\ufee2\020\ufee2\024\ufee2\027\ufee2\032\ufee2\034\ufee2\040\ufee2" +
    "\047\ufee2\050\ufee2\055\ufee2\056\ufee2\061\ufee2\062\ufee2\063" +
    "\ufee2\064\ufee2\065\ufee2\066\ufee2\067\ufee2\071\ufee2\121\ufee2" +
    "\122\ufee2\126\ufee2\130\ufee2\132\ufee2\147\ufee2\150\ufee2\152" +
    "\ufee2\153\ufee2\154\ufee2\155\ufee2\156\ufee2\157\ufee2\166\ufee2" +
    "\170\ufee2\001\002\000\004\003\143\001\002\000\004\004" +
    "\144\001\002\000\130\002\ufec2\003\ufec2\005\ufec2\010\ufec2" +
    "\011\ufec2\012\ufec2\013\ufec2\014\ufec2\015\ufec2\016\ufec2\020" +
    "\ufec2\024\ufec2\027\ufec2\032\ufec2\034\ufec2\040\ufec2\047\ufec2" +
    "\050\ufec2\055\ufec2\056\ufec2\061\ufec2\062\ufec2\063\ufec2\064" +
    "\ufec2\065\ufec2\066\ufec2\067\ufec2\071\ufec2\121\ufec2\122\ufec2" +
    "\126\ufec2\130\ufec2\132\ufec2\147\ufec2\150\ufec2\152\ufec2\153" +
    "\ufec2\154\ufec2\155\ufec2\156\ufec2\157\ufec2\166\ufec2\170\ufec2" +
    "\001\002\000\004\075\154\001\002\000\004\131\151\001" +
    "\002\000\004\004\150\001\002\000\130\002\ufee1\003\ufee1" +
    "\005\ufee1\010\ufee1\011\ufee1\012\ufee1\013\ufee1\014\ufee1\015" +
    "\ufee1\016\ufee1\020\ufee1\024\ufee1\027\ufee1\032\ufee1\034\ufee1" +
    "\040\ufee1\047\ufee1\050\ufee1\055\ufee1\056\ufee1\061\ufee1\062" +
    "\ufee1\063\ufee1\064\ufee1\065\ufee1\066\ufee1\067\ufee1\071\ufee1" +
    "\121\ufee1\122\ufee1\126\ufee1\130\ufee1\132\ufee1\147\ufee1\150" +
    "\ufee1\152\ufee1\153\ufee1\154\ufee1\155\ufee1\156\ufee1\157\ufee1" +
    "\166\ufee1\170\ufee1\001\002\000\006\003\134\016\133\001" +
    "\002\000\004\004\153\001\002\000\130\002\ufee7\003\ufee7" +
    "\005\ufee7\010\ufee7\011\ufee7\012\ufee7\013\ufee7\014\ufee7\015" +
    "\ufee7\016\ufee7\020\ufee7\024\ufee7\027\ufee7\032\ufee7\034\ufee7" +
    "\040\ufee7\047\ufee7\050\ufee7\055\ufee7\056\ufee7\061\ufee7\062" +
    "\ufee7\063\ufee7\064\ufee7\065\ufee7\066\ufee7\067\ufee7\071\ufee7" +
    "\121\ufee7\122\ufee7\126\ufee7\130\ufee7\132\ufee7\147\ufee7\150" +
    "\ufee7\152\ufee7\153\ufee7\154\ufee7\155\ufee7\156\ufee7\157\ufee7" +
    "\166\ufee7\170\ufee7\001\002\000\004\003\155\001\002\000" +
    "\004\004\156\001\002\000\130\002\ufec0\003\ufec0\005\ufec0" +
    "\010\ufec0\011\ufec0\012\ufec0\013\ufec0\014\ufec0\015\ufec0\016" +
    "\ufec0\020\ufec0\024\ufec0\027\ufec0\032\ufec0\034\ufec0\040\ufec0" +
    "\047\ufec0\050\ufec0\055\ufec0\056\ufec0\061\ufec0\062\ufec0\063" +
    "\ufec0\064\ufec0\065\ufec0\066\ufec0\067\ufec0\071\ufec0\121\ufec0" +
    "\122\ufec0\126\ufec0\130\ufec0\132\ufec0\147\ufec0\150\ufec0\152" +
    "\ufec0\153\ufec0\154\ufec0\155\ufec0\156\ufec0\157\ufec0\166\ufec0" +
    "\170\ufec0\001\002\000\004\131\166\001\002\000\004\004" +
    "\165\001\002\000\004\075\162\001\002\000\004\003\163" +
    "\001\002\000\004\004\164\001\002\000\130\002\ufebe\003" +
    "\ufebe\005\ufebe\010\ufebe\011\ufebe\012\ufebe\013\ufebe\014\ufebe" +
    "\015\ufebe\016\ufebe\020\ufebe\024\ufebe\027\ufebe\032\ufebe\034" +
    "\ufebe\040\ufebe\047\ufebe\050\ufebe\055\ufebe\056\ufebe\061\ufebe" +
    "\062\ufebe\063\ufebe\064\ufebe\065\ufebe\066\ufebe\067\ufebe\071" +
    "\ufebe\121\ufebe\122\ufebe\126\ufebe\130\ufebe\132\ufebe\147\ufebe" +
    "\150\ufebe\152\ufebe\153\ufebe\154\ufebe\155\ufebe\156\ufebe\157" +
    "\ufebe\166\ufebe\170\ufebe\001\002\000\130\002\ufee0\003\ufee0" +
    "\005\ufee0\010\ufee0\011\ufee0\012\ufee0\013\ufee0\014\ufee0\015" +
    "\ufee0\016\ufee0\020\ufee0\024\ufee0\027\ufee0\032\ufee0\034\ufee0" +
    "\040\ufee0\047\ufee0\050\ufee0\055\ufee0\056\ufee0\061\ufee0\062" +
    "\ufee0\063\ufee0\064\ufee0\065\ufee0\066\ufee0\067\ufee0\071\ufee0" +
    "\121\ufee0\122\ufee0\126\ufee0\130\ufee0\132\ufee0\147\ufee0\150" +
    "\ufee0\152\ufee0\153\ufee0\154\ufee0\155\ufee0\156\ufee0\157\ufee0" +
    "\166\ufee0\170\ufee0\001\002\000\006\003\134\016\133\001" +
    "\002\000\004\004\170\001\002\000\130\002\ufee5\003\ufee5" +
    "\005\ufee5\010\ufee5\011\ufee5\012\ufee5\013\ufee5\014\ufee5\015" +
    "\ufee5\016\ufee5\020\ufee5\024\ufee5\027\ufee5\032\ufee5\034\ufee5" +
    "\040\ufee5\047\ufee5\050\ufee5\055\ufee5\056\ufee5\061\ufee5\062" +
    "\ufee5\063\ufee5\064\ufee5\065\ufee5\066\ufee5\067\ufee5\071\ufee5" +
    "\121\ufee5\122\ufee5\126\ufee5\130\ufee5\132\ufee5\147\ufee5\150" +
    "\ufee5\152\ufee5\153\ufee5\154\ufee5\155\ufee5\156\ufee5\157\ufee5" +
    "\166\ufee5\170\ufee5\001\002\000\004\131\200\001\002\000" +
    "\004\004\177\001\002\000\004\075\174\001\002\000\004" +
    "\003\175\001\002\000\004\004\176\001\002\000\130\002" +
    "\ufebc\003\ufebc\005\ufebc\010\ufebc\011\ufebc\012\ufebc\013\ufebc" +
    "\014\ufebc\015\ufebc\016\ufebc\020\ufebc\024\ufebc\027\ufebc\032" +
    "\ufebc\034\ufebc\040\ufebc\047\ufebc\050\ufebc\055\ufebc\056\ufebc" +
    "\061\ufebc\062\ufebc\063\ufebc\064\ufebc\065\ufebc\066\ufebc\067" +
    "\ufebc\071\ufebc\121\ufebc\122\ufebc\126\ufebc\130\ufebc\132\ufebc" +
    "\147\ufebc\150\ufebc\152\ufebc\153\ufebc\154\ufebc\155\ufebc\156" +
    "\ufebc\157\ufebc\166\ufebc\170\ufebc\001\002\000\130\002\ufedf" +
    "\003\ufedf\005\ufedf\010\ufedf\011\ufedf\012\ufedf\013\ufedf\014" +
    "\ufedf\015\ufedf\016\ufedf\020\ufedf\024\ufedf\027\ufedf\032\ufedf" +
    "\034\ufedf\040\ufedf\047\ufedf\050\ufedf\055\ufedf\056\ufedf\061" +
    "\ufedf\062\ufedf\063\ufedf\064\ufedf\065\ufedf\066\ufedf\067\ufedf" +
    "\071\ufedf\121\ufedf\122\ufedf\126\ufedf\130\ufedf\132\ufedf\147" +
    "\ufedf\150\ufedf\152\ufedf\153\ufedf\154\ufedf\155\ufedf\156\ufedf" +
    "\157\ufedf\166\ufedf\170\ufedf\001\002\000\006\003\134\016" +
    "\133\001\002\000\004\004\202\001\002\000\130\002\ufee3" +
    "\003\ufee3\005\ufee3\010\ufee3\011\ufee3\012\ufee3\013\ufee3\014" +
    "\ufee3\015\ufee3\016\ufee3\020\ufee3\024\ufee3\027\ufee3\032\ufee3" +
    "\034\ufee3\040\ufee3\047\ufee3\050\ufee3\055\ufee3\056\ufee3\061" +
    "\ufee3\062\ufee3\063\ufee3\064\ufee3\065\ufee3\066\ufee3\067\ufee3" +
    "\071\ufee3\121\ufee3\122\ufee3\126\ufee3\130\ufee3\132\ufee3\147" +
    "\ufee3\150\ufee3\152\ufee3\153\ufee3\154\ufee3\155\ufee3\156\ufee3" +
    "\157\ufee3\166\ufee3\170\ufee3\001\002\000\004\115\204\001" +
    "\002\000\004\004\uff50\001\002\000\004\004\206\001\002" +
    "\000\130\002\uff4f\003\uff4f\005\uff4f\010\uff4f\011\uff4f\012" +
    "\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f\020\uff4f\024\uff4f" +
    "\027\uff4f\032\uff4f\034\uff4f\040\uff4f\047\uff4f\050\uff4f\055" +
    "\uff4f\056\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f" +
    "\066\uff4f\067\uff4f\071\uff4f\121\uff4f\122\uff4f\126\uff4f\130" +
    "\uff4f\132\uff4f\147\uff4f\150\uff4f\152\uff4f\153\uff4f\154\uff4f" +
    "\155\uff4f\156\uff4f\157\uff4f\166\uff4f\170\uff4f\001\002\000" +
    "\004\075\u0184\001\002\000\070\003\232\017\243\021\236" +
    "\022\222\023\230\025\221\026\225\030\241\031\244\033" +
    "\234\035\235\036\215\037\213\041\223\042\220\043\237" +
    "\044\227\051\212\052\231\053\240\054\226\133\242\136" +
    "\217\137\216\140\214\141\224\144\211\001\002\000\004" +
    "\114\u0180\001\002\000\004\114\u017c\001\002\000\004\114" +
    "\u0178\001\002\000\004\114\u0174\001\002\000\004\114\u0170" +
    "\001\002\000\004\114\u016c\001\002\000\004\114\u0168\001" +
    "\002\000\004\114\u0164\001\002\000\004\114\u0160\001\002" +
    "\000\004\114\u015c\001\002\000\004\114\u0158\001\002\000" +
    "\004\114\u0154\001\002\000\004\114\u0150\001\002\000\004" +
    "\114\u014c\001\002\000\004\114\u0148\001\002\000\004\114" +
    "\u0144\001\002\000\004\114\u0140\001\002\000\004\004\uff0d" +
    "\001\002\000\130\002\uff55\003\uff55\005\uff55\010\uff55\011" +
    "\uff55\012\uff55\013\uff55\014\uff55\015\uff55\016\uff55\020\uff55" +
    "\024\uff55\027\uff55\032\uff55\034\uff55\040\uff55\047\uff55\050" +
    "\uff55\055\uff55\056\uff55\061\uff55\062\uff55\063\uff55\064\uff55" +
    "\065\uff55\066\uff55\067\uff55\071\uff55\121\uff55\122\uff55\126" +
    "\uff55\130\uff55\132\uff55\147\uff55\150\uff55\152\uff55\153\uff55" +
    "\154\uff55\155\uff55\156\uff55\157\uff55\166\uff55\170\uff55\001" +
    "\002\000\004\114\u013a\001\002\000\004\114\u0136\001\002" +
    "\000\004\114\u012d\001\002\000\004\114\u0129\001\002\000" +
    "\004\114\u0120\001\002\000\004\114\u0117\001\002\000\004" +
    "\114\262\001\002\000\004\114\256\001\002\000\004\114" +
    "\245\001\002\000\006\122\246\127\247\001\002\000\004" +
    "\115\253\001\002\000\004\115\250\001\002\000\004\004" +
    "\uff31\001\002\000\004\004\252\001\002\000\130\002\uff30" +
    "\003\uff30\005\uff30\010\uff30\011\uff30\012\uff30\013\uff30\014" +
    "\uff30\015\uff30\016\uff30\020\uff30\024\uff30\027\uff30\032\uff30" +
    "\034\uff30\040\uff30\047\uff30\050\uff30\055\uff30\056\uff30\061" +
    "\uff30\062\uff30\063\uff30\064\uff30\065\uff30\066\uff30\067\uff30" +
    "\071\uff30\121\uff30\122\uff30\126\uff30\130\uff30\132\uff30\147" +
    "\uff30\150\uff30\152\uff30\153\uff30\154\uff30\155\uff30\156\uff30" +
    "\157\uff30\166\uff30\170\uff30\001\002\000\004\004\uff2d\001" +
    "\002\000\004\004\255\001\002\000\130\002\uff2c\003\uff2c" +
    "\005\uff2c\010\uff2c\011\uff2c\012\uff2c\013\uff2c\014\uff2c\015" +
    "\uff2c\016\uff2c\020\uff2c\024\uff2c\027\uff2c\032\uff2c\034\uff2c" +
    "\040\uff2c\047\uff2c\050\uff2c\055\uff2c\056\uff2c\061\uff2c\062" +
    "\uff2c\063\uff2c\064\uff2c\065\uff2c\066\uff2c\067\uff2c\071\uff2c" +
    "\121\uff2c\122\uff2c\126\uff2c\130\uff2c\132\uff2c\147\uff2c\150" +
    "\uff2c\152\uff2c\153\uff2c\154\uff2c\155\uff2c\156\uff2c\157\uff2c" +
    "\166\uff2c\170\uff2c\001\002\000\004\115\257\001\002\000" +
    "\004\004\uff43\001\002\000\004\004\261\001\002\000\130" +
    "\002\uff42\003\uff42\005\uff42\010\uff42\011\uff42\012\uff42\013" +
    "\uff42\014\uff42\015\uff42\016\uff42\020\uff42\024\uff42\027\uff42" +
    "\032\uff42\034\uff42\040\uff42\047\uff42\050\uff42\055\uff42\056" +
    "\uff42\061\uff42\062\uff42\063\uff42\064\uff42\065\uff42\066\uff42" +
    "\067\uff42\071\uff42\121\uff42\122\uff42\126\uff42\130\uff42\132" +
    "\uff42\147\uff42\150\uff42\152\uff42\153\uff42\154\uff42\155\uff42" +
    "\156\uff42\157\uff42\166\uff42\170\uff42\001\002\000\010\003" +
    "\263\123\265\127\266\001\002\000\004\115\uff07\001\002" +
    "\000\004\115\u0114\001\002\000\004\006\u0112\001\002\000" +
    "\004\006\267\001\002\000\006\123\270\135\272\001\002" +
    "\000\004\006\u0110\001\002\000\006\006\u010e\115\uff09\001" +
    "\002\000\004\005\273\001\002\000\060\017\322\021\316" +
    "\022\306\023\312\025\303\026\310\030\320\031\323\033" +
    "\314\035\315\036\277\037\275\041\305\042\302\043\317" +
    "\044\311\051\274\052\313\053\321\136\301\137\300\140" +
    "\276\141\307\001\002\000\004\114\u010c\001\002\000\004" +
    "\114\u010a\001\002\000\004\114\u0108\001\002\000\004\114" +
    "\u0106\001\002\000\004\114\u0104\001\002\000\004\114\u0102" +
    "\001\002\000\004\114\u0100\001\002\000\004\114\376\001" +
    "\002\000\006\006\uff06\115\uff06\001\002\000\004\114\374" +
    "\001\002\000\004\114\372\001\002\000\004\114\370\001" +
    "\002\000\004\114\366\001\002\000\004\114\364\001\002" +
    "\000\004\114\362\001\002\000\004\114\360\001\002\000" +
    "\004\114\356\001\002\000\004\114\354\001\002\000\004" +
    "\114\347\001\002\000\004\114\345\001\002\000\004\114" +
    "\340\001\002\000\004\114\333\001\002\000\004\114\331" +
    "\001\002\000\004\114\324\001\002\000\006\122\325\127" +
    "\326\001\002\000\004\115\330\001\002\000\004\115\327" +
    "\001\002\000\006\006\ufefd\115\ufefd\001\002\000\006\006" +
    "\ufefb\115\ufefb\001\002\000\004\115\332\001\002\000\006" +
    "\006\uff05\115\uff05\001\002\000\006\122\334\127\335\001" +
    "\002\000\004\115\337\001\002\000\004\115\336\001\002" +
    "\000\006\006\ufeef\115\ufeef\001\002\000\006\006\ufeee\115" +
    "\ufeee\001\002\000\006\122\342\123\341\001\002\000\004" +
    "\115\344\001\002\000\004\115\343\001\002\000\006\006" +
    "\ufefc\115\ufefc\001\002\000\006\006\ufefe\115\ufefe\001\002" +
    "\000\004\115\346\001\002\000\006\006\ufef4\115\ufef4\001" +
    "\002\000\006\122\351\123\350\001\002\000\004\115\353" +
    "\001\002\000\004\115\352\001\002\000\006\006\uff01\115" +
    "\uff01\001\002\000\006\006\uff04\115\uff04\001\002\000\004" +
    "\115\355\001\002\000\006\006\ufef9\115\ufef9\001\002\000" +
    "\004\115\357\001\002\000\006\006\ufefa\115\ufefa\001\002" +
    "\000\004\115\361\001\002\000\006\006\ufef0\115\ufef0\001" +
    "\002\000\004\115\363\001\002\000\006\006\uff02\115\uff02" +
    "\001\002\000\004\115\365\001\002\000\006\006\ufef3\115" +
    "\ufef3\001\002\000\004\115\367\001\002\000\006\006\uff00" +
    "\115\uff00\001\002\000\004\115\371\001\002\000\006\006" +
    "\ufeeb\115\ufeeb\001\002\000\004\115\373\001\002\000\006" +
    "\006\uff03\115\uff03\001\002\000\004\115\375\001\002\000" +
    "\006\006\ufef6\115\ufef6\001\002\000\004\115\377\001\002" +
    "\000\006\006\ufeff\115\ufeff\001\002\000\004\115\u0101\001" +
    "\002\000\006\006\ufef5\115\ufef5\001\002\000\004\115\u0103" +
    "\001\002\000\006\006\ufef2\115\ufef2\001\002\000\004\115" +
    "\u0105\001\002\000\006\006\ufeed\115\ufeed\001\002\000\004" +
    "\115\u0107\001\002\000\006\006\ufef8\115\ufef8\001\002\000" +
    "\004\115\u0109\001\002\000\006\006\ufeec\115\ufeec\001\002" +
    "\000\004\115\u010b\001\002\000\006\006\ufef7\115\ufef7\001" +
    "\002\000\004\115\u010d\001\002\000\006\006\ufef1\115\ufef1" +
    "\001\002\000\004\127\u010f\001\002\000\004\115\uff08\001" +
    "\002\000\004\123\u0111\001\002\000\004\115\uff0a\001\002" +
    "\000\004\123\u0113\001\002\000\004\115\uff0b\001\002\000" +
    "\004\004\uff3d\001\002\000\004\004\u0116\001\002\000\130" +
    "\002\uff3c\003\uff3c\005\uff3c\010\uff3c\011\uff3c\012\uff3c\013" +
    "\uff3c\014\uff3c\015\uff3c\016\uff3c\020\uff3c\024\uff3c\027\uff3c" +
    "\032\uff3c\034\uff3c\040\uff3c\047\uff3c\050\uff3c\055\uff3c\056" +
    "\uff3c\061\uff3c\062\uff3c\063\uff3c\064\uff3c\065\uff3c\066\uff3c" +
    "\067\uff3c\071\uff3c\121\uff3c\122\uff3c\126\uff3c\130\uff3c\132" +
    "\uff3c\147\uff3c\150\uff3c\152\uff3c\153\uff3c\154\uff3c\155\uff3c" +
    "\156\uff3c\157\uff3c\166\uff3c\170\uff3c\001\002\000\006\122" +
    "\u0119\123\u0118\001\002\000\004\115\u011d\001\002\000\004" +
    "\115\u011a\001\002\000\004\004\uff2f\001\002\000\004\004" +
    "\u011c\001\002\000\130\002\uff2e\003\uff2e\005\uff2e\010\uff2e" +
    "\011\uff2e\012\uff2e\013\uff2e\014\uff2e\015\uff2e\016\uff2e\020" +
    "\uff2e\024\uff2e\027\uff2e\032\uff2e\034\uff2e\040\uff2e\047\uff2e" +
    "\050\uff2e\055\uff2e\056\uff2e\061\uff2e\062\uff2e\063\uff2e\064" +
    "\uff2e\065\uff2e\066\uff2e\067\uff2e\071\uff2e\121\uff2e\122\uff2e" +
    "\126\uff2e\130\uff2e\132\uff2e\147\uff2e\150\uff2e\152\uff2e\153" +
    "\uff2e\154\uff2e\155\uff2e\156\uff2e\157\uff2e\166\uff2e\170\uff2e" +
    "\001\002\000\004\004\uff33\001\002\000\004\004\u011f\001" +
    "\002\000\130\002\uff32\003\uff32\005\uff32\010\uff32\011\uff32" +
    "\012\uff32\013\uff32\014\uff32\015\uff32\016\uff32\020\uff32\024" +
    "\uff32\027\uff32\032\uff32\034\uff32\040\uff32\047\uff32\050\uff32" +
    "\055\uff32\056\uff32\061\uff32\062\uff32\063\uff32\064\uff32\065" +
    "\uff32\066\uff32\067\uff32\071\uff32\121\uff32\122\uff32\126\uff32" +
    "\130\uff32\132\uff32\147\uff32\150\uff32\152\uff32\153\uff32\154" +
    "\uff32\155\uff32\156\uff32\157\uff32\166\uff32\170\uff32\001\002" +
    "\000\004\127\u0121\001\002\000\004\006\u0122\001\002\000" +
    "\004\123\u0123\001\002\000\004\006\u0124\001\002\000\004" +
    "\123\u0125\001\002\000\004\115\u0126\001\002\000\004\004" +
    "\uff15\001\002\000\004\004\u0128\001\002\000\130\002\uff14" +
    "\003\uff14\005\uff14\010\uff14\011\uff14\012\uff14\013\uff14\014" +
    "\uff14\015\uff14\016\uff14\020\uff14\024\uff14\027\uff14\032\uff14" +
    "\034\uff14\040\uff14\047\uff14\050\uff14\055\uff14\056\uff14\061" +
    "\uff14\062\uff14\063\uff14\064\uff14\065\uff14\066\uff14\067\uff14" +
    "\071\uff14\121\uff14\122\uff14\126\uff14\130\uff14\132\uff14\147" +
    "\uff14\150\uff14\152\uff14\153\uff14\154\uff14\155\uff14\156\uff14" +
    "\157\uff14\166\uff14\170\uff14\001\002\000\004\115\u012a\001" +
    "\002\000\004\004\uff1f\001\002\000\004\004\u012c\001\002" +
    "\000\130\002\uff1e\003\uff1e\005\uff1e\010\uff1e\011\uff1e\012" +
    "\uff1e\013\uff1e\014\uff1e\015\uff1e\016\uff1e\020\uff1e\024\uff1e" +
    "\027\uff1e\032\uff1e\034\uff1e\040\uff1e\047\uff1e\050\uff1e\055" +
    "\uff1e\056\uff1e\061\uff1e\062\uff1e\063\uff1e\064\uff1e\065\uff1e" +
    "\066\uff1e\067\uff1e\071\uff1e\121\uff1e\122\uff1e\126\uff1e\130" +
    "\uff1e\132\uff1e\147\uff1e\150\uff1e\152\uff1e\153\uff1e\154\uff1e" +
    "\155\uff1e\156\uff1e\157\uff1e\166\uff1e\170\uff1e\001\002\000" +
    "\006\122\u012f\123\u012e\001\002\000\004\115\u0133\001\002" +
    "\000\004\115\u0130\001\002\000\004\004\uff3f\001\002\000" +
    "\004\004\u0132\001\002\000\130\002\uff3e\003\uff3e\005\uff3e" +
    "\010\uff3e\011\uff3e\012\uff3e\013\uff3e\014\uff3e\015\uff3e\016" +
    "\uff3e\020\uff3e\024\uff3e\027\uff3e\032\uff3e\034\uff3e\040\uff3e" +
    "\047\uff3e\050\uff3e\055\uff3e\056\uff3e\061\uff3e\062\uff3e\063" +
    "\uff3e\064\uff3e\065\uff3e\066\uff3e\067\uff3e\071\uff3e\121\uff3e" +
    "\122\uff3e\126\uff3e\130\uff3e\132\uff3e\147\uff3e\150\uff3e\152" +
    "\uff3e\153\uff3e\154\uff3e\155\uff3e\156\uff3e\157\uff3e\166\uff3e" +
    "\170\uff3e\001\002\000\004\004\uff41\001\002\000\004\004" +
    "\u0135\001\002\000\130\002\uff40\003\uff40\005\uff40\010\uff40" +
    "\011\uff40\012\uff40\013\uff40\014\uff40\015\uff40\016\uff40\020" +
    "\uff40\024\uff40\027\uff40\032\uff40\034\uff40\040\uff40\047\uff40" +
    "\050\uff40\055\uff40\056\uff40\061\uff40\062\uff40\063\uff40\064" +
    "\uff40\065\uff40\066\uff40\067\uff40\071\uff40\121\uff40\122\uff40" +
    "\126\uff40\130\uff40\132\uff40\147\uff40\150\uff40\152\uff40\153" +
    "\uff40\154\uff40\155\uff40\156\uff40\157\uff40\166\uff40\170\uff40" +
    "\001\002\000\004\115\u0137\001\002\000\004\004\uff29\001" +
    "\002\000\004\004\u0139\001\002\000\130\002\uff28\003\uff28" +
    "\005\uff28\010\uff28\011\uff28\012\uff28\013\uff28\014\uff28\015" +
    "\uff28\016\uff28\020\uff28\024\uff28\027\uff28\032\uff28\034\uff28" +
    "\040\uff28\047\uff28\050\uff28\055\uff28\056\uff28\061\uff28\062" +
    "\uff28\063\uff28\064\uff28\065\uff28\066\uff28\067\uff28\071\uff28" +
    "\121\uff28\122\uff28\126\uff28\130\uff28\132\uff28\147\uff28\150" +
    "\uff28\152\uff28\153\uff28\154\uff28\155\uff28\156\uff28\157\uff28" +
    "\166\uff28\170\uff28\001\002\000\004\115\u013b\001\002\000" +
    "\004\004\uff2b\001\002\000\004\004\u013d\001\002\000\130" +
    "\002\uff2a\003\uff2a\005\uff2a\010\uff2a\011\uff2a\012\uff2a\013" +
    "\uff2a\014\uff2a\015\uff2a\016\uff2a\020\uff2a\024\uff2a\027\uff2a" +
    "\032\uff2a\034\uff2a\040\uff2a\047\uff2a\050\uff2a\055\uff2a\056" +
    "\uff2a\061\uff2a\062\uff2a\063\uff2a\064\uff2a\065\uff2a\066\uff2a" +
    "\067\uff2a\071\uff2a\121\uff2a\122\uff2a\126\uff2a\130\uff2a\132" +
    "\uff2a\147\uff2a\150\uff2a\152\uff2a\153\uff2a\154\uff2a\155\uff2a" +
    "\156\uff2a\157\uff2a\166\uff2a\170\uff2a\001\002\000\004\004" +
    "\u013f\001\002\000\130\002\uff0c\003\uff0c\005\uff0c\010\uff0c" +
    "\011\uff0c\012\uff0c\013\uff0c\014\uff0c\015\uff0c\016\uff0c\020" +
    "\uff0c\024\uff0c\027\uff0c\032\uff0c\034\uff0c\040\uff0c\047\uff0c" +
    "\050\uff0c\055\uff0c\056\uff0c\061\uff0c\062\uff0c\063\uff0c\064" +
    "\uff0c\065\uff0c\066\uff0c\067\uff0c\071\uff0c\121\uff0c\122\uff0c" +
    "\126\uff0c\130\uff0c\132\uff0c\147\uff0c\150\uff0c\152\uff0c\153" +
    "\uff0c\154\uff0c\155\uff0c\156\uff0c\157\uff0c\166\uff0c\170\uff0c" +
    "\001\002\000\004\115\u0141\001\002\000\004\004\uff17\001" +
    "\002\000\004\004\u0143\001\002\000\130\002\uff16\003\uff16" +
    "\005\uff16\010\uff16\011\uff16\012\uff16\013\uff16\014\uff16\015" +
    "\uff16\016\uff16\020\uff16\024\uff16\027\uff16\032\uff16\034\uff16" +
    "\040\uff16\047\uff16\050\uff16\055\uff16\056\uff16\061\uff16\062" +
    "\uff16\063\uff16\064\uff16\065\uff16\066\uff16\067\uff16\071\uff16" +
    "\121\uff16\122\uff16\126\uff16\130\uff16\132\uff16\147\uff16\150" +
    "\uff16\152\uff16\153\uff16\154\uff16\155\uff16\156\uff16\157\uff16" +
    "\166\uff16\170\uff16\001\002\000\004\115\u0145\001\002\000" +
    "\004\004\uff35\001\002\000\004\004\u0147\001\002\000\130" +
    "\002\uff34\003\uff34\005\uff34\010\uff34\011\uff34\012\uff34\013" +
    "\uff34\014\uff34\015\uff34\016\uff34\020\uff34\024\uff34\027\uff34" +
    "\032\uff34\034\uff34\040\uff34\047\uff34\050\uff34\055\uff34\056" +
    "\uff34\061\uff34\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34" +
    "\067\uff34\071\uff34\121\uff34\122\uff34\126\uff34\130\uff34\132" +
    "\uff34\147\uff34\150\uff34\152\uff34\153\uff34\154\uff34\155\uff34" +
    "\156\uff34\157\uff34\166\uff34\170\uff34\001\002\000\004\115" +
    "\u0149\001\002\000\004\004\uff1d\001\002\000\004\004\u014b" +
    "\001\002\000\130\002\uff1c\003\uff1c\005\uff1c\010\uff1c\011" +
    "\uff1c\012\uff1c\013\uff1c\014\uff1c\015\uff1c\016\uff1c\020\uff1c" +
    "\024\uff1c\027\uff1c\032\uff1c\034\uff1c\040\uff1c\047\uff1c\050" +
    "\uff1c\055\uff1c\056\uff1c\061\uff1c\062\uff1c\063\uff1c\064\uff1c" +
    "\065\uff1c\066\uff1c\067\uff1c\071\uff1c\121\uff1c\122\uff1c\126" +
    "\uff1c\130\uff1c\132\uff1c\147\uff1c\150\uff1c\152\uff1c\153\uff1c" +
    "\154\uff1c\155\uff1c\156\uff1c\157\uff1c\166\uff1c\170\uff1c\001" +
    "\002\000\004\115\u014d\001\002\000\004\004\uff45\001\002" +
    "\000\004\004\u014f\001\002\000\130\002\uff44\003\uff44\005" +
    "\uff44\010\uff44\011\uff44\012\uff44\013\uff44\014\uff44\015\uff44" +
    "\016\uff44\020\uff44\024\uff44\027\uff44\032\uff44\034\uff44\040" +
    "\uff44\047\uff44\050\uff44\055\uff44\056\uff44\061\uff44\062\uff44" +
    "\063\uff44\064\uff44\065\uff44\066\uff44\067\uff44\071\uff44\121" +
    "\uff44\122\uff44\126\uff44\130\uff44\132\uff44\147\uff44\150\uff44" +
    "\152\uff44\153\uff44\154\uff44\155\uff44\156\uff44\157\uff44\166" +
    "\uff44\170\uff44\001\002\000\004\115\u0151\001\002\000\004" +
    "\004\uff3b\001\002\000\004\004\u0153\001\002\000\130\002" +
    "\uff3a\003\uff3a\005\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a" +
    "\014\uff3a\015\uff3a\016\uff3a\020\uff3a\024\uff3a\027\uff3a\032" +
    "\uff3a\034\uff3a\040\uff3a\047\uff3a\050\uff3a\055\uff3a\056\uff3a" +
    "\061\uff3a\062\uff3a\063\uff3a\064\uff3a\065\uff3a\066\uff3a\067" +
    "\uff3a\071\uff3a\121\uff3a\122\uff3a\126\uff3a\130\uff3a\132\uff3a" +
    "\147\uff3a\150\uff3a\152\uff3a\153\uff3a\154\uff3a\155\uff3a\156" +
    "\uff3a\157\uff3a\166\uff3a\170\uff3a\001\002\000\004\115\u0155" +
    "\001\002\000\004\004\uff0f\001\002\000\004\004\u0157\001" +
    "\002\000\130\002\uff0e\003\uff0e\005\uff0e\010\uff0e\011\uff0e" +
    "\012\uff0e\013\uff0e\014\uff0e\015\uff0e\016\uff0e\020\uff0e\024" +
    "\uff0e\027\uff0e\032\uff0e\034\uff0e\040\uff0e\047\uff0e\050\uff0e" +
    "\055\uff0e\056\uff0e\061\uff0e\062\uff0e\063\uff0e\064\uff0e\065" +
    "\uff0e\066\uff0e\067\uff0e\071\uff0e\121\uff0e\122\uff0e\126\uff0e" +
    "\130\uff0e\132\uff0e\147\uff0e\150\uff0e\152\uff0e\153\uff0e\154" +
    "\uff0e\155\uff0e\156\uff0e\157\uff0e\166\uff0e\170\uff0e\001\002" +
    "\000\004\115\u0159\001\002\000\004\004\uff23\001\002\000" +
    "\004\004\u015b\001\002\000\130\002\uff22\003\uff22\005\uff22" +
    "\010\uff22\011\uff22\012\uff22\013\uff22\014\uff22\015\uff22\016" +
    "\uff22\020\uff22\024\uff22\027\uff22\032\uff22\034\uff22\040\uff22" +
    "\047\uff22\050\uff22\055\uff22\056\uff22\061\uff22\062\uff22\063" +
    "\uff22\064\uff22\065\uff22\066\uff22\067\uff22\071\uff22\121\uff22" +
    "\122\uff22\126\uff22\130\uff22\132\uff22\147\uff22\150\uff22\152" +
    "\uff22\153\uff22\154\uff22\155\uff22\156\uff22\157\uff22\166\uff22" +
    "\170\uff22\001\002\000\004\115\u015d\001\002\000\004\004" +
    "\uff37\001\002\000\004\004\u015f\001\002\000\130\002\uff36" +
    "\003\uff36\005\uff36\010\uff36\011\uff36\012\uff36\013\uff36\014" +
    "\uff36\015\uff36\016\uff36\020\uff36\024\uff36\027\uff36\032\uff36" +
    "\034\uff36\040\uff36\047\uff36\050\uff36\055\uff36\056\uff36\061" +
    "\uff36\062\uff36\063\uff36\064\uff36\065\uff36\066\uff36\067\uff36" +
    "\071\uff36\121\uff36\122\uff36\126\uff36\130\uff36\132\uff36\147" +
    "\uff36\150\uff36\152\uff36\153\uff36\154\uff36\155\uff36\156\uff36" +
    "\157\uff36\166\uff36\170\uff36\001\002\000\004\115\u0161\001" +
    "\002\000\004\004\uff39\001\002\000\004\004\u0163\001\002" +
    "\000\130\002\uff38\003\uff38\005\uff38\010\uff38\011\uff38\012" +
    "\uff38\013\uff38\014\uff38\015\uff38\016\uff38\020\uff38\024\uff38" +
    "\027\uff38\032\uff38\034\uff38\040\uff38\047\uff38\050\uff38\055" +
    "\uff38\056\uff38\061\uff38\062\uff38\063\uff38\064\uff38\065\uff38" +
    "\066\uff38\067\uff38\071\uff38\121\uff38\122\uff38\126\uff38\130" +
    "\uff38\132\uff38\147\uff38\150\uff38\152\uff38\153\uff38\154\uff38" +
    "\155\uff38\156\uff38\157\uff38\166\uff38\170\uff38\001\002\000" +
    "\004\115\u0165\001\002\000\004\004\uff21\001\002\000\004" +
    "\004\u0167\001\002\000\130\002\uff20\003\uff20\005\uff20\010" +
    "\uff20\011\uff20\012\uff20\013\uff20\014\uff20\015\uff20\016\uff20" +
    "\020\uff20\024\uff20\027\uff20\032\uff20\034\uff20\040\uff20\047" +
    "\uff20\050\uff20\055\uff20\056\uff20\061\uff20\062\uff20\063\uff20" +
    "\064\uff20\065\uff20\066\uff20\067\uff20\071\uff20\121\uff20\122" +
    "\uff20\126\uff20\130\uff20\132\uff20\147\uff20\150\uff20\152\uff20" +
    "\153\uff20\154\uff20\155\uff20\156\uff20\157\uff20\166\uff20\170" +
    "\uff20\001\002\000\004\115\u0169\001\002\000\004\004\uff1b" +
    "\001\002\000\004\004\u016b\001\002\000\130\002\uff1a\003" +
    "\uff1a\005\uff1a\010\uff1a\011\uff1a\012\uff1a\013\uff1a\014\uff1a" +
    "\015\uff1a\016\uff1a\020\uff1a\024\uff1a\027\uff1a\032\uff1a\034" +
    "\uff1a\040\uff1a\047\uff1a\050\uff1a\055\uff1a\056\uff1a\061\uff1a" +
    "\062\uff1a\063\uff1a\064\uff1a\065\uff1a\066\uff1a\067\uff1a\071" +
    "\uff1a\121\uff1a\122\uff1a\126\uff1a\130\uff1a\132\uff1a\147\uff1a" +
    "\150\uff1a\152\uff1a\153\uff1a\154\uff1a\155\uff1a\156\uff1a\157" +
    "\uff1a\166\uff1a\170\uff1a\001\002\000\004\115\u016d\001\002" +
    "\000\004\004\uff13\001\002\000\004\004\u016f\001\002\000" +
    "\130\002\uff12\003\uff12\005\uff12\010\uff12\011\uff12\012\uff12" +
    "\013\uff12\014\uff12\015\uff12\016\uff12\020\uff12\024\uff12\027" +
    "\uff12\032\uff12\034\uff12\040\uff12\047\uff12\050\uff12\055\uff12" +
    "\056\uff12\061\uff12\062\uff12\063\uff12\064\uff12\065\uff12\066" +
    "\uff12\067\uff12\071\uff12\121\uff12\122\uff12\126\uff12\130\uff12" +
    "\132\uff12\147\uff12\150\uff12\152\uff12\153\uff12\154\uff12\155" +
    "\uff12\156\uff12\157\uff12\166\uff12\170\uff12\001\002\000\004" +
    "\115\u0171\001\002\000\004\004\uff27\001\002\000\004\004" +
    "\u0173\001\002\000\130\002\uff26\003\uff26\005\uff26\010\uff26" +
    "\011\uff26\012\uff26\013\uff26\014\uff26\015\uff26\016\uff26\020" +
    "\uff26\024\uff26\027\uff26\032\uff26\034\uff26\040\uff26\047\uff26" +
    "\050\uff26\055\uff26\056\uff26\061\uff26\062\uff26\063\uff26\064" +
    "\uff26\065\uff26\066\uff26\067\uff26\071\uff26\121\uff26\122\uff26" +
    "\126\uff26\130\uff26\132\uff26\147\uff26\150\uff26\152\uff26\153" +
    "\uff26\154\uff26\155\uff26\156\uff26\157\uff26\166\uff26\170\uff26" +
    "\001\002\000\004\115\u0175\001\002\000\004\004\uff11\001" +
    "\002\000\004\004\u0177\001\002\000\130\002\uff10\003\uff10" +
    "\005\uff10\010\uff10\011\uff10\012\uff10\013\uff10\014\uff10\015" +
    "\uff10\016\uff10\020\uff10\024\uff10\027\uff10\032\uff10\034\uff10" +
    "\040\uff10\047\uff10\050\uff10\055\uff10\056\uff10\061\uff10\062" +
    "\uff10\063\uff10\064\uff10\065\uff10\066\uff10\067\uff10\071\uff10" +
    "\121\uff10\122\uff10\126\uff10\130\uff10\132\uff10\147\uff10\150" +
    "\uff10\152\uff10\153\uff10\154\uff10\155\uff10\156\uff10\157\uff10" +
    "\166\uff10\170\uff10\001\002\000\004\115\u0179\001\002\000" +
    "\004\004\uff25\001\002\000\004\004\u017b\001\002\000\130" +
    "\002\uff24\003\uff24\005\uff24\010\uff24\011\uff24\012\uff24\013" +
    "\uff24\014\uff24\015\uff24\016\uff24\020\uff24\024\uff24\027\uff24" +
    "\032\uff24\034\uff24\040\uff24\047\uff24\050\uff24\055\uff24\056" +
    "\uff24\061\uff24\062\uff24\063\uff24\064\uff24\065\uff24\066\uff24" +
    "\067\uff24\071\uff24\121\uff24\122\uff24\126\uff24\130\uff24\132" +
    "\uff24\147\uff24\150\uff24\152\uff24\153\uff24\154\uff24\155\uff24" +
    "\156\uff24\157\uff24\166\uff24\170\uff24\001\002\000\004\115" +
    "\u017d\001\002\000\004\004\uff19\001\002\000\004\004\u017f" +
    "\001\002\000\130\002\uff18\003\uff18\005\uff18\010\uff18\011" +
    "\uff18\012\uff18\013\uff18\014\uff18\015\uff18\016\uff18\020\uff18" +
    "\024\uff18\027\uff18\032\uff18\034\uff18\040\uff18\047\uff18\050" +
    "\uff18\055\uff18\056\uff18\061\uff18\062\uff18\063\uff18\064\uff18" +
    "\065\uff18\066\uff18\067\uff18\071\uff18\121\uff18\122\uff18\126" +
    "\uff18\130\uff18\132\uff18\147\uff18\150\uff18\152\uff18\153\uff18" +
    "\154\uff18\155\uff18\156\uff18\157\uff18\166\uff18\170\uff18\001" +
    "\002\000\004\115\u0181\001\002\000\004\004\uff47\001\002" +
    "\000\004\004\u0183\001\002\000\130\002\uff46\003\uff46\005" +
    "\uff46\010\uff46\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46" +
    "\016\uff46\020\uff46\024\uff46\027\uff46\032\uff46\034\uff46\040" +
    "\uff46\047\uff46\050\uff46\055\uff46\056\uff46\061\uff46\062\uff46" +
    "\063\uff46\064\uff46\065\uff46\066\uff46\067\uff46\071\uff46\121" +
    "\uff46\122\uff46\126\uff46\130\uff46\132\uff46\147\uff46\150\uff46" +
    "\152\uff46\153\uff46\154\uff46\155\uff46\156\uff46\157\uff46\166" +
    "\uff46\170\uff46\001\002\000\004\003\u0185\001\002\000\004" +
    "\004\u0186\001\002\000\130\002\ufece\003\ufece\005\ufece\010" +
    "\ufece\011\ufece\012\ufece\013\ufece\014\ufece\015\ufece\016\ufece" +
    "\020\ufece\024\ufece\027\ufece\032\ufece\034\ufece\040\ufece\047" +
    "\ufece\050\ufece\055\ufece\056\ufece\061\ufece\062\ufece\063\ufece" +
    "\064\ufece\065\ufece\066\ufece\067\ufece\071\ufece\121\ufece\122" +
    "\ufece\126\ufece\130\ufece\132\ufece\147\ufece\150\ufece\152\ufece" +
    "\153\ufece\154\ufece\155\ufece\156\ufece\157\ufece\166\ufece\170" +
    "\ufece\001\002\000\030\003\u0191\034\u018d\114\u018f\122\u0190" +
    "\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c\142\u0193\143" +
    "\u0192\001\002\000\130\002\ufedc\003\ufedc\005\ufedc\010\ufedc" +
    "\011\ufedc\012\ufedc\013\ufedc\014\ufedc\015\ufedc\016\ufedc\020" +
    "\ufedc\024\ufedc\027\ufedc\032\ufedc\034\ufedc\040\ufedc\047\ufedc" +
    "\050\ufedc\055\ufedc\056\ufedc\061\ufedc\062\ufedc\063\ufedc\064" +
    "\ufedc\065\ufedc\066\ufedc\067\ufedc\071\ufedc\121\ufedc\122\ufedc" +
    "\126\ufedc\130\ufedc\132\ufedc\147\ufedc\150\ufedc\152\ufedc\153" +
    "\ufedc\154\ufedc\155\ufedc\156\ufedc\157\ufedc\166\ufedc\170\ufedc" +
    "\001\002\000\040\003\ufe6c\004\ufe6c\076\ufe6c\077\ufe6c\100" +
    "\ufe6c\101\ufe6c\102\ufe6c\103\ufe6c\104\ufe6c\105\ufe6c\106\ufe6c" +
    "\107\ufe6c\110\ufe6c\111\ufe6c\115\ufe6c\001\002\000\130\002" +
    "\ufeb7\003\ufeb7\005\ufeb7\010\ufeb7\011\ufeb7\012\ufeb7\013\ufeb7" +
    "\014\ufeb7\015\ufeb7\016\ufeb7\020\ufeb7\024\ufeb7\027\ufeb7\032" +
    "\ufeb7\034\ufeb7\040\ufeb7\047\ufeb7\050\ufeb7\055\ufeb7\056\ufeb7" +
    "\061\ufeb7\062\ufeb7\063\ufeb7\064\ufeb7\065\ufeb7\066\ufeb7\067" +
    "\ufeb7\071\ufeb7\121\ufeb7\122\ufeb7\126\ufeb7\130\ufeb7\132\ufeb7" +
    "\147\ufeb7\150\ufeb7\152\ufeb7\153\ufeb7\154\ufeb7\155\ufeb7\156" +
    "\ufeb7\157\ufeb7\166\ufeb7\170\ufeb7\001\002\000\040\003\ufe6b" +
    "\004\ufe6b\076\ufe6b\077\ufe6b\100\ufe6b\101\ufe6b\102\ufe6b\103" +
    "\ufe6b\104\ufe6b\105\ufe6b\106\ufe6b\107\ufe6b\110\ufe6b\111\ufe6b" +
    "\115\ufe6b\001\002\000\040\003\ufe6e\004\ufe6e\076\ufe6e\077" +
    "\ufe6e\100\ufe6e\101\ufe6e\102\ufe6e\103\ufe6e\104\ufe6e\105\ufe6e" +
    "\106\ufe6e\107\ufe6e\110\ufe6e\111\ufe6e\115\ufe6e\001\002\000" +
    "\030\003\ufeb3\020\ufeb3\024\ufeb3\027\ufeb3\032\ufeb3\040\ufeb3" +
    "\047\ufeb3\050\ufeb3\055\ufeb3\056\ufeb3\132\ufeb3\001\002\000" +
    "\040\003\ufe6d\004\ufe6d\076\ufe6d\077\ufe6d\100\ufe6d\101\ufe6d" +
    "\102\ufe6d\103\ufe6d\104\ufe6d\105\ufe6d\106\ufe6d\107\ufe6d\110" +
    "\ufe6d\111\ufe6d\115\ufe6d\001\002\000\026\003\u0211\114\u018f" +
    "\122\u0190\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c\142" +
    "\u0193\143\u0192\001\002\000\040\003\ufe6a\004\ufe6a\076\ufe6a" +
    "\077\ufe6a\100\ufe6a\101\ufe6a\102\ufe6a\103\ufe6a\104\ufe6a\105" +
    "\ufe6a\106\ufe6a\107\ufe6a\110\ufe6a\111\ufe6a\115\ufe6a\001\002" +
    "\000\032\003\ufeb1\004\ufeb5\020\ufeb1\024\ufeb1\027\ufeb1\032" +
    "\ufeb1\040\ufeb1\047\ufeb1\050\ufeb1\055\ufeb1\056\ufeb1\132\ufeb1" +
    "\001\002\000\040\003\ufe68\004\ufe68\076\ufe68\077\ufe68\100" +
    "\ufe68\101\ufe68\102\ufe68\103\ufe68\104\ufe68\105\ufe68\106\ufe68" +
    "\107\ufe68\110\ufe68\111\ufe68\115\ufe68\001\002\000\040\003" +
    "\ufe69\004\ufe69\076\ufe69\077\ufe69\100\ufe69\101\ufe69\102\ufe69" +
    "\103\ufe69\104\ufe69\105\ufe69\106\ufe69\107\ufe69\110\ufe69\111" +
    "\ufe69\115\ufe69\001\002\000\130\002\ufeb6\003\ufeb6\005\ufeb6" +
    "\010\ufeb6\011\ufeb6\012\ufeb6\013\ufeb6\014\ufeb6\015\ufeb6\016" +
    "\ufeb6\020\ufeb6\024\ufeb6\027\ufeb6\032\ufeb6\034\ufeb6\040\ufeb6" +
    "\047\ufeb6\050\ufeb6\055\ufeb6\056\ufeb6\061\ufeb6\062\ufeb6\063" +
    "\ufeb6\064\ufeb6\065\ufeb6\066\ufeb6\067\ufeb6\071\ufeb6\121\ufeb6" +
    "\122\ufeb6\126\ufeb6\130\ufeb6\132\ufeb6\147\ufeb6\150\ufeb6\152" +
    "\ufeb6\153\ufeb6\154\ufeb6\155\ufeb6\156\ufeb6\157\ufeb6\166\ufeb6" +
    "\170\ufeb6\001\002\000\040\003\ufe6f\004\ufe6f\076\ufe6f\077" +
    "\ufe6f\100\ufe6f\101\ufe6f\102\ufe6f\103\ufe6f\104\ufe6f\105\ufe6f" +
    "\106\ufe6f\107\ufe6f\110\ufe6f\111\ufe6f\115\ufe6f\001\002\000" +
    "\014\004\ufe76\104\u0199\105\u0198\106\u019a\107\u0197\001\002" +
    "\000\026\003\u01a3\114\u018f\122\u0190\123\u0195\124\u018e\125" +
    "\u0189\127\u018b\134\u018c\142\u0193\143\u0192\001\002\000\026" +
    "\003\u01a1\114\u018f\122\u0190\123\u0195\124\u018e\125\u0189\127" +
    "\u018b\134\u018c\142\u0193\143\u0192\001\002\000\026\003\u019f" +
    "\114\u018f\122\u0190\123\u0195\124\u018e\125\u0189\127\u018b\134" +
    "\u018c\142\u0193\143\u0192\001\002\000\026\003\u019d\114\u018f" +
    "\122\u0190\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c\142" +
    "\u0193\143\u0192\001\002\000\004\004\u019c\001\002\000\130" +
    "\002\ufe75\003\ufe75\005\ufe75\010\ufe75\011\ufe75\012\ufe75\013" +
    "\ufe75\014\ufe75\015\ufe75\016\ufe75\020\ufe75\024\ufe75\027\ufe75" +
    "\032\ufe75\034\ufe75\040\ufe75\047\ufe75\050\ufe75\055\ufe75\056" +
    "\ufe75\061\ufe75\062\ufe75\063\ufe75\064\ufe75\065\ufe75\066\ufe75" +
    "\067\ufe75\071\ufe75\121\ufe75\122\ufe75\126\ufe75\130\ufe75\132" +
    "\ufe75\147\ufe75\150\ufe75\152\ufe75\153\ufe75\154\ufe75\155\ufe75" +
    "\156\ufe75\157\ufe75\166\ufe75\170\ufe75\001\002\000\040\003" +
    "\ufe65\004\ufe65\076\ufe65\077\ufe65\100\ufe65\101\ufe65\102\ufe65" +
    "\103\ufe65\104\ufe65\105\ufe65\106\ufe65\107\ufe65\110\ufe65\111" +
    "\ufe65\115\ufe65\001\002\000\040\003\ufe72\004\ufe72\076\ufe72" +
    "\077\ufe72\100\ufe72\101\ufe72\102\ufe72\103\ufe72\104\ufe72\105" +
    "\ufe72\106\ufe72\107\ufe72\110\ufe72\111\ufe72\115\ufe72\001\002" +
    "\000\040\003\ufe67\004\ufe67\076\ufe67\077\ufe67\100\ufe67\101" +
    "\ufe67\102\ufe67\103\ufe67\104\ufe67\105\ufe67\106\ufe67\107\ufe67" +
    "\110\ufe67\111\ufe67\115\ufe67\001\002\000\040\003\ufe74\004" +
    "\ufe74\076\ufe74\077\ufe74\100\ufe74\101\ufe74\102\ufe74\103\ufe74" +
    "\104\ufe74\105\ufe74\106\u019a\107\u0197\110\ufe74\111\ufe74\115" +
    "\ufe74\001\002\000\040\003\ufe66\004\ufe66\076\ufe66\077\ufe66" +
    "\100\ufe66\101\ufe66\102\ufe66\103\ufe66\104\ufe66\105\ufe66\106" +
    "\ufe66\107\ufe66\110\ufe66\111\ufe66\115\ufe66\001\002\000\040" +
    "\003\ufe73\004\ufe73\076\ufe73\077\ufe73\100\ufe73\101\ufe73\102" +
    "\ufe73\103\ufe73\104\ufe73\105\ufe73\106\u019a\107\u0197\110\ufe73" +
    "\111\ufe73\115\ufe73\001\002\000\040\003\ufe64\004\ufe64\076" +
    "\ufe64\077\ufe64\100\ufe64\101\ufe64\102\ufe64\103\ufe64\104\ufe64" +
    "\105\ufe64\106\ufe64\107\ufe64\110\ufe64\111\ufe64\115\ufe64\001" +
    "\002\000\040\003\ufe71\004\ufe71\076\ufe71\077\ufe71\100\ufe71" +
    "\101\ufe71\102\ufe71\103\ufe71\104\ufe71\105\ufe71\106\ufe71\107" +
    "\ufe71\110\ufe71\111\ufe71\115\ufe71\001\002\000\030\003\u01af" +
    "\020\u01a8\024\u01aa\027\u01b3\032\u01b0\040\u01b2\047\u01ad\050" +
    "\u01ab\055\u01b1\056\u01a9\132\u01ac\001\002\000\004\004\u01a7" +
    "\001\002\000\130\002\ufeb4\003\ufeb4\005\ufeb4\010\ufeb4\011" +
    "\ufeb4\012\ufeb4\013\ufeb4\014\ufeb4\015\ufeb4\016\ufeb4\020\ufeb4" +
    "\024\ufeb4\027\ufeb4\032\ufeb4\034\ufeb4\040\ufeb4\047\ufeb4\050" +
    "\ufeb4\055\ufeb4\056\ufeb4\061\ufeb4\062\ufeb4\063\ufeb4\064\ufeb4" +
    "\065\ufeb4\066\ufeb4\067\ufeb4\071\ufeb4\121\ufeb4\122\ufeb4\126" +
    "\ufeb4\130\ufeb4\132\ufeb4\147\ufeb4\150\ufeb4\152\ufeb4\153\ufeb4" +
    "\154\ufeb4\155\ufeb4\156\ufeb4\157\ufeb4\166\ufeb4\170\ufeb4\001" +
    "\002\000\006\003\ufe99\114\ufead\001\002\000\006\003\ufe8b" +
    "\114\ufe9f\001\002\000\006\003\ufe97\114\ufeab\001\002\000" +
    "\006\003\ufe9b\114\ufeaf\001\002\000\006\003\ufe89\114\ufe9d" +
    "\001\002\000\006\003\ufe8f\114\ufea3\001\002\000\004\004" +
    "\u01ec\001\002\000\004\004\ufe87\001\002\000\006\003\ufe93" +
    "\114\ufea7\001\002\000\006\003\ufe8d\114\ufea1\001\002\000" +
    "\006\003\ufe91\114\ufea5\001\002\000\006\003\ufe95\114\ufea9" +
    "\001\002\000\004\114\u01b7\001\002\000\004\003\u01b6\001" +
    "\002\000\004\004\ufe94\001\002\000\012\012\u01b8\013\u01bc" +
    "\014\u01ba\015\u01b9\001\002\000\004\114\u01d3\001\002\000" +
    "\004\114\u01cc\001\002\000\004\114\u01c5\001\002\000\004" +
    "\115\u01c4\001\002\000\004\114\u01bd\001\002\000\006\122" +
    "\u01bf\123\u01be\001\002\000\004\115\ufe84\001\002\000\004" +
    "\115\ufe7c\001\002\000\004\115\u01c1\001\002\000\004\115" +
    "\ufe7b\001\002\000\004\115\u01c3\001\002\000\004\115\ufe83" +
    "\001\002\000\004\004\ufea8\001\002\000\006\122\u01c7\123" +
    "\u01c6\001\002\000\004\115\ufe82\001\002\000\004\115\ufe7a" +
    "\001\002\000\004\115\u01c9\001\002\000\004\115\ufe79\001" +
    "\002\000\004\115\u01cb\001\002\000\004\115\ufe81\001\002" +
    "\000\006\122\u01ce\123\u01cd\001\002\000\004\115\ufe80\001" +
    "\002\000\004\115\ufe78\001\002\000\004\115\u01d0\001\002" +
    "\000\004\115\ufe77\001\002\000\004\115\u01d2\001\002\000" +
    "\004\115\ufe7f\001\002\000\006\122\u01d5\123\u01d4\001\002" +
    "\000\004\115\ufe86\001\002\000\004\115\ufe7e\001\002\000" +
    "\004\115\u01d7\001\002\000\004\115\ufe7d\001\002\000\004" +
    "\115\u01d9\001\002\000\004\115\ufe85\001\002\000\004\003" +
    "\u01df\001\002\000\004\114\u01dc\001\002\000\012\012\u01b8" +
    "\013\u01bc\014\u01ba\015\u01b9\001\002\000\004\115\u01de\001" +
    "\002\000\004\004\ufea4\001\002\000\004\004\ufe90\001\002" +
    "\000\004\114\u01e3\001\002\000\004\003\u01e2\001\002\000" +
    "\004\004\ufe8c\001\002\000\012\012\u01b8\013\u01bc\014\u01ba" +
    "\015\u01b9\001\002\000\004\115\u01e5\001\002\000\004\004" +
    "\ufea0\001\002\000\004\114\u01e9\001\002\000\004\003\u01e8" +
    "\001\002\000\004\004\ufe92\001\002\000\012\012\u01b8\013" +
    "\u01bc\014\u01ba\015\u01b9\001\002\000\004\115\u01eb\001\002" +
    "\000\004\004\ufea6\001\002\000\130\002\ufeb0\003\ufeb0\005" +
    "\ufeb0\010\ufeb0\011\ufeb0\012\ufeb0\013\ufeb0\014\ufeb0\015\ufeb0" +
    "\016\ufeb0\020\ufeb0\024\ufeb0\027\ufeb0\032\ufeb0\034\ufeb0\040" +
    "\ufeb0\047\ufeb0\050\ufeb0\055\ufeb0\056\ufeb0\061\ufeb0\062\ufeb0" +
    "\063\ufeb0\064\ufeb0\065\ufeb0\066\ufeb0\067\ufeb0\071\ufeb0\121" +
    "\ufeb0\122\ufeb0\126\ufeb0\130\ufeb0\132\ufeb0\147\ufeb0\150\ufeb0" +
    "\152\ufeb0\153\ufeb0\154\ufeb0\155\ufeb0\156\ufeb0\157\ufeb0\166" +
    "\ufeb0\170\ufeb0\001\002\000\004\114\u01f0\001\002\000\004" +
    "\003\u01ef\001\002\000\004\004\ufe8e\001\002\000\012\012" +
    "\u01b8\013\u01bc\014\u01ba\015\u01b9\001\002\000\004\115\u01f2" +
    "\001\002\000\004\004\ufea2\001\002\000\004\114\u01f6\001" +
    "\002\000\004\003\u01f5\001\002\000\004\004\ufe88\001\002" +
    "\000\012\012\u01b8\013\u01bc\014\u01ba\015\u01b9\001\002\000" +
    "\004\115\u01f8\001\002\000\004\004\ufe9c\001\002\000\004" +
    "\114\u01fc\001\002\000\004\003\u01fb\001\002\000\004\004" +
    "\ufe9a\001\002\000\012\012\u01b8\013\u01bc\014\u01ba\015\u01b9" +
    "\001\002\000\004\115\u01fe\001\002\000\004\004\ufeae\001" +
    "\002\000\004\114\u0202\001\002\000\004\003\u0201\001\002" +
    "\000\004\004\ufe96\001\002\000\012\012\u01b8\013\u01bc\014" +
    "\u01ba\015\u01b9\001\002\000\004\115\u0204\001\002\000\004" +
    "\004\ufeaa\001\002\000\004\114\u0208\001\002\000\004\003" +
    "\u0207\001\002\000\004\004\ufe8a\001\002\000\012\012\u01b8" +
    "\013\u01bc\014\u01ba\015\u01b9\001\002\000\004\115\u020a\001" +
    "\002\000\004\004\ufe9e\001\002\000\004\114\u020e\001\002" +
    "\000\004\003\u020d\001\002\000\004\004\ufe98\001\002\000" +
    "\012\012\u01b8\013\u01bc\014\u01ba\015\u01b9\001\002\000\004" +
    "\115\u0210\001\002\000\004\004\ufeac\001\002\000\026\114" +
    "\u018f\115\u0216\122\u0190\123\u0195\124\u018e\125\u0189\127\u018b" +
    "\134\u018c\142\u0193\143\u0192\001\002\000\016\003\u0214\104" +
    "\u0199\105\u0198\106\u019a\107\u0197\115\u0213\001\002\000\040" +
    "\003\ufe70\004\ufe70\076\ufe70\077\ufe70\100\ufe70\101\ufe70\102" +
    "\ufe70\103\ufe70\104\ufe70\105\ufe70\106\ufe70\107\ufe70\110\ufe70" +
    "\111\ufe70\115\ufe70\001\002\000\004\115\u0215\001\002\000" +
    "\040\003\ufe63\004\ufe63\076\ufe63\077\ufe63\100\ufe63\101\ufe63" +
    "\102\ufe63\103\ufe63\104\ufe63\105\ufe63\106\ufe63\107\ufe63\110" +
    "\ufe63\111\ufe63\115\ufe63\001\002\000\040\003\ufe61\004\ufe61" +
    "\076\ufe61\077\ufe61\100\ufe61\101\ufe61\102\ufe61\103\ufe61\104" +
    "\ufe61\105\ufe61\106\ufe61\107\ufe61\110\ufe61\111\ufe61\115\ufe61" +
    "\001\002\000\014\104\u0199\105\u0198\106\u019a\107\u0197\115" +
    "\u0218\001\002\000\040\003\ufe62\004\ufe62\076\ufe62\077\ufe62" +
    "\100\ufe62\101\ufe62\102\ufe62\103\ufe62\104\ufe62\105\ufe62\106" +
    "\ufe62\107\ufe62\110\ufe62\111\ufe62\115\ufe62\001\002\000\030" +
    "\003\u01af\020\u01a8\024\u01aa\027\u01b3\032\u01b0\040\u01b2\047" +
    "\u01ad\050\u01ab\055\u01b1\056\u01a9\132\u01ac\001\002\000\004" +
    "\004\u021b\001\002\000\130\002\ufeb2\003\ufeb2\005\ufeb2\010" +
    "\ufeb2\011\ufeb2\012\ufeb2\013\ufeb2\014\ufeb2\015\ufeb2\016\ufeb2" +
    "\020\ufeb2\024\ufeb2\027\ufeb2\032\ufeb2\034\ufeb2\040\ufeb2\047" +
    "\ufeb2\050\ufeb2\055\ufeb2\056\ufeb2\061\ufeb2\062\ufeb2\063\ufeb2" +
    "\064\ufeb2\065\ufeb2\066\ufeb2\067\ufeb2\071\ufeb2\121\ufeb2\122" +
    "\ufeb2\126\ufeb2\130\ufeb2\132\ufeb2\147\ufeb2\150\ufeb2\152\ufeb2" +
    "\153\ufeb2\154\ufeb2\155\ufeb2\156\ufeb2\157\ufeb2\166\ufeb2\170" +
    "\ufeb2\001\002\000\004\075\u021d\001\002\000\004\003\u021e" +
    "\001\002\000\004\004\u021f\001\002\000\130\002\ufeba\003" +
    "\ufeba\005\ufeba\010\ufeba\011\ufeba\012\ufeba\013\ufeba\014\ufeba" +
    "\015\ufeba\016\ufeba\020\ufeba\024\ufeba\027\ufeba\032\ufeba\034" +
    "\ufeba\040\ufeba\047\ufeba\050\ufeba\055\ufeba\056\ufeba\061\ufeba" +
    "\062\ufeba\063\ufeba\064\ufeba\065\ufeba\066\ufeba\067\ufeba\071" +
    "\ufeba\121\ufeba\122\ufeba\126\ufeba\130\ufeba\132\ufeba\147\ufeba" +
    "\150\ufeba\152\ufeba\153\ufeba\154\ufeba\155\ufeba\156\ufeba\157" +
    "\ufeba\166\ufeba\170\ufeba\001\002\000\004\075\u0221\001\002" +
    "\000\004\003\u0222\001\002\000\004\004\u0223\001\002\000" +
    "\130\002\ufed8\003\ufed8\005\ufed8\010\ufed8\011\ufed8\012\ufed8" +
    "\013\ufed8\014\ufed8\015\ufed8\016\ufed8\020\ufed8\024\ufed8\027" +
    "\ufed8\032\ufed8\034\ufed8\040\ufed8\047\ufed8\050\ufed8\055\ufed8" +
    "\056\ufed8\061\ufed8\062\ufed8\063\ufed8\064\ufed8\065\ufed8\066" +
    "\ufed8\067\ufed8\071\ufed8\121\ufed8\122\ufed8\126\ufed8\130\ufed8" +
    "\132\ufed8\147\ufed8\150\ufed8\152\ufed8\153\ufed8\154\ufed8\155" +
    "\ufed8\156\ufed8\157\ufed8\166\ufed8\170\ufed8\001\002\000\126" +
    "\003\055\005\044\010\022\011\054\012\104\013\103\014" +
    "\101\015\100\016\064\020\072\024\031\027\027\032\062" +
    "\034\073\040\035\047\075\050\021\055\105\056\041\061" +
    "\051\062\047\063\052\064\076\065\106\066\050\067\053" +
    "\071\024\121\060\122\074\126\063\130\045\132\036\147" +
    "\043\150\032\152\067\153\042\154\025\155\077\156\061" +
    "\157\046\166\030\170\056\001\002\000\004\002\ufff4\001" +
    "\002\000\010\003\263\123\265\127\266\001\002\000\004" +
    "\115\u0228\001\002\000\004\004\uff4c\001\002\000\004\004" +
    "\u022a\001\002\000\130\002\uff4b\003\uff4b\005\uff4b\010\uff4b" +
    "\011\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\020" +
    "\uff4b\024\uff4b\027\uff4b\032\uff4b\034\uff4b\040\uff4b\047\uff4b" +
    "\050\uff4b\055\uff4b\056\uff4b\061\uff4b\062\uff4b\063\uff4b\064" +
    "\uff4b\065\uff4b\066\uff4b\067\uff4b\071\uff4b\121\uff4b\122\uff4b" +
    "\126\uff4b\130\uff4b\132\uff4b\147\uff4b\150\uff4b\152\uff4b\153" +
    "\uff4b\154\uff4b\155\uff4b\156\uff4b\157\uff4b\166\uff4b\170\uff4b" +
    "\001\002\000\126\003\055\005\044\010\022\011\054\012" +
    "\104\013\103\014\101\015\100\016\064\020\072\024\031" +
    "\027\027\032\062\034\073\040\035\047\075\050\021\055" +
    "\105\056\041\061\051\062\047\063\052\064\076\065\106" +
    "\066\050\067\053\071\024\121\060\122\074\126\063\130" +
    "\045\132\036\147\043\150\032\152\067\153\042\154\025" +
    "\155\077\156\061\157\046\166\030\170\056\001\002\000" +
    "\004\002\uffec\001\002\000\004\075\u022e\001\002\000\004" +
    "\003\u022f\001\002\000\004\004\u0230\001\002\000\130\002" +
    "\ufeb8\003\ufeb8\005\ufeb8\010\ufeb8\011\ufeb8\012\ufeb8\013\ufeb8" +
    "\014\ufeb8\015\ufeb8\016\ufeb8\020\ufeb8\024\ufeb8\027\ufeb8\032" +
    "\ufeb8\034\ufeb8\040\ufeb8\047\ufeb8\050\ufeb8\055\ufeb8\056\ufeb8" +
    "\061\ufeb8\062\ufeb8\063\ufeb8\064\ufeb8\065\ufeb8\066\ufeb8\067" +
    "\ufeb8\071\ufeb8\121\ufeb8\122\ufeb8\126\ufeb8\130\ufeb8\132\ufeb8" +
    "\147\ufeb8\150\ufeb8\152\ufeb8\153\ufeb8\154\ufeb8\155\ufeb8\156" +
    "\ufeb8\157\ufeb8\166\ufeb8\170\ufeb8\001\002\000\004\003\u0232" +
    "\001\002\000\004\004\u0233\001\002\000\130\002\uffca\003" +
    "\uffca\005\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\020\uffca\024\uffca\027\uffca\032\uffca\034" +
    "\uffca\040\uffca\047\uffca\050\uffca\055\uffca\056\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\071" +
    "\uffca\121\uffca\122\uffca\126\uffca\130\uffca\132\uffca\147\uffca" +
    "\150\uffca\152\uffca\153\uffca\154\uffca\155\uffca\156\uffca\157" +
    "\uffca\166\uffca\170\uffca\001\002\000\004\075\u0235\001\002" +
    "\000\004\003\u0236\001\002\000\004\004\u0237\001\002\000" +
    "\130\002\ufed2\003\ufed2\005\ufed2\010\ufed2\011\ufed2\012\ufed2" +
    "\013\ufed2\014\ufed2\015\ufed2\016\ufed2\020\ufed2\024\ufed2\027" +
    "\ufed2\032\ufed2\034\ufed2\040\ufed2\047\ufed2\050\ufed2\055\ufed2" +
    "\056\ufed2\061\ufed2\062\ufed2\063\ufed2\064\ufed2\065\ufed2\066" +
    "\ufed2\067\ufed2\071\ufed2\121\ufed2\122\ufed2\126\ufed2\130\ufed2" +
    "\132\ufed2\147\ufed2\150\ufed2\152\ufed2\153\ufed2\154\ufed2\155" +
    "\ufed2\156\ufed2\157\ufed2\166\ufed2\170\ufed2\001\002\000\004" +
    "\115\u0239\001\002\000\004\004\uff52\001\002\000\004\004" +
    "\u023b\001\002\000\130\002\uff51\003\uff51\005\uff51\010\uff51" +
    "\011\uff51\012\uff51\013\uff51\014\uff51\015\uff51\016\uff51\020" +
    "\uff51\024\uff51\027\uff51\032\uff51\034\uff51\040\uff51\047\uff51" +
    "\050\uff51\055\uff51\056\uff51\061\uff51\062\uff51\063\uff51\064" +
    "\uff51\065\uff51\066\uff51\067\uff51\071\uff51\121\uff51\122\uff51" +
    "\126\uff51\130\uff51\132\uff51\147\uff51\150\uff51\152\uff51\153" +
    "\uff51\154\uff51\155\uff51\156\uff51\157\uff51\166\uff51\170\uff51" +
    "\001\002\000\004\004\u023d\001\002\000\006\002\uffd8\003" +
    "\u023e\001\002\000\004\002\uffd7\001\002\000\006\004\uffe8" +
    "\005\u0240\001\002\000\004\122\u0243\001\002\000\004\004" +
    "\u0242\001\002\000\126\003\uffe7\005\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\024" +
    "\uffe7\027\uffe7\032\uffe7\034\uffe7\040\uffe7\047\uffe7\050\uffe7" +
    "\055\uffe7\056\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\066\uffe7\067\uffe7\071\uffe7\121\uffe7\122\uffe7\126\uffe7" +
    "\130\uffe7\132\uffe7\147\uffe7\150\uffe7\152\uffe7\153\uffe7\154" +
    "\uffe7\155\uffe7\156\uffe7\157\uffe7\166\uffe7\170\uffe7\001\002" +
    "\000\004\004\uffe6\001\002\000\004\004\u0245\001\002\000" +
    "\126\003\uffe5\005\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\020\uffe5\024\uffe5\027\uffe5\032" +
    "\uffe5\034\uffe5\040\uffe5\047\uffe5\050\uffe5\055\uffe5\056\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\071\uffe5\121\uffe5\122\uffe5\126\uffe5\130\uffe5\132\uffe5" +
    "\147\uffe5\150\uffe5\152\uffe5\153\uffe5\154\uffe5\155\uffe5\156" +
    "\uffe5\157\uffe5\166\uffe5\170\uffe5\001\002\000\004\004\u0249" +
    "\001\002\000\126\003\055\005\044\010\022\011\054\012" +
    "\104\013\103\014\101\015\100\016\064\020\072\024\031" +
    "\027\027\032\062\034\073\040\035\047\075\050\021\055" +
    "\105\056\041\061\051\062\047\063\052\064\076\065\106" +
    "\066\050\067\053\071\024\121\060\122\074\126\063\130" +
    "\045\132\036\147\043\150\032\152\067\153\042\154\025" +
    "\155\077\156\061\157\046\166\030\170\056\001\002\000" +
    "\004\002\ufff0\001\002\000\130\002\uffcc\003\uffcc\005\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\020\uffcc\024\uffcc\027\uffcc\032\uffcc\034\uffcc\040\uffcc" +
    "\047\uffcc\050\uffcc\055\uffcc\056\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\071\uffcc\121\uffcc" +
    "\122\uffcc\126\uffcc\130\uffcc\132\uffcc\147\uffcc\150\uffcc\152" +
    "\uffcc\153\uffcc\154\uffcc\155\uffcc\156\uffcc\157\uffcc\166\uffcc" +
    "\170\uffcc\001\002\000\004\075\u024b\001\002\000\004\003" +
    "\u024c\001\002\000\004\004\u024d\001\002\000\130\002\ufec4" +
    "\003\ufec4\005\ufec4\010\ufec4\011\ufec4\012\ufec4\013\ufec4\014" +
    "\ufec4\015\ufec4\016\ufec4\020\ufec4\024\ufec4\027\ufec4\032\ufec4" +
    "\034\ufec4\040\ufec4\047\ufec4\050\ufec4\055\ufec4\056\ufec4\061" +
    "\ufec4\062\ufec4\063\ufec4\064\ufec4\065\ufec4\066\ufec4\067\ufec4" +
    "\071\ufec4\121\ufec4\122\ufec4\126\ufec4\130\ufec4\132\ufec4\147" +
    "\ufec4\150\ufec4\152\ufec4\153\ufec4\154\ufec4\155\ufec4\156\ufec4" +
    "\157\ufec4\166\ufec4\170\ufec4\001\002\000\012\061\051\062" +
    "\047\063\052\064\076\001\002\000\004\122\u0250\001\002" +
    "\000\004\075\u0251\001\002\000\004\123\u0252\001\002\000" +
    "\004\004\u0253\001\002\000\034\003\u0259\047\u0256\114\u018f" +
    "\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c\142" +
    "\u0193\143\u0192\155\u0254\166\u025b\001\002\000\004\114\u0312" +
    "\001\002\000\026\004\uffa0\076\u0300\077\u02fb\100\u02fc\101" +
    "\u02fd\102\u02fe\103\u02ff\110\u02fa\111\u0301\115\uffa0\001\002" +
    "\000\004\005\u02f8\001\002\000\004\004\u02d2\001\002\000" +
    "\040\004\ufe6a\005\u027d\076\ufe6a\077\ufe6a\100\ufe6a\101\ufe6a" +
    "\102\ufe6a\103\ufe6a\104\ufe6a\105\ufe6a\106\ufe6a\107\ufe6a\110" +
    "\ufe6a\111\ufe6a\115\ufe6a\001\002\000\004\004\uff9f\001\002" +
    "\000\032\076\u026b\077\u0267\100\u026a\101\u0266\102\u0265\103" +
    "\u026c\104\u0199\105\u0198\106\u019a\107\u0197\110\u0268\111\u0269" +
    "\001\002\000\004\005\u025c\001\002\000\010\003\u025f\054" +
    "\u025e\144\u0260\001\002\000\026\004\uff8b\076\uff8b\077\uff8b" +
    "\100\uff8b\101\uff8b\102\uff8b\103\uff8b\110\uff8b\111\uff8b\115" +
    "\uff8b\001\002\000\004\114\u0263\001\002\000\026\004\uff67" +
    "\076\uff67\077\uff67\100\uff67\101\uff67\102\uff67\103\uff67\110" +
    "\uff67\111\uff67\115\uff67\001\002\000\004\114\u0261\001\002" +
    "\000\004\115\u0262\001\002\000\026\004\uff69\076\uff69\077" +
    "\uff69\100\uff69\101\uff69\102\uff69\103\uff69\110\uff69\111\uff69" +
    "\115\uff69\001\002\000\004\115\u0264\001\002\000\026\004" +
    "\uff68\076\uff68\077\uff68\100\uff68\101\uff68\102\uff68\103\uff68" +
    "\110\uff68\111\uff68\115\uff68\001\002\000\032\047\u0256\114" +
    "\u018f\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c" +
    "\142\u0193\143\u0192\155\u0254\166\u025b\001\002\000\032\047" +
    "\u0256\114\u018f\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b" +
    "\134\u018c\142\u0193\143\u0192\155\u0254\166\u025b\001\002\000" +
    "\032\047\u0256\114\u018f\122\u0258\123\u0195\124\u018e\125\u0189" +
    "\127\u018b\134\u018c\142\u0193\143\u0192\155\u0254\166\u025b\001" +
    "\002\000\032\047\u0256\114\u018f\122\u0258\123\u0195\124\u018e" +
    "\125\u0189\127\u018b\134\u018c\142\u0193\143\u0192\155\u0254\166" +
    "\u025b\001\002\000\032\047\u0256\114\u018f\122\u0258\123\u0195" +
    "\124\u018e\125\u0189\127\u018b\134\u018c\142\u0193\143\u0192\155" +
    "\u0254\166\u025b\001\002\000\032\047\u0256\114\u018f\122\u0258" +
    "\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c\142\u0193\143" +
    "\u0192\155\u0254\166\u025b\001\002\000\032\047\u0256\114\u018f" +
    "\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c\142" +
    "\u0193\143\u0192\155\u0254\166\u025b\001\002\000\032\047\u0256" +
    "\114\u018f\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b\134" +
    "\u018c\142\u0193\143\u0192\155\u0254\166\u025b\001\002\000\006" +
    "\004\uffaf\115\uffaf\001\002\000\016\004\uffbf\104\u0199\105" +
    "\u0198\106\u019a\107\u0197\115\uffbf\001\002\000\006\004\uffb0" +
    "\115\uffb0\001\002\000\016\004\uffc0\104\u0199\105\u0198\106" +
    "\u019a\107\u0197\115\uffc0\001\002\000\006\004\uffae\115\uffae" +
    "\001\002\000\016\004\uffbe\104\u0199\105\u0198\106\u019a\107" +
    "\u0197\115\uffbe\001\002\000\006\004\uffa9\115\uffa9\001\002" +
    "\000\016\004\uffb9\104\u0199\105\u0198\106\u019a\107\u0197\115" +
    "\uffb9\001\002\000\006\004\uffaa\115\uffaa\001\002\000\016" +
    "\004\uffba\104\u0199\105\u0198\106\u019a\107\u0197\115\uffba\001" +
    "\002\000\006\004\uffac\115\uffac\001\002\000\016\004\uffbc" +
    "\104\u0199\105\u0198\106\u019a\107\u0197\115\uffbc\001\002\000" +
    "\006\004\uffad\115\uffad\001\002\000\016\004\uffbd\104\u0199" +
    "\105\u0198\106\u019a\107\u0197\115\uffbd\001\002\000\006\004" +
    "\uffab\115\uffab\001\002\000\016\004\uffbb\104\u0199\105\u0198" +
    "\106\u019a\107\u0197\115\uffbb\001\002\000\062\017\u0294\021" +
    "\u028f\022\u0288\023\u028c\025\u0286\026\u028a\030\u0292\031\u0295" +
    "\033\u028e\035\u0290\036\u0282\037\u0280\041\u0287\042\u0285\043" +
    "\u0291\044\u028b\051\u027f\052\u028d\053\u0293\136\u0284\137\u0283" +
    "\140\u0281\141\u0289\144\u027e\001\002\000\004\114\u02d0\001" +
    "\002\000\004\114\u02ce\001\002\000\004\114\u02cc\001\002" +
    "\000\004\114\u02ca\001\002\000\004\114\u02c8\001\002\000" +
    "\004\114\u02c6\001\002\000\004\114\u02c4\001\002\000\004" +
    "\114\u02c2\001\002\000\004\114\u02c0\001\002\000\004\114" +
    "\u02be\001\002\000\004\114\u02bc\001\002\000\004\114\u02ba" +
    "\001\002\000\004\114\u02b8\001\002\000\004\114\u02b6\001" +
    "\002\000\004\114\u02b4\001\002\000\004\114\u02b2\001\002" +
    "\000\004\114\u02b0\001\002\000\004\114\u02ab\001\002\000" +
    "\004\114\u02a9\001\002\000\004\114\u02a7\001\002\000\004" +
    "\114\u02a2\001\002\000\004\114\u029d\001\002\000\004\114" +
    "\u029b\001\002\000\004\114\u0296\001\002\000\006\122\u0297" +
    "\127\u0298\001\002\000\004\115\u029a\001\002\000\004\115" +
    "\u0299\001\002\000\026\004\uff80\076\uff80\077\uff80\100\uff80" +
    "\101\uff80\102\uff80\103\uff80\110\uff80\111\uff80\115\uff80\001" +
    "\002\000\026\004\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e" +
    "\102\uff7e\103\uff7e\110\uff7e\111\uff7e\115\uff7e\001\002\000" +
    "\004\115\u029c\001\002\000\026\004\uff88\076\uff88\077\uff88" +
    "\100\uff88\101\uff88\102\uff88\103\uff88\110\uff88\111\uff88\115" +
    "\uff88\001\002\000\006\122\u029e\127\u029f\001\002\000\004" +
    "\115\u02a1\001\002\000\004\115\u02a0\001\002\000\026\004" +
    "\uff71\076\uff71\077\uff71\100\uff71\101\uff71\102\uff71\103\uff71" +
    "\110\uff71\111\uff71\115\uff71\001\002\000\026\004\uff70\076" +
    "\uff70\077\uff70\100\uff70\101\uff70\102\uff70\103\uff70\110\uff70" +
    "\111\uff70\115\uff70\001\002\000\006\122\u02a4\123\u02a3\001" +
    "\002\000\004\115\u02a6\001\002\000\004\115\u02a5\001\002" +
    "\000\026\004\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\102" +
    "\uff7f\103\uff7f\110\uff7f\111\uff7f\115\uff7f\001\002\000\026" +
    "\004\uff81\076\uff81\077\uff81\100\uff81\101\uff81\102\uff81\103" +
    "\uff81\110\uff81\111\uff81\115\uff81\001\002\000\004\115\u02a8" +
    "\001\002\000\026\004\uff77\076\uff77\077\uff77\100\uff77\101" +
    "\uff77\102\uff77\103\uff77\110\uff77\111\uff77\115\uff77\001\002" +
    "\000\004\115\u02aa\001\002\000\026\004\uff7c\076\uff7c\077" +
    "\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c\110\uff7c\111\uff7c" +
    "\115\uff7c\001\002\000\006\122\u02ad\123\u02ac\001\002\000" +
    "\004\115\u02af\001\002\000\004\115\u02ae\001\002\000\026" +
    "\004\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103" +
    "\uff86\110\uff86\111\uff86\115\uff86\001\002\000\026\004\uff87" +
    "\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87\110" +
    "\uff87\111\uff87\115\uff87\001\002\000\004\115\u02b1\001\002" +
    "\000\026\004\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102" +
    "\uff7d\103\uff7d\110\uff7d\111\uff7d\115\uff7d\001\002\000\004" +
    "\115\u02b3\001\002\000\026\004\uff72\076\uff72\077\uff72\100" +
    "\uff72\101\uff72\102\uff72\103\uff72\110\uff72\111\uff72\115\uff72" +
    "\001\002\000\004\115\u02b5\001\002\000\026\004\uff84\076" +
    "\uff84\077\uff84\100\uff84\101\uff84\102\uff84\103\uff84\110\uff84" +
    "\111\uff84\115\uff84\001\002\000\004\115\u02b7\001\002\000" +
    "\026\004\uff75\076\uff75\077\uff75\100\uff75\101\uff75\102\uff75" +
    "\103\uff75\110\uff75\111\uff75\115\uff75\001\002\000\004\115" +
    "\u02b9\001\002\000\026\004\uff83\076\uff83\077\uff83\100\uff83" +
    "\101\uff83\102\uff83\103\uff83\110\uff83\111\uff83\115\uff83\001" +
    "\002\000\004\115\u02bb\001\002\000\026\004\uff6d\076\uff6d" +
    "\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\110\uff6d\111" +
    "\uff6d\115\uff6d\001\002\000\004\115\u02bd\001\002\000\026" +
    "\004\uff85\076\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103" +
    "\uff85\110\uff85\111\uff85\115\uff85\001\002\000\004\115\u02bf" +
    "\001\002\000\026\004\uff79\076\uff79\077\uff79\100\uff79\101" +
    "\uff79\102\uff79\103\uff79\110\uff79\111\uff79\115\uff79\001\002" +
    "\000\004\115\u02c1\001\002\000\026\004\uff82\076\uff82\077" +
    "\uff82\100\uff82\101\uff82\102\uff82\103\uff82\110\uff82\111\uff82" +
    "\115\uff82\001\002\000\004\115\u02c3\001\002\000\026\004" +
    "\uff78\076\uff78\077\uff78\100\uff78\101\uff78\102\uff78\103\uff78" +
    "\110\uff78\111\uff78\115\uff78\001\002\000\004\115\u02c5\001" +
    "\002\000\026\004\uff74\076\uff74\077\uff74\100\uff74\101\uff74" +
    "\102\uff74\103\uff74\110\uff74\111\uff74\115\uff74\001\002\000" +
    "\004\115\u02c7\001\002\000\026\004\uff6f\076\uff6f\077\uff6f" +
    "\100\uff6f\101\uff6f\102\uff6f\103\uff6f\110\uff6f\111\uff6f\115" +
    "\uff6f\001\002\000\004\115\u02c9\001\002\000\026\004\uff7b" +
    "\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103\uff7b\110" +
    "\uff7b\111\uff7b\115\uff7b\001\002\000\004\115\u02cb\001\002" +
    "\000\026\004\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\102" +
    "\uff6e\103\uff6e\110\uff6e\111\uff6e\115\uff6e\001\002\000\004" +
    "\115\u02cd\001\002\000\026\004\uff7a\076\uff7a\077\uff7a\100" +
    "\uff7a\101\uff7a\102\uff7a\103\uff7a\110\uff7a\111\uff7a\115\uff7a" +
    "\001\002\000\004\115\u02cf\001\002\000\026\004\uff73\076" +
    "\uff73\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73\110\uff73" +
    "\111\uff73\115\uff73\001\002\000\004\115\u02d1\001\002\000" +
    "\026\004\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\uff76" +
    "\103\uff76\110\uff76\111\uff76\115\uff76\001\002\000\004\122" +
    "\u02d3\001\002\000\004\112\u02d4\001\002\000\004\115\u02d5" +
    "\001\002\000\006\003\u02d6\120\u02d7\001\002\000\126\003" +
    "\uff6a\005\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a" +
    "\015\uff6a\016\uff6a\020\uff6a\024\uff6a\027\uff6a\032\uff6a\034" +
    "\uff6a\040\uff6a\047\uff6a\050\uff6a\055\uff6a\056\uff6a\061\uff6a" +
    "\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a\071" +
    "\uff6a\121\uff6a\122\uff6a\126\uff6a\130\uff6a\132\uff6a\147\uff6a" +
    "\150\uff6a\152\uff6a\153\uff6a\154\uff6a\155\uff6a\156\uff6a\157" +
    "\uff6a\166\uff6a\170\uff6a\001\002\000\110\003\u02dc\005\044" +
    "\010\022\011\054\012\104\013\103\014\101\015\100\016" +
    "\064\020\072\024\031\027\027\032\062\034\073\040\035" +
    "\047\075\050\021\055\105\056\041\065\106\066\050\071" +
    "\024\121\u02de\122\074\126\u02df\132\036\147\u02da\150\032" +
    "\152\067\153\042\154\025\155\077\156\061\157\046\166" +
    "\030\001\002\000\126\003\uff6c\005\uff6c\010\uff6c\011\uff6c" +
    "\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\020\uff6c\024" +
    "\uff6c\027\uff6c\032\uff6c\034\uff6c\040\uff6c\047\uff6c\050\uff6c" +
    "\055\uff6c\056\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065" +
    "\uff6c\066\uff6c\067\uff6c\071\uff6c\121\uff6c\122\uff6c\126\uff6c" +
    "\130\uff6c\132\uff6c\147\uff6c\150\uff6c\152\uff6c\153\uff6c\154" +
    "\uff6c\155\uff6c\156\uff6c\157\uff6c\166\uff6c\170\uff6c\001\002" +
    "\000\110\003\uff9e\005\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e\024\uff9e\027\uff9e" +
    "\032\uff9e\034\uff9e\040\uff9e\047\uff9e\050\uff9e\055\uff9e\056" +
    "\uff9e\065\uff9e\066\uff9e\071\uff9e\121\uff9e\122\uff9e\126\uff9e" +
    "\132\uff9e\147\uff9e\150\uff9e\152\uff9e\153\uff9e\154\uff9e\155" +
    "\uff9e\156\uff9e\157\uff9e\166\uff9e\001\002\000\004\004\uff90" +
    "\001\002\000\126\003\uff6b\005\uff6b\010\uff6b\011\uff6b\012" +
    "\uff6b\013\uff6b\014\uff6b\015\uff6b\016\uff6b\020\uff6b\024\uff6b" +
    "\027\uff6b\032\uff6b\034\uff6b\040\uff6b\047\uff6b\050\uff6b\055" +
    "\uff6b\056\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b" +
    "\066\uff6b\067\uff6b\071\uff6b\121\uff6b\122\uff6b\126\uff6b\130" +
    "\uff6b\132\uff6b\147\uff6b\150\uff6b\152\uff6b\153\uff6b\154\uff6b" +
    "\155\uff6b\156\uff6b\157\uff6b\166\uff6b\170\uff6b\001\002\000" +
    "\132\002\uff8c\003\uff8c\004\uff94\005\uff8c\010\uff8c\011\uff8c" +
    "\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\020\uff8c\024" +
    "\uff8c\027\uff8c\032\uff8c\034\uff8c\040\uff8c\047\uff8c\050\uff8c" +
    "\055\uff8c\056\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\071\uff8c\121\uff8c\122\uff8c\126\uff8c" +
    "\130\uff8c\132\uff8c\147\uff8c\150\uff8c\152\uff8c\153\uff8c\154" +
    "\uff8c\155\uff8c\156\uff8c\157\uff8c\166\uff8c\170\uff8c\001\002" +
    "\000\110\003\uff98\005\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\020\uff98\024\uff98\027\uff98" +
    "\032\uff98\034\uff98\040\uff98\047\uff98\050\uff98\055\uff98\056" +
    "\uff98\065\uff98\066\uff98\071\uff98\121\uff98\122\uff98\126\uff98" +
    "\132\uff98\147\uff98\150\uff98\152\uff98\153\uff98\154\uff98\155" +
    "\uff98\156\uff98\157\uff98\166\uff98\001\002\000\132\002\uff8e" +
    "\003\uff8e\005\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\020\uff8e\024\uff8e\027\uff8e\032\uff8e" +
    "\034\uff8e\040\uff8e\047\uff8e\050\uff8e\055\uff8e\056\uff8e\061" +
    "\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e" +
    "\071\uff8e\115\u02ec\121\uff8e\122\uff8e\126\uff8e\130\uff8e\132" +
    "\uff8e\147\uff8e\150\uff8e\152\uff8e\153\uff8e\154\uff8e\155\uff8e" +
    "\156\uff8e\157\uff8e\166\uff8e\170\uff8e\001\002\000\004\004" +
    "\uff92\001\002\000\110\003\uff96\005\uff96\010\uff96\011\uff96" +
    "\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\020\uff96\024" +
    "\uff96\027\uff96\032\uff96\034\uff96\040\uff96\047\uff96\050\uff96" +
    "\055\uff96\056\uff96\065\uff96\066\uff96\071\uff96\121\uff96\122" +
    "\uff96\126\uff96\132\uff96\147\uff96\150\uff96\152\uff96\153\uff96" +
    "\154\uff96\155\uff96\156\uff96\157\uff96\166\uff96\001\002\000" +
    "\110\003\uff9c\005\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\020\uff9c\024\uff9c\027\uff9c\032" +
    "\uff9c\034\uff9c\040\uff9c\047\uff9c\050\uff9c\055\uff9c\056\uff9c" +
    "\065\uff9c\066\uff9c\071\uff9c\121\uff9c\122\uff9c\126\uff9c\132" +
    "\uff9c\147\uff9c\150\uff9c\152\uff9c\153\uff9c\154\uff9c\155\uff9c" +
    "\156\uff9c\157\uff9c\166\uff9c\001\002\000\110\003\uff9a\005" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\020\uff9a\024\uff9a\027\uff9a\032\uff9a\034\uff9a\040" +
    "\uff9a\047\uff9a\050\uff9a\055\uff9a\056\uff9a\065\uff9a\066\uff9a" +
    "\071\uff9a\121\uff9a\122\uff9a\126\uff9a\132\uff9a\147\uff9a\150" +
    "\uff9a\152\uff9a\153\uff9a\154\uff9a\155\uff9a\156\uff9a\157\uff9a" +
    "\166\uff9a\001\002\000\110\003\u02dc\005\044\010\022\011" +
    "\054\012\104\013\103\014\101\015\100\016\064\020\072" +
    "\024\031\027\027\032\062\034\073\040\035\047\075\050" +
    "\021\055\105\056\041\065\106\066\050\071\024\121\u02de" +
    "\122\074\126\u02df\132\036\147\u02da\150\032\152\067\153" +
    "\042\154\025\155\077\156\061\157\046\166\030\001\002" +
    "\000\130\002\uff99\003\uff99\005\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\016\uff99\020\uff99\024\uff99" +
    "\027\uff99\032\uff99\034\uff99\040\uff99\047\uff99\050\uff99\055" +
    "\uff99\056\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99" +
    "\066\uff99\067\uff99\071\uff99\121\uff99\122\uff99\126\uff99\130" +
    "\uff99\132\uff99\147\uff99\150\uff99\152\uff99\153\uff99\154\uff99" +
    "\155\uff99\156\uff99\157\uff99\166\uff99\170\uff99\001\002\000" +
    "\110\003\u02dc\005\044\010\022\011\054\012\104\013\103" +
    "\014\101\015\100\016\064\020\072\024\031\027\027\032" +
    "\062\034\073\040\035\047\075\050\021\055\105\056\041" +
    "\065\106\066\050\071\024\121\u02de\122\074\126\u02df\132" +
    "\036\147\u02da\150\032\152\067\153\042\154\025\155\077" +
    "\156\061\157\046\166\030\001\002\000\130\002\uff9b\003" +
    "\uff9b\005\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\015\uff9b\016\uff9b\020\uff9b\024\uff9b\027\uff9b\032\uff9b\034" +
    "\uff9b\040\uff9b\047\uff9b\050\uff9b\055\uff9b\056\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\071" +
    "\uff9b\121\uff9b\122\uff9b\126\uff9b\130\uff9b\132\uff9b\147\uff9b" +
    "\150\uff9b\152\uff9b\153\uff9b\154\uff9b\155\uff9b\156\uff9b\157" +
    "\uff9b\166\uff9b\170\uff9b\001\002\000\110\003\u02dc\005\044" +
    "\010\022\011\054\012\104\013\103\014\101\015\100\016" +
    "\064\020\072\024\031\027\027\032\062\034\073\040\035" +
    "\047\075\050\021\055\105\056\041\065\106\066\050\071" +
    "\024\121\u02de\122\074\126\u02df\132\036\147\u02da\150\032" +
    "\152\067\153\042\154\025\155\077\156\061\157\046\166" +
    "\030\001\002\000\130\002\uff95\003\uff95\005\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\020" +
    "\uff95\024\uff95\027\uff95\032\uff95\034\uff95\040\uff95\047\uff95" +
    "\050\uff95\055\uff95\056\uff95\061\uff95\062\uff95\063\uff95\064" +
    "\uff95\065\uff95\066\uff95\067\uff95\071\uff95\121\uff95\122\uff95" +
    "\126\uff95\130\uff95\132\uff95\147\uff95\150\uff95\152\uff95\153" +
    "\uff95\154\uff95\155\uff95\156\uff95\157\uff95\166\uff95\170\uff95" +
    "\001\002\000\004\004\u02ea\001\002\000\110\003\u02dc\005" +
    "\044\010\022\011\054\012\104\013\103\014\101\015\100" +
    "\016\064\020\072\024\031\027\027\032\062\034\073\040" +
    "\035\047\075\050\021\055\105\056\041\065\106\066\050" +
    "\071\024\121\u02de\122\074\126\u02df\132\036\147\u02da\150" +
    "\032\152\067\153\042\154\025\155\077\156\061\157\046" +
    "\166\030\001\002\000\130\002\uff91\003\uff91\005\uff91\010" +
    "\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91" +
    "\020\uff91\024\uff91\027\uff91\032\uff91\034\uff91\040\uff91\047" +
    "\uff91\050\uff91\055\uff91\056\uff91\061\uff91\062\uff91\063\uff91" +
    "\064\uff91\065\uff91\066\uff91\067\uff91\071\uff91\121\uff91\122" +
    "\uff91\126\uff91\130\uff91\132\uff91\147\uff91\150\uff91\152\uff91" +
    "\153\uff91\154\uff91\155\uff91\156\uff91\157\uff91\166\uff91\170" +
    "\uff91\001\002\000\004\004\u02ed\001\002\000\130\002\uff8d" +
    "\003\uff8d\005\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\020\uff8d\024\uff8d\027\uff8d\032\uff8d" +
    "\034\uff8d\040\uff8d\047\uff8d\050\uff8d\055\uff8d\056\uff8d\061" +
    "\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\071\uff8d\121\uff8d\122\uff8d\126\uff8d\130\uff8d\132\uff8d\147" +
    "\uff8d\150\uff8d\152\uff8d\153\uff8d\154\uff8d\155\uff8d\156\uff8d" +
    "\157\uff8d\166\uff8d\170\uff8d\001\002\000\110\003\u02dc\005" +
    "\044\010\022\011\054\012\104\013\103\014\101\015\100" +
    "\016\064\020\072\024\031\027\027\032\062\034\073\040" +
    "\035\047\075\050\021\055\105\056\041\065\106\066\050" +
    "\071\024\121\u02de\122\074\126\u02df\132\036\147\u02da\150" +
    "\032\152\067\153\042\154\025\155\077\156\061\157\046" +
    "\166\030\001\002\000\130\002\uff97\003\uff97\005\uff97\010" +
    "\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\020\uff97\024\uff97\027\uff97\032\uff97\034\uff97\040\uff97\047" +
    "\uff97\050\uff97\055\uff97\056\uff97\061\uff97\062\uff97\063\uff97" +
    "\064\uff97\065\uff97\066\uff97\067\uff97\071\uff97\121\uff97\122" +
    "\uff97\126\uff97\130\uff97\132\uff97\147\uff97\150\uff97\152\uff97" +
    "\153\uff97\154\uff97\155\uff97\156\uff97\157\uff97\166\uff97\170" +
    "\uff97\001\002\000\004\004\u02f1\001\002\000\110\003\u02dc" +
    "\005\044\010\022\011\054\012\104\013\103\014\101\015" +
    "\100\016\064\020\072\024\031\027\027\032\062\034\073" +
    "\040\035\047\075\050\021\055\105\056\041\065\106\066" +
    "\050\071\024\121\u02de\122\074\126\u02df\132\036\147\u02da" +
    "\150\032\152\067\153\042\154\025\155\077\156\061\157" +
    "\046\166\030\001\002\000\130\002\uff93\003\uff93\005\uff93" +
    "\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\020\uff93\024\uff93\027\uff93\032\uff93\034\uff93\040\uff93" +
    "\047\uff93\050\uff93\055\uff93\056\uff93\061\uff93\062\uff93\063" +
    "\uff93\064\uff93\065\uff93\066\uff93\067\uff93\071\uff93\121\uff93" +
    "\122\uff93\126\uff93\130\uff93\132\uff93\147\uff93\150\uff93\152" +
    "\uff93\153\uff93\154\uff93\155\uff93\156\uff93\157\uff93\166\uff93" +
    "\170\uff93\001\002\000\004\004\u02f4\001\002\000\110\003" +
    "\u02dc\005\044\010\022\011\054\012\104\013\103\014\101" +
    "\015\100\016\064\020\072\024\031\027\027\032\062\034" +
    "\073\040\035\047\075\050\021\055\105\056\041\065\106" +
    "\066\050\071\024\121\u02de\122\074\126\u02df\132\036\147" +
    "\u02da\150\032\152\067\153\042\154\025\155\077\156\061" +
    "\157\046\166\030\001\002\000\130\002\uff8f\003\uff8f\005" +
    "\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\016\uff8f\020\uff8f\024\uff8f\027\uff8f\032\uff8f\034\uff8f\040" +
    "\uff8f\047\uff8f\050\uff8f\055\uff8f\056\uff8f\061\uff8f\062\uff8f" +
    "\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\071\uff8f\121" +
    "\uff8f\122\uff8f\126\uff8f\130\uff8f\132\uff8f\147\uff8f\150\uff8f" +
    "\152\uff8f\153\uff8f\154\uff8f\155\uff8f\156\uff8f\157\uff8f\166" +
    "\uff8f\170\uff8f\001\002\000\110\003\u02dc\005\044\010\022" +
    "\011\054\012\104\013\103\014\101\015\100\016\064\020" +
    "\072\024\031\027\027\032\062\034\073\040\035\047\075" +
    "\050\021\055\105\056\041\065\106\066\050\071\024\121" +
    "\u02de\122\074\126\u02df\132\036\147\u02da\150\032\152\067" +
    "\153\042\154\025\155\077\156\061\157\046\166\030\001" +
    "\002\000\130\002\uff9d\003\uff9d\005\uff9d\010\uff9d\011\uff9d" +
    "\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\020\uff9d\024" +
    "\uff9d\027\uff9d\032\uff9d\034\uff9d\040\uff9d\047\uff9d\050\uff9d" +
    "\055\uff9d\056\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\066\uff9d\067\uff9d\071\uff9d\121\uff9d\122\uff9d\126\uff9d" +
    "\130\uff9d\132\uff9d\147\uff9d\150\uff9d\152\uff9d\153\uff9d\154" +
    "\uff9d\155\uff9d\156\uff9d\157\uff9d\166\uff9d\170\uff9d\001\002" +
    "\000\010\003\u025f\054\u025e\144\u0260\001\002\000\026\004" +
    "\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a" +
    "\110\uff8a\111\uff8a\115\uff8a\001\002\000\032\047\u0256\114" +
    "\u018f\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c" +
    "\142\u0193\143\u0192\155\u0254\166\u025b\001\002\000\032\047" +
    "\u0256\114\u018f\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b" +
    "\134\u018c\142\u0193\143\u0192\155\u0254\166\u025b\001\002\000" +
    "\032\047\u0256\114\u018f\122\u0258\123\u0195\124\u018e\125\u0189" +
    "\127\u018b\134\u018c\142\u0193\143\u0192\155\u0254\166\u025b\001" +
    "\002\000\032\047\u0256\114\u018f\122\u0258\123\u0195\124\u018e" +
    "\125\u0189\127\u018b\134\u018c\142\u0193\143\u0192\155\u0254\166" +
    "\u025b\001\002\000\032\047\u0256\114\u018f\122\u0258\123\u0195" +
    "\124\u018e\125\u0189\127\u018b\134\u018c\142\u0193\143\u0192\155" +
    "\u0254\166\u025b\001\002\000\032\047\u0256\114\u018f\122\u0258" +
    "\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c\142\u0193\143" +
    "\u0192\155\u0254\166\u025b\001\002\000\032\047\u0256\114\u018f" +
    "\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c\142" +
    "\u0193\143\u0192\155\u0254\166\u025b\001\002\000\032\047\u0256" +
    "\114\u018f\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b\134" +
    "\u018c\142\u0193\143\u0192\155\u0254\166\u025b\001\002\000\006" +
    "\004\uffa1\115\uffa1\001\002\000\016\004\uffb1\104\u0199\105" +
    "\u0198\106\u019a\107\u0197\115\uffb1\001\002\000\006\004\uffa8" +
    "\115\uffa8\001\002\000\016\004\uffb8\104\u0199\105\u0198\106" +
    "\u019a\107\u0197\115\uffb8\001\002\000\006\004\uffa7\115\uffa7" +
    "\001\002\000\016\004\uffb7\104\u0199\105\u0198\106\u019a\107" +
    "\u0197\115\uffb7\001\002\000\006\004\uffa3\115\uffa3\001\002" +
    "\000\016\004\uffb3\104\u0199\105\u0198\106\u019a\107\u0197\115" +
    "\uffb3\001\002\000\006\004\uffa5\115\uffa5\001\002\000\016" +
    "\004\uffb5\104\u0199\105\u0198\106\u019a\107\u0197\115\uffb5\001" +
    "\002\000\006\004\uffa6\115\uffa6\001\002\000\016\004\uffb6" +
    "\104\u0199\105\u0198\106\u019a\107\u0197\115\uffb6\001\002\000" +
    "\006\004\uffa4\115\uffa4\001\002\000\016\004\uffb4\104\u0199" +
    "\105\u0198\106\u019a\107\u0197\115\uffb4\001\002\000\006\004" +
    "\uffa2\115\uffa2\001\002\000\016\004\uffb2\104\u0199\105\u0198" +
    "\106\u019a\107\u0197\115\uffb2\001\002\000\004\115\u0313\001" +
    "\002\000\026\004\uff89\076\uff89\077\uff89\100\uff89\101\uff89" +
    "\102\uff89\103\uff89\110\uff89\111\uff89\115\uff89\001\002\000" +
    "\004\004\uff66\001\002\000\004\004\uff5d\001\002\000\004" +
    "\004\uff5f\001\002\000\004\004\uff60\001\002\000\004\004" +
    "\uff5e\001\002\000\004\004\u031a\001\002\000\130\002\uff65" +
    "\003\uff65\005\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014" +
    "\uff65\015\uff65\016\uff65\020\uff65\024\uff65\027\uff65\032\uff65" +
    "\034\uff65\040\uff65\047\uff65\050\uff65\055\uff65\056\uff65\061" +
    "\uff65\062\uff65\063\uff65\064\uff65\065\uff65\066\uff65\067\uff65" +
    "\071\uff65\121\uff65\122\uff65\126\uff65\130\uff65\132\uff65\147" +
    "\uff65\150\uff65\152\uff65\153\uff65\154\uff65\155\uff65\156\uff65" +
    "\157\uff65\166\uff65\170\uff65\001\002\000\004\115\u031c\001" +
    "\002\000\004\004\uff54\001\002\000\004\004\u031e\001\002" +
    "\000\130\002\uff53\003\uff53\005\uff53\010\uff53\011\uff53\012" +
    "\uff53\013\uff53\014\uff53\015\uff53\016\uff53\020\uff53\024\uff53" +
    "\027\uff53\032\uff53\034\uff53\040\uff53\047\uff53\050\uff53\055" +
    "\uff53\056\uff53\061\uff53\062\uff53\063\uff53\064\uff53\065\uff53" +
    "\066\uff53\067\uff53\071\uff53\121\uff53\122\uff53\126\uff53\130" +
    "\uff53\132\uff53\147\uff53\150\uff53\152\uff53\153\uff53\154\uff53" +
    "\155\uff53\156\uff53\157\uff53\166\uff53\170\uff53\001\002\000" +
    "\130\002\uff48\003\uff48\005\uff48\010\uff48\011\uff48\012\uff48" +
    "\013\uff48\014\uff48\015\uff48\016\uff48\020\uff48\024\uff48\027" +
    "\uff48\032\uff48\034\uff48\040\uff48\047\uff48\050\uff48\055\uff48" +
    "\056\uff48\061\uff48\062\uff48\063\uff48\064\uff48\065\uff48\066" +
    "\uff48\067\uff48\071\uff48\121\uff48\122\uff48\126\uff48\130\uff48" +
    "\132\uff48\147\uff48\150\uff48\152\uff48\153\uff48\154\uff48\155" +
    "\uff48\156\uff48\157\uff48\166\uff48\170\uff48\001\002\000\004" +
    "\003\u0321\001\002\000\004\004\u0322\001\002\000\130\002" +
    "\uffc8\003\uffc8\005\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\020\uffc8\024\uffc8\027\uffc8\032" +
    "\uffc8\034\uffc8\040\uffc8\047\uffc8\050\uffc8\055\uffc8\056\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\071\uffc8\121\uffc8\122\uffc8\126\uffc8\130\uffc8\132\uffc8" +
    "\147\uffc8\150\uffc8\152\uffc8\153\uffc8\154\uffc8\155\uffc8\156" +
    "\uffc8\157\uffc8\166\uffc8\170\uffc8\001\002\000\010\003\263" +
    "\123\265\127\266\001\002\000\004\115\u0325\001\002\000" +
    "\004\004\uff4a\001\002\000\004\004\u0327\001\002\000\130" +
    "\002\uff49\003\uff49\005\uff49\010\uff49\011\uff49\012\uff49\013" +
    "\uff49\014\uff49\015\uff49\016\uff49\020\uff49\024\uff49\027\uff49" +
    "\032\uff49\034\uff49\040\uff49\047\uff49\050\uff49\055\uff49\056" +
    "\uff49\061\uff49\062\uff49\063\uff49\064\uff49\065\uff49\066\uff49" +
    "\067\uff49\071\uff49\121\uff49\122\uff49\126\uff49\130\uff49\132" +
    "\uff49\147\uff49\150\uff49\152\uff49\153\uff49\154\uff49\155\uff49" +
    "\156\uff49\157\uff49\166\uff49\170\uff49\001\002\000\004\075" +
    "\u0329\001\002\000\004\003\u032a\001\002\000\004\004\u032b" +
    "\001\002\000\130\002\ufeca\003\ufeca\005\ufeca\010\ufeca\011" +
    "\ufeca\012\ufeca\013\ufeca\014\ufeca\015\ufeca\016\ufeca\020\ufeca" +
    "\024\ufeca\027\ufeca\032\ufeca\034\ufeca\040\ufeca\047\ufeca\050" +
    "\ufeca\055\ufeca\056\ufeca\061\ufeca\062\ufeca\063\ufeca\064\ufeca" +
    "\065\ufeca\066\ufeca\067\ufeca\071\ufeca\121\ufeca\122\ufeca\126" +
    "\ufeca\130\ufeca\132\ufeca\147\ufeca\150\ufeca\152\ufeca\153\ufeca" +
    "\154\ufeca\155\ufeca\156\ufeca\157\ufeca\166\ufeca\170\ufeca\001" +
    "\002\000\126\003\055\005\044\010\022\011\054\012\104" +
    "\013\103\014\101\015\100\016\064\020\072\024\031\027" +
    "\027\032\062\034\073\040\035\047\075\050\021\055\105" +
    "\056\041\061\051\062\047\063\052\064\076\065\106\066" +
    "\050\067\053\071\024\121\060\122\074\126\063\130\045" +
    "\132\036\147\043\150\032\152\067\153\042\154\025\155" +
    "\077\156\061\157\046\166\030\170\056\001\002\000\004" +
    "\002\uffee\001\002\000\126\003\055\005\044\010\022\011" +
    "\054\012\104\013\103\014\101\015\100\016\064\020\072" +
    "\024\031\027\027\032\062\034\073\040\035\047\075\050" +
    "\021\055\105\056\041\061\051\062\047\063\052\064\076" +
    "\065\106\066\050\067\053\071\024\121\060\122\074\126" +
    "\063\130\045\132\036\147\043\150\032\152\067\153\042" +
    "\154\025\155\077\156\061\157\046\166\030\170\056\001" +
    "\002\000\004\002\uffea\001\002\000\004\075\u0331\001\002" +
    "\000\004\003\u0332\001\002\000\004\004\u0333\001\002\000" +
    "\130\002\ufec8\003\ufec8\005\ufec8\010\ufec8\011\ufec8\012\ufec8" +
    "\013\ufec8\014\ufec8\015\ufec8\016\ufec8\020\ufec8\024\ufec8\027" +
    "\ufec8\032\ufec8\034\ufec8\040\ufec8\047\ufec8\050\ufec8\055\ufec8" +
    "\056\ufec8\061\ufec8\062\ufec8\063\ufec8\064\ufec8\065\ufec8\066" +
    "\ufec8\067\ufec8\071\ufec8\121\ufec8\122\ufec8\126\ufec8\130\ufec8" +
    "\132\ufec8\147\ufec8\150\ufec8\152\ufec8\153\ufec8\154\ufec8\155" +
    "\ufec8\156\ufec8\157\ufec8\166\ufec8\170\ufec8\001\002\000\004" +
    "\075\u0335\001\002\000\004\003\u0336\001\002\000\004\004" +
    "\u0337\001\002\000\130\002\ufed0\003\ufed0\005\ufed0\010\ufed0" +
    "\011\ufed0\012\ufed0\013\ufed0\014\ufed0\015\ufed0\016\ufed0\020" +
    "\ufed0\024\ufed0\027\ufed0\032\ufed0\034\ufed0\040\ufed0\047\ufed0" +
    "\050\ufed0\055\ufed0\056\ufed0\061\ufed0\062\ufed0\063\ufed0\064" +
    "\ufed0\065\ufed0\066\ufed0\067\ufed0\071\ufed0\121\ufed0\122\ufed0" +
    "\126\ufed0\130\ufed0\132\ufed0\147\ufed0\150\ufed0\152\ufed0\153" +
    "\ufed0\154\ufed0\155\ufed0\156\ufed0\157\ufed0\166\ufed0\170\ufed0" +
    "\001\002\000\004\123\u0339\001\002\000\004\115\u033a\001" +
    "\002\000\004\004\uff58\001\002\000\004\004\u033c\001\002" +
    "\000\130\002\uff57\003\uff57\005\uff57\010\uff57\011\uff57\012" +
    "\uff57\013\uff57\014\uff57\015\uff57\016\uff57\020\uff57\024\uff57" +
    "\027\uff57\032\uff57\034\uff57\040\uff57\047\uff57\050\uff57\055" +
    "\uff57\056\uff57\061\uff57\062\uff57\063\uff57\064\uff57\065\uff57" +
    "\066\uff57\067\uff57\071\uff57\121\uff57\122\uff57\126\uff57\130" +
    "\uff57\132\uff57\147\uff57\150\uff57\152\uff57\153\uff57\154\uff57" +
    "\155\uff57\156\uff57\157\uff57\166\uff57\170\uff57\001\002\000" +
    "\004\075\u033e\001\002\000\004\003\u033f\001\002\000\004" +
    "\004\u0340\001\002\000\130\002\ufed6\003\ufed6\005\ufed6\010" +
    "\ufed6\011\ufed6\012\ufed6\013\ufed6\014\ufed6\015\ufed6\016\ufed6" +
    "\020\ufed6\024\ufed6\027\ufed6\032\ufed6\034\ufed6\040\ufed6\047" +
    "\ufed6\050\ufed6\055\ufed6\056\ufed6\061\ufed6\062\ufed6\063\ufed6" +
    "\064\ufed6\065\ufed6\066\ufed6\067\ufed6\071\ufed6\121\ufed6\122" +
    "\ufed6\126\ufed6\130\ufed6\132\ufed6\147\ufed6\150\ufed6\152\ufed6" +
    "\153\ufed6\154\ufed6\155\ufed6\156\ufed6\157\ufed6\166\ufed6\170" +
    "\ufed6\001\002\000\070\003\232\017\243\021\236\022\222" +
    "\023\230\025\221\026\225\030\241\031\244\033\234\035" +
    "\235\036\215\037\213\041\223\042\220\043\237\044\227" +
    "\051\212\052\231\053\240\054\226\133\242\136\217\137" +
    "\216\140\214\141\224\144\211\001\002\000\130\002\uff56" +
    "\003\uff56\005\uff56\010\uff56\011\uff56\012\uff56\013\uff56\014" +
    "\uff56\015\uff56\016\uff56\020\uff56\024\uff56\027\uff56\032\uff56" +
    "\034\uff56\040\uff56\047\uff56\050\uff56\055\uff56\056\uff56\061" +
    "\uff56\062\uff56\063\uff56\064\uff56\065\uff56\066\uff56\067\uff56" +
    "\071\uff56\121\uff56\122\uff56\126\uff56\130\uff56\132\uff56\147" +
    "\uff56\150\uff56\152\uff56\153\uff56\154\uff56\155\uff56\156\uff56" +
    "\157\uff56\166\uff56\170\uff56\001\002\000\004\075\u0344\001" +
    "\002\000\004\003\u0345\001\002\000\004\004\u0346\001\002" +
    "\000\130\002\ufed4\003\ufed4\005\ufed4\010\ufed4\011\ufed4\012" +
    "\ufed4\013\ufed4\014\ufed4\015\ufed4\016\ufed4\020\ufed4\024\ufed4" +
    "\027\ufed4\032\ufed4\034\ufed4\040\ufed4\047\ufed4\050\ufed4\055" +
    "\ufed4\056\ufed4\061\ufed4\062\ufed4\063\ufed4\064\ufed4\065\ufed4" +
    "\066\ufed4\067\ufed4\071\ufed4\121\ufed4\122\ufed4\126\ufed4\130" +
    "\ufed4\132\ufed4\147\ufed4\150\ufed4\152\ufed4\153\ufed4\154\ufed4" +
    "\155\ufed4\156\ufed4\157\ufed4\166\ufed4\170\ufed4\001\002\000" +
    "\126\003\055\005\044\010\022\011\054\012\104\013\103" +
    "\014\101\015\100\016\064\020\072\024\031\027\027\032" +
    "\062\034\073\040\035\047\075\050\021\055\105\056\041" +
    "\061\051\062\047\063\052\064\076\065\106\066\050\067" +
    "\053\071\024\121\060\122\074\126\063\130\045\132\036" +
    "\147\043\150\032\152\067\153\042\154\025\155\077\156" +
    "\061\157\046\166\030\170\056\001\002\000\004\002\ufff2" +
    "\001\002\000\004\115\u034a\001\002\000\004\004\uff4e\001" +
    "\002\000\004\004\u034c\001\002\000\130\002\uff4d\003\uff4d" +
    "\005\uff4d\010\uff4d\011\uff4d\012\uff4d\013\uff4d\014\uff4d\015" +
    "\uff4d\016\uff4d\020\uff4d\024\uff4d\027\uff4d\032\uff4d\034\uff4d" +
    "\040\uff4d\047\uff4d\050\uff4d\055\uff4d\056\uff4d\061\uff4d\062" +
    "\uff4d\063\uff4d\064\uff4d\065\uff4d\066\uff4d\067\uff4d\071\uff4d" +
    "\121\uff4d\122\uff4d\126\uff4d\130\uff4d\132\uff4d\147\uff4d\150" +
    "\uff4d\152\uff4d\153\uff4d\154\uff4d\155\uff4d\156\uff4d\157\uff4d" +
    "\166\uff4d\170\uff4d\001\002\000\034\003\u0356\047\u0256\114" +
    "\u018f\122\u0258\123\u0195\124\u018e\125\u0189\127\u018b\134\u018c" +
    "\142\u0193\143\u0192\155\u0254\166\u025b\001\002\000\132\002" +
    "\uffc3\003\uffc3\005\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\020\uffc3\024\uffc3\027\uffc3\032" +
    "\uffc3\034\uffc3\040\uffc3\047\uffc3\050\uffc3\055\uffc3\056\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067" +
    "\uffc3\071\uffc3\115\u0350\121\uffc3\122\uffc3\126\uffc3\130\uffc3" +
    "\132\uffc3\147\uffc3\150\uffc3\152\uffc3\153\uffc3\154\uffc3\155" +
    "\uffc3\156\uffc3\157\uffc3\166\uffc3\170\uffc3\001\002\000\130" +
    "\002\uffc7\003\uffc7\005\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\024\uffc7\027\uffc7" +
    "\032\uffc7\034\uffc7\040\uffc7\047\uffc7\050\uffc7\055\uffc7\056" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\071\uffc7\121\uffc7\122\uffc7\126\uffc7\130\uffc7\132" +
    "\uffc7\147\uffc7\150\uffc7\152\uffc7\153\uffc7\154\uffc7\155\uffc7" +
    "\156\uffc7\157\uffc7\166\uffc7\170\uffc7\001\002\000\006\003" +
    "\u0352\120\u0353\001\002\000\130\002\uffc5\003\uffc5\005\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\020\uffc5\024\uffc5\027\uffc5\032\uffc5\034\uffc5\040\uffc5" +
    "\047\uffc5\050\uffc5\055\uffc5\056\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\071\uffc5\121\uffc5" +
    "\122\uffc5\126\uffc5\130\uffc5\132\uffc5\147\uffc5\150\uffc5\152" +
    "\uffc5\153\uffc5\154\uffc5\155\uffc5\156\uffc5\157\uffc5\166\uffc5" +
    "\170\uffc5\001\002\000\130\002\uffc1\003\uffc1\005\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\020\uffc1\024\uffc1\027\uffc1\032\uffc1\034\uffc1\040\uffc1\047" +
    "\uffc1\050\uffc1\055\uffc1\056\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\066\uffc1\067\uffc1\071\uffc1\121\uffc1\122" +
    "\uffc1\126\uffc1\130\uffc1\132\uffc1\147\uffc1\150\uffc1\152\uffc1" +
    "\153\uffc1\154\uffc1\155\uffc1\156\uffc1\157\uffc1\166\uffc1\170" +
    "\uffc1\001\002\000\110\003\u02dc\005\044\010\022\011\054" +
    "\012\104\013\103\014\101\015\100\016\064\020\072\024" +
    "\031\027\027\032\062\034\073\040\035\047\075\050\021" +
    "\055\105\056\041\065\106\066\050\071\024\121\u02de\122" +
    "\074\126\u02df\132\036\147\u02da\150\032\152\067\153\042" +
    "\154\025\155\077\156\061\157\046\166\030\001\002\000" +
    "\130\002\uffc2\003\uffc2\005\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\024\uffc2\027" +
    "\uffc2\032\uffc2\034\uffc2\040\uffc2\047\uffc2\050\uffc2\055\uffc2" +
    "\056\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\067\uffc2\071\uffc2\121\uffc2\122\uffc2\126\uffc2\130\uffc2" +
    "\132\uffc2\147\uffc2\150\uffc2\152\uffc2\153\uffc2\154\uffc2\155" +
    "\uffc2\156\uffc2\157\uffc2\166\uffc2\170\uffc2\001\002\000\004" +
    "\115\u0358\001\002\000\010\003\u0352\115\uff9f\120\u0353\001" +
    "\002\000\130\002\uffc4\003\uffc4\005\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\024" +
    "\uffc4\027\uffc4\032\uffc4\034\uffc4\040\uffc4\047\uffc4\050\uffc4" +
    "\055\uffc4\056\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\071\uffc4\121\uffc4\122\uffc4\126\uffc4" +
    "\130\uffc4\132\uffc4\147\uffc4\150\uffc4\152\uffc4\153\uffc4\154" +
    "\uffc4\155\uffc4\156\uffc4\157\uffc4\166\uffc4\170\uffc4\001\002" +
    "\000\006\003\u0352\120\u0353\001\002\000\130\002\uffc6\003" +
    "\uffc6\005\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\020\uffc6\024\uffc6\027\uffc6\032\uffc6\034" +
    "\uffc6\040\uffc6\047\uffc6\050\uffc6\055\uffc6\056\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\071" +
    "\uffc6\121\uffc6\122\uffc6\126\uffc6\130\uffc6\132\uffc6\147\uffc6" +
    "\150\uffc6\152\uffc6\153\uffc6\154\uffc6\155\uffc6\156\uffc6\157" +
    "\uffc6\166\uffc6\170\uffc6\001\002\000\006\004\uffe4\075\u035b" +
    "\001\002\000\012\003\u035f\123\u0360\127\u0362\134\u0361\001" +
    "\002\000\004\004\u035d\001\002\000\126\003\uffe3\005\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\020\uffe3\024\uffe3\027\uffe3\032\uffe3\034\uffe3\040\uffe3" +
    "\047\uffe3\050\uffe3\055\uffe3\056\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\071\uffe3\121\uffe3" +
    "\122\uffe3\126\uffe3\130\uffe3\132\uffe3\147\uffe3\150\uffe3\152" +
    "\uffe3\153\uffe3\154\uffe3\155\uffe3\156\uffe3\157\uffe3\166\uffe3" +
    "\170\uffe3\001\002\000\004\004\uffe2\001\002\000\004\004" +
    "\uffd9\001\002\000\004\004\uffdb\001\002\000\004\004\uffda" +
    "\001\002\000\004\004\uffdc\001\002\000\004\004\u0364\001" +
    "\002\000\126\003\uffe1\005\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\024\uffe1\027" +
    "\uffe1\032\uffe1\034\uffe1\040\uffe1\047\uffe1\050\uffe1\055\uffe1" +
    "\056\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\071\uffe1\121\uffe1\122\uffe1\126\uffe1\130\uffe1" +
    "\132\uffe1\147\uffe1\150\uffe1\152\uffe1\153\uffe1\154\uffe1\155" +
    "\uffe1\156\uffe1\157\uffe1\166\uffe1\170\uffe1\001\002\000\004" +
    "\075\u0366\001\002\000\004\003\u0367\001\002\000\004\004" +
    "\u0368\001\002\000\130\002\ufec6\003\ufec6\005\ufec6\010\ufec6" +
    "\011\ufec6\012\ufec6\013\ufec6\014\ufec6\015\ufec6\016\ufec6\020" +
    "\ufec6\024\ufec6\027\ufec6\032\ufec6\034\ufec6\040\ufec6\047\ufec6" +
    "\050\ufec6\055\ufec6\056\ufec6\061\ufec6\062\ufec6\063\ufec6\064" +
    "\ufec6\065\ufec6\066\ufec6\067\ufec6\071\ufec6\121\ufec6\122\ufec6" +
    "\126\ufec6\130\ufec6\132\ufec6\147\ufec6\150\ufec6\152\ufec6\153" +
    "\ufec6\154\ufec6\155\ufec6\156\ufec6\157\ufec6\166\ufec6\170\ufec6" +
    "\001\002\000\004\075\u036a\001\002\000\004\003\u036b\001" +
    "\002\000\004\004\u036c\001\002\000\130\002\ufeda\003\ufeda" +
    "\005\ufeda\010\ufeda\011\ufeda\012\ufeda\013\ufeda\014\ufeda\015" +
    "\ufeda\016\ufeda\020\ufeda\024\ufeda\027\ufeda\032\ufeda\034\ufeda" +
    "\040\ufeda\047\ufeda\050\ufeda\055\ufeda\056\ufeda\061\ufeda\062" +
    "\ufeda\063\ufeda\064\ufeda\065\ufeda\066\ufeda\067\ufeda\071\ufeda" +
    "\121\ufeda\122\ufeda\126\ufeda\130\ufeda\132\ufeda\147\ufeda\150" +
    "\ufeda\152\ufeda\153\ufeda\154\ufeda\155\ufeda\156\ufeda\157\ufeda" +
    "\166\ufeda\170\ufeda\001\002\000\126\003\055\005\044\010" +
    "\022\011\054\012\104\013\103\014\101\015\100\016\064" +
    "\020\072\024\031\027\027\032\062\034\073\040\035\047" +
    "\075\050\021\055\105\056\041\061\051\062\047\063\052" +
    "\064\076\065\106\066\050\067\053\071\024\121\060\122" +
    "\074\126\063\130\045\132\036\147\043\150\032\152\067" +
    "\153\042\154\025\155\077\156\061\157\046\166\030\170" +
    "\056\001\002\000\004\002\ufffd\001\002\000\012\003\004" +
    "\122\007\126\005\130\006\001\002\000\004\002\ufff7\001" +
    "\002\000\012\003\004\122\007\126\005\130\006\001\002" +
    "\000\004\002\ufff9\001\002\000\012\003\004\122\007\126" +
    "\005\130\006\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0372\000\004\002\007\001\001\000\004\046\u0372\001" +
    "\001\000\004\047\u0370\001\001\000\004\050\u036e\001\001" +
    "\000\004\044\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u036c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\033\004\037\005\032\006\101\014\065" +
    "\017\070\024\056\027\064\035\067\036\025\040\022\042" +
    "\036\001\001\000\004\152\u0368\001\001\000\004\164\u0364" +
    "\001\001\000\002\001\001\000\004\031\u034e\001\001\000" +
    "\002\001\001\000\004\052\u0346\001\001\000\004\155\u0342" +
    "\001\001\000\002\001\001\000\004\154\u033c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\157\u0333\001\001\000\004\163\u032f\001\001\000\004\056" +
    "\u032d\001\001\000\004\054\u032b\001\001\000\004\162\u0327" +
    "\001\001\000\002\001\001\000\004\065\u031f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u0313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\165\u0249\001\001" +
    "\000\006\053\u0246\063\u0245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\156\u0233\001\001\000\004\064\u0230\001\001\000\004\173" +
    "\u022c\001\001\000\004\055\u022a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u0223\001\001\000\002\001" +
    "\001\000\004\153\u021f\001\001\000\004\172\u021b\001\001" +
    "\000\002\001\001\000\004\160\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\151\170\171\172\001\001" +
    "\000\006\150\156\170\160\001\001\000\002\001\001\000" +
    "\006\147\145\167\144\001\001\000\006\146\130\166\126" +
    "\001\001\000\004\161\122\001\001\000\002\001\001\000" +
    "\004\100\120\001\001\000\004\025\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\104" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\145\u013d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\112" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\115\u0114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\124\u011a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\122\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\141\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\134\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\114\u0130\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\113\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\127\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\126\u013b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\140\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\135\u0149\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\u014d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\u0151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\144\u0155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\132\u0159\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\120\u015d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\u0161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\u0165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\136\u0169\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\142\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\130\u0171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\143\u0175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\131\u0179\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\137\u017d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\u0181\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\u0195\011\u0193\013\u0187\016\u0189\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\175\u0218\001\001\000\002\001" +
    "\001\000\004\007\u0211\001\001\000\002\001\001\000\006" +
    "\174\u01a5\176\u01a4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\233\u019a" +
    "\001\001\000\004\007\u01a3\001\001\000\004\007\u01a1\001" +
    "\001\000\004\007\u019f\001\001\000\004\007\u019d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u01ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\200\u020a\212\u020b\001\001\000\006\207" +
    "\u0204\221\u0205\001\001\000\006\201\u01fe\213\u01ff\001\001" +
    "\000\006\177\u01f8\211\u01f9\001\001\000\006\210\u01f2\222" +
    "\u01f3\001\001\000\006\205\u01ec\217\u01ed\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\203\u01e5\215\u01e6\001" +
    "\001\000\006\206\u01df\220\u01e0\001\001\000\006\204\u01da" +
    "\216\u01d9\001\001\000\006\202\u01b3\214\u01b4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u01ba\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\224\u01c1\001\001\000\004\230\u01bf\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\225\u01c9\001\001\000\004\231\u01c7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\226\u01d0\001\001\000\004" +
    "\232\u01ce\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\223\u01d7\001\001\000\004\227\u01d5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u01dc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u01e3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u01e9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u01f0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u01f6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u01fc\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0208\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u020e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u0216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0219\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\u0224\004\037\005" +
    "\032\006\101\014\065\017\070\024\056\027\064\035\067" +
    "\036\025\040\022\042\036\001\001\000\002\001\001\000" +
    "\004\021\u0226\001\001\000\002\001\001\000\004\106\u0228" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\u022b\004\037\005\032\006\101\014\065\017\070\024\056" +
    "\027\064\035\067\036\025\040\022\042\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\103\u0239\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u0240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\u0243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\u0247" +
    "\004\037\005\032\006\101\014\065\017\070\024\056\027" +
    "\064\035\067\036\025\040\022\042\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u024e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\u0259\030\u0256\033\u0254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\u025c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\u027b\033\u027a" +
    "\001\001\000\006\007\u0279\033\u0278\001\001\000\006\007" +
    "\u0277\033\u0276\001\001\000\006\007\u0275\033\u0274\001\001" +
    "\000\006\007\u0273\033\u0272\001\001\000\006\007\u0271\033" +
    "\u0270\001\001\000\006\007\u026f\033\u026e\001\001\000\006" +
    "\007\u026d\033\u026c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u02d7\001\001\000" +
    "\002\001\001\000\016\005\u02d8\014\u02e0\017\u02e1\024\u02dc" +
    "\027\u02df\034\u02da\001\001\000\002\001\001\000\004\066" +
    "\u02f5\001\001\000\004\075\u02f2\001\001\000\002\001\001" +
    "\000\004\073\u02ef\001\001\000\004\071\u02ed\001\001\000" +
    "\002\001\001\000\004\074\u02e8\001\001\000\004\072\u02e6" +
    "\001\001\000\004\067\u02e4\001\001\000\004\070\u02e2\001" +
    "\001\000\016\005\u02d8\014\u02e0\017\u02e1\024\u02dc\027\u02df" +
    "\034\u02e3\001\001\000\002\001\001\000\016\005\u02d8\014" +
    "\u02e0\017\u02e1\024\u02dc\027\u02df\034\u02e5\001\001\000\002" +
    "\001\001\000\016\005\u02d8\014\u02e0\017\u02e1\024\u02dc\027" +
    "\u02df\034\u02e7\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\u02d8\014\u02e0\017\u02e1\024\u02dc\027\u02df\034" +
    "\u02ea\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\u02d8\014\u02e0\017\u02e1\024\u02dc\027" +
    "\u02df\034\u02ee\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\u02d8\014\u02e0\017\u02e1\024\u02dc\027\u02df\034" +
    "\u02f1\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\u02d8\014\u02e0\017\u02e1\024\u02dc\027\u02df\034\u02f4\001" +
    "\001\000\002\001\001\000\016\005\u02d8\014\u02e0\017\u02e1" +
    "\024\u02dc\027\u02df\034\u02f6\001\001\000\002\001\001\000" +
    "\004\041\u02f8\001\001\000\002\001\001\000\006\007\u0310" +
    "\033\u030f\001\001\000\006\007\u030e\033\u030d\001\001\000" +
    "\006\007\u030c\033\u030b\001\001\000\006\007\u030a\033\u0309" +
    "\001\001\000\006\007\u0308\033\u0307\001\001\000\006\007" +
    "\u0306\033\u0305\001\001\000\006\007\u0304\033\u0303\001\001" +
    "\000\006\007\u0302\033\u0301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\u0318\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u031c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0323\001\001\000\002\001\001\000\004" +
    "\107\u0325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\u032c\004\037\005\032\006\101\014" +
    "\065\017\070\024\056\027\064\035\067\036\025\040\022" +
    "\042\036\001\001\000\002\001\001\000\032\003\u032e\004" +
    "\037\005\032\006\101\014\065\017\070\024\056\027\064" +
    "\035\067\036\025\040\022\042\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u033a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\u0347\004\037\005" +
    "\032\006\101\014\065\017\070\024\056\027\064\035\067" +
    "\036\025\040\022\042\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\u034a\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\u0259\030\u0354\033\u0254\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u0350" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\u02d8\014\u02e0\017\u02e1\024\u02dc\027\u02df\034\u0353\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0356\001" +
    "\001\000\002\001\001\000\004\032\u0358\001\001\000\002" +
    "\001\001\000\004\061\u035b\001\001\000\004\037\u035d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\u0362" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\u036d\004\037\005" +
    "\032\006\101\014\065\017\070\024\056\027\064\035\067" +
    "\036\025\040\022\042\036\001\001\000\002\001\001\000" +
    "\004\002\u036f\001\001\000\002\001\001\000\004\002\u0371" +
    "\001\001\000\002\001\001\000\004\002\u0373\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // EXP ::= Parentesis_izq error Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP ( error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // EXP ::= Parentesis_izq error EXP Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( error EXP ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // EXP ::= Parentesis_izq EXP error Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP error ) ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;     
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // EXP ::= EXP Division error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // EXP ::= EXP Multiplicacion error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // EXP ::= EXP Resta error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // EXP ::= EXP Suma error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + error ]\n");
                Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e007 - Expresión inválida -> "); 
                Main.error = true;    
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // EXP ::= False 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ False ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // EXP ::= True 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ True ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // EXP ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // EXP ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // EXP ::= Numero_Euler_Flotante 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // EXP ::= Numero_Euler 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // EXP ::= Numero_Flotante 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // EXP ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ "+s+" ]\n");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // EXP ::= Parentesis_izq EXP Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ ( EXP ) ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // EXP ::= EXP Division EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP / EXP ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // EXP ::= EXP Multiplicacion EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP * EXP ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // EXP ::= EXP Resta EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP - EXP ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // EXP ::= EXP Suma EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Main.arbolSin.add("( "+(sright+1)+" ) ------> EXP ::= [ EXP + EXP ]\n"); 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // EXP_LIST ::= EXP NT$119 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$119
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LIST",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // NT$119 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> EXP_LIST ::= [ EXP PComa ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$119",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // OBJ_PARAMETROS ::= PortD Parentesis_izq Identificador NT$118 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$118
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // NT$118 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortD ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$118",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // OBJ_PARAMETROS ::= PortC Parentesis_izq Identificador NT$117 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$117
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // NT$117 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortC ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$117",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // OBJ_PARAMETROS ::= PortB Parentesis_izq Identificador NT$116 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$116
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // NT$116 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortB ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$116",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // OBJ_PARAMETROS ::= PortA Parentesis_izq Identificador NT$115 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$115
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // NT$115 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$115",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // OBJ_PARAMETROS ::= PortD Parentesis_izq Numero_Entero NT$114 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$114
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // NT$114 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortD ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$114",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // OBJ_PARAMETROS ::= PortC Parentesis_izq Numero_Entero NT$113 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$113
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // NT$113 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortC ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$113",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // OBJ_PARAMETROS ::= PortB Parentesis_izq Numero_Entero NT$112 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$112
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // NT$112 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortB ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$112",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // OBJ_PARAMETROS ::= PortA Parentesis_izq Numero_Entero NT$111 Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$111
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJ_PARAMETROS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // NT$111 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJ_PARAMETROS ::= [ PortA ( "+s+" ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$111",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // OBJETO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> OBJETO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // OBJETO ::= SmartCamera NT$110 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$110
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // NT$110 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$110",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // OBJETO ::= Device NT$109 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$109
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // NT$109 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Device error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$109",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // OBJETO ::= Alarm NT$108 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$108
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // NT$108 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Alarm error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$108",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // OBJETO ::= Camera NT$107 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$107
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // NT$107 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Camera error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$107",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // OBJETO ::= Window NT$106 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$106
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // NT$106 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Window error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$106",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // OBJETO ::= Door NT$105 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$105
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // NT$105 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Door error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$105",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // OBJETO ::= LightRGB NT$104 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$104
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // NT$104 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ LightRGB error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$104",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // OBJETO ::= Light NT$103 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$103
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // NT$103 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Light error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$103",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // OBJETO ::= Ac NT$102 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$102
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // NT$102 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Ac error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$102",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // OBJETO ::= Temp NT$101 error 
            {
              Object RESULT =null;
              // propagate RESULT from NT$101
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // NT$101 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$101",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // OBJETO ::= SmartCamera NT$100 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$100
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // NT$100 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ SmartCamera( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$100",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // OBJETO ::= Device NT$99 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$99
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // NT$99 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Device( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$99",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // OBJETO ::= Alarm NT$98 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$98
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // NT$98 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Alarm( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$98",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // OBJETO ::= Camera NT$97 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$97
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // NT$97 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Camera( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$97",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // OBJETO ::= Window NT$96 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$96
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // NT$96 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Window( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$96",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // OBJETO ::= Door NT$95 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$95
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // NT$95 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Door( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$95",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // OBJETO ::= LightRGB NT$94 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$94
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // NT$94 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ LightRGB( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$94",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // OBJETO ::= Light NT$93 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$93
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // NT$93 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Light( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$93",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // OBJETO ::= Ac NT$92 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$92
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // NT$92 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Ac( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$92",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // OBJETO ::= Temp NT$91 Parentesis_izq OBJ_PARAMETROS Parentesis_der 
            {
              Object RESULT =null;
              // propagate RESULT from NT$91
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // NT$91 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> OBJETO ::= [ Temp( OBJ_PARAMETROS ) ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$91",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // DEC_OBJETO ::= error NT$90 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$90
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // NT$90 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e008 - Sintaxis de declaración de dispositivo erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$90",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // DEC_OBJETO ::= New NT$89 OBJETO PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$89
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_OBJETO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // NT$89 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DEC_OBJETO ::= [ New OBJETO ; ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$89",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // DECL_TIPO ::= error NT$88 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$88
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // NT$88 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$88",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // DECL_TIPO ::= DEC_OBJETO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ DEC_OBJETO ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // DECL_TIPO ::= EXP_LIST 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECL_TIPO ::= [ EXP_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL_TIPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // DECL ::= Enable NT$87 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$87
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // NT$87 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$87",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // DECL ::= New NT$86 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$86
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // NT$86 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$86",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // DECL ::= PortD NT$85 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$85
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // NT$85 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$85",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // DECL ::= PortC NT$84 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$84
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // NT$84 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$84",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // DECL ::= PortB NT$83 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$83
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // NT$83 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$83",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // DECL ::= PortA NT$82 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // NT$82 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$82",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // DECL ::= Initialize NT$81 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // NT$81 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$81",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // DECL ::= Home NT$80 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$80
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // NT$80 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$80",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // DECL ::= SmartCamera NT$79 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$79
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // NT$79 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$79",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // DECL ::= Device NT$78 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // NT$78 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$78",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // DECL ::= Alarm NT$77 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // NT$77 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$77",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // DECL ::= Camera NT$76 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // NT$76 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$76",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // DECL ::= Window NT$75 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // NT$75 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$75",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // DECL ::= Door NT$74 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // NT$74 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$74",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // DECL ::= LightRGB NT$73 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // NT$73 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$73",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // DECL ::= Light NT$72 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // NT$72 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$72",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // DECL ::= Ac NT$71 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // NT$71 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$71",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // DECL ::= Temp NT$70 Asignacion error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // NT$70 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ Temp = error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e009 - Sintaxis de declaración erronea -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$70",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // DECL ::= Identificador Asignacion DECL_TIPO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECL ::= [ "+s+" = DECL_TIPO ]\n");
        Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ENA_PORT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ENA_PORT ::= Enable Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ------> ENA_PORT ::= [ Enable() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENA_PORT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ACT_PORT ::= PortD error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ACT_PORT ::= PortC error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortC => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ACT_PORT ::= PortB error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortB => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ACT_PORT ::= PortA error PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortA => error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e010 - Sintaxis de activación de puertos erronea - > "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ACT_PORT ::= PortD NT$69 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // NT$69 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortD => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$69",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ACT_PORT ::= PortC NT$68 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // NT$68 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortC => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$68",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ACT_PORT ::= PortB NT$67 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // NT$67 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortB => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$67",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ACT_PORT ::= PortA NT$66 AsignacionArrow ENA_PORT PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACT_PORT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // NT$66 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> ACT_PORT ::= [ PortA => ENA_PORT PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$66",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // THIS_FUNC_TYPE ::= DeleteFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ DeleteFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // THIS_FUNC_TYPE ::= SaveFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ SaveFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // THIS_FUNC_TYPE ::= FaceCheck Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ FaceCheck() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // THIS_FUNC_TYPE ::= Move Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // THIS_FUNC_TYPE ::= Move Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // THIS_FUNC_TYPE ::= StopRec Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ StopRec() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // THIS_FUNC_TYPE ::= Record Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Record() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // THIS_FUNC_TYPE ::= Doorbell Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Doorbell() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // THIS_FUNC_TYPE ::= IsUnlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsUnlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // THIS_FUNC_TYPE ::= IsLock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsLock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // THIS_FUNC_TYPE ::= IsClose Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsClose() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // THIS_FUNC_TYPE ::= IsOpen Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ IsOpen() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // THIS_FUNC_TYPE ::= Unlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Unlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // THIS_FUNC_TYPE ::= Lock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Lock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // THIS_FUNC_TYPE ::= Close Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Close() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // THIS_FUNC_TYPE ::= Open Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Open() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // THIS_FUNC_TYPE ::= Color Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Color("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // THIS_FUNC_TYPE ::= LightMode Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ LightMode("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // THIS_FUNC_TYPE ::= Color Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Color("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // THIS_FUNC_TYPE ::= LightMode Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ LightMode("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // THIS_FUNC_TYPE ::= Off Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Off() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // THIS_FUNC_TYPE ::= On Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ On() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // THIS_FUNC_TYPE ::= Set Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Set("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // THIS_FUNC_TYPE ::= Shutdown Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Shutdown() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // THIS_FUNC_TYPE ::= Start Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Start() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // THIS_FUNC_TYPE ::= Set Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ Set("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // THIS_FUNC_TYPE ::= GetTemp Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC_TYPE ::= [ GetTemp() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC_TYPE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // THIS_FUNC ::= This Punto THIS_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> THIS_FUNC ::= [ This Punto FUNC_TYPE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THIS_FUNC",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // FUNC_PARAMS ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e011 - Sintaxis erronea en la función Program -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC Coma Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", THIS_FUNC, "+b+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FUNC_PARAMS ::= Cadena Coma THIS_FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+", THIS_FUNC ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // FUNC_PARAMS ::= Cadena Coma Numero_Entero Coma Numero_Entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+a+", "+b+", "+c+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // FUNC_PARAMS ::= Numero_Entero Coma Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(aright+1)+" ) ----> FUNC_PARAMS ::= [ "+s+","+a+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // FUNC_TYPE ::= error NT$65 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // NT$65 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$65",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // FUNC_TYPE ::= DeleteFace Parentesis_izq Parentesis_der NT$64 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // NT$64 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ DeleteFace(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$64",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // FUNC_TYPE ::= SaveFace Parentesis_izq Parentesis_der NT$63 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // NT$63 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ SaveFace(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$63",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // FUNC_TYPE ::= FaceCheck Parentesis_izq Parentesis_der NT$62 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // NT$62 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ FaceCheck(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$62",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // FUNC_TYPE ::= Move Parentesis_izq Cadena Coma Numero_Entero Coma Numero_Entero Parentesis_der NT$61 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NT$61 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Move("+s+","+a+","+b+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$61",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // FUNC_TYPE ::= StopRec Parentesis_izq Parentesis_der NT$60 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$60 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ StopRec(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$60",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // FUNC_TYPE ::= Record Parentesis_izq Parentesis_der NT$59 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$59 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Record(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$59",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // FUNC_TYPE ::= Doorbell Parentesis_izq Parentesis_der NT$58 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$58 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Doorbell(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$58",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // FUNC_TYPE ::= IsUnlock Parentesis_izq Parentesis_der NT$57 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$57 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsUnlock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$57",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // FUNC_TYPE ::= IsLock Parentesis_izq Parentesis_der NT$56 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$56 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsLock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$56",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // FUNC_TYPE ::= IsClose Parentesis_izq Parentesis_der NT$55 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // NT$55 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsClose(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$55",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // FUNC_TYPE ::= IsOpen Parentesis_izq Parentesis_der NT$54 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$54 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOpen(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$54",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // FUNC_TYPE ::= Unlock Parentesis_izq Parentesis_der NT$53 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$53 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Unlock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$53",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // FUNC_TYPE ::= Lock Parentesis_izq Parentesis_der NT$52 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$52 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Lock(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$52",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FUNC_TYPE ::= Close Parentesis_izq Parentesis_der NT$51 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$51 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Close(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$51",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // FUNC_TYPE ::= Open Parentesis_izq Parentesis_der NT$50 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$50 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Open(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$50",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // FUNC_TYPE ::= Color Parentesis_izq Identificador Parentesis_der NT$49 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$49 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Color("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$49",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // FUNC_TYPE ::= LightMode Parentesis_izq Identificador Parentesis_der NT$48 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$48 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ LightMode("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$48",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // FUNC_TYPE ::= Color Parentesis_izq Cadena Parentesis_der NT$47 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$47 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Color("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$47",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // FUNC_TYPE ::= LightMode Parentesis_izq Numero_Entero Parentesis_der NT$46 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$46 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ LightMode("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$46",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // FUNC_TYPE ::= Shutdown Parentesis_izq Parentesis_der NT$45 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$45 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$45",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FUNC_TYPE ::= Start Parentesis_izq Parentesis_der NT$44 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$44 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$44",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // FUNC_TYPE ::= Off Parentesis_izq Parentesis_der NT$43 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$43 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ off(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$43",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // FUNC_TYPE ::= On Parentesis_izq Parentesis_der NT$42 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$42 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ On(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$42",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FUNC_TYPE ::= Program Parentesis_izq FUNC_PARAMS Parentesis_der NT$41 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$41 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Program(FUNC_PARAMS); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$41",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FUNC_TYPE ::= Set Parentesis_izq Identificador Parentesis_der NT$40 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$40 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Set("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$40",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // FUNC_TYPE ::= Set Parentesis_izq Numero_Entero Parentesis_der NT$39 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$39 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ Set("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$39",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // FUNC_TYPE ::= GetTemp Parentesis_izq Parentesis_der NT$38 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$38 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ GetTemp(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$38",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // FUNC_TYPE ::= IsMove Parentesis_izq Parentesis_der NT$37 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$37 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsMove(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$37",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FUNC_TYPE ::= IsOn Parentesis_izq Parentesis_der NT$36 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$36 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE ::= [ IsOn(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$36",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // FUNC ::= Punto error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Punto FUNC_TYPE ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FUNC ::= Retroceder Parentesis_izq FUNC_PARAMS Parentesis_der NT$35 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$35 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Retroceder(FUNC_PARAMS); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$35",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FUNC ::= Avanzar Parentesis_izq FUNC_PARAMS Parentesis_der NT$34 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$34 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Avanzar(FUNC_PARAMS); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$34",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FUNC ::= Detener Parentesis_izq Parentesis_der NT$33 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$33 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Detener(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$33",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // FUNC ::= IsSound Parentesis_izq Parentesis_der NT$32 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$32 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ IsSound(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$32",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // FUNC ::= Whistle Parentesis_izq Parentesis_der NT$31 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$31 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Whistle(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$31",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // FUNC ::= Capture Parentesis_izq Parentesis_der NT$30 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$30 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ Capture(); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$30",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // FUNC ::= Camera Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FUNC ::= Micro Punto FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ "+s+" Punto FUNC_TYPE  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // FUNC ::= RecordTime Parentesis_izq Numero_Entero Parentesis_der NT$29 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$29 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC ::= [ RecordTime("+s+"); ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$29",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VALUE_IN ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis erronea en el método Receive -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VALUE_IN ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VALUE_IN ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VALUE_IN ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_IN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VALUE_OUT ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis erronea en el método Display -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VALUE_OUT ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // VALUE_OUT ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // VALUE_OUT ::= Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> VALUE ::= [ "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_OUT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // IN_OUT ::= Receive error NT$28 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$28 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive error PComa ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e013 - Sintaxis en el método Receive erronea -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$28",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // IN_OUT ::= Receive Parentesis_izq VALUE_IN Parentesis_der NT$27 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$27 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Recive VALUE PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$27",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // IN_OUT ::= Display VALUE_OUT NT$26 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN_OUT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$26 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IN_OUT ::= [ Display VALUE PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$26",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FUNC_TYPE_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FUNC_TYPE_IF ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e012 - Sintaxis errona en la Función -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FUNC_TYPE_IF ::= IsMove Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsMove() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FUNC_TYPE_IF ::= IsOn Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> FUNC_TYPE_IF ::= [ IsOn() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC_TYPE_IF",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // COND_FOR_2 ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_FOR_2",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // COND_FOR_2 ::= Llave_izq STMT_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_FOR_2 ::= [ { STMT_IF }  ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_FOR_2",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FOR_STMT ::= For Parentesis_izq TIPO Identificador Asignacion Numero_Entero PComa COND PComa Identificador Inc Parentesis_der COND_FOR_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Main.arbolSin.add("( "+(sright+1)+" ) ---> FOR_STMT ::= [ For(TIPO "+s+" = "+a+"; COND ;"+c+" Inc) ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_STMT",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // IF_FUNC_TYPE ::= Identificador Punto DeleteFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".DeleteFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IF_FUNC_TYPE ::= Identificador Punto SaveFace Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".SaveFace() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IF_FUNC_TYPE ::= Identificador Punto FaceCheck Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".FaceCheck() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IF_FUNC_TYPE ::= Identificador Punto Move Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+a+".Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // IF_FUNC_TYPE ::= Identificador Punto Move Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+a+".Move("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // IF_FUNC_TYPE ::= Identificador Punto StopRec Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".StopRec() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IF_FUNC_TYPE ::= Identificador Punto Record Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Record() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // IF_FUNC_TYPE ::= Identificador Punto Doorbell Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Doorbell() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // IF_FUNC_TYPE ::= Identificador Punto IsUnlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".IsUnlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IF_FUNC_TYPE ::= Identificador Punto IsOn Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+".IsLock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IF_FUNC_TYPE ::= Identificador Punto IsLock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+".IsLock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IF_FUNC_TYPE ::= Identificador Punto IsClose Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIF_FUNC_TYPE ::= [ "+s+".IsClose() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IF_FUNC_TYPE ::= Identificador Punto IsOpen Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".IsOpen() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IF_FUNC_TYPE ::= Identificador Punto Unlock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Unlock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IF_FUNC_TYPE ::= Identificador Punto Lock Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Lock() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IF_FUNC_TYPE ::= Identificador Punto Close Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Close() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IF_FUNC_TYPE ::= Identificador Punto Open Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Open() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IF_FUNC_TYPE ::= Identificador Punto Color Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Color("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IF_FUNC_TYPE ::= Identificador Punto LightMode Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".LightMode("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IF_FUNC_TYPE ::= Identificador Punto Color Parentesis_izq Cadena Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Color("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IF_FUNC_TYPE ::= Identificador Punto LightMode Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".LightMode("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IF_FUNC_TYPE ::= Identificador Punto Off Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Off() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IF_FUNC_TYPE ::= Identificador Punto On Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".On() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IF_FUNC_TYPE ::= Identificador Punto Shutdown Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Shutdown() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IF_FUNC_TYPE ::= Identificador Punto Start Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Start() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF_FUNC_TYPE ::= Identificador Punto Set Parentesis_izq Identificador Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Set("+a+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IF_FUNC_TYPE ::= Identificador Punto Set Parentesis_izq Numero_Entero Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".Set("+s+") ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IF_FUNC_TYPE ::= Identificador Punto GetTemp Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPEE ::= [ "+s+".GetTemp() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IF_FUNC_TYPE ::= IsSound Parentesis_izq Parentesis_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ IsSound() ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IF_FUNC_TYPE ::= Camera Punto FUNC_TYPE_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IF_FUNC_TYPE ::= Micro Punto FUNC_TYPE_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> IF_FUNC_TYPE ::= [ "+s+" Punto FUNC_TYPE_IF  ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_FUNC_TYPE",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // STMT_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ]\n");
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // STMT_IF ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ }); ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        // Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e017 - Falta llave de cierre de la sentencia If -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // STMT_IF ::= Llave_der 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ } ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // STMT_IF ::= ERROR3 NT$25 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$25 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR3 ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$25",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // STMT_IF ::= ERROR NT$24 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$24 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ERROR ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$24",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // STMT_IF ::= error NT$23 PComa STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$23 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ error ; STMT_IF]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$23",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // STMT_IF ::= IF_STMT NT$22 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$22 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$22",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // STMT_IF ::= IN_OUT NT$21 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$21 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ IN_OUT STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$21",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // STMT_IF ::= FUNC NT$20 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$20 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ FUNC STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$20",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // STMT_IF ::= ACT_PORT NT$19 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$19 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ ACT_PORT STMT_IF]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$19",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // STMT_IF ::= DECL NT$18 STMT_IF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_IF",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$18 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT_IF ::= [ DECL STMT_IF ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$18",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COND ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e015 - Condición inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COND ::= IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ IF_FUNC_TYPE ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COND ::= IF_FUNC_TYPE Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COND ::= IF_FUNC_TYPE And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= IF_FUNC_TYPE Menor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= IF_FUNC_TYPE Menor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= IF_FUNC_TYPE Mayor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COND ::= IF_FUNC_TYPE Mayor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COND ::= IF_FUNC_TYPE Diferente IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COND ::= IF_FUNC_TYPE Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COND ::= EXP Or IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COND ::= EXP And IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COND ::= EXP Menor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COND ::= EXP Menor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COND ::= EXP Mayor_igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COND ::= EXP Mayor IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COND ::= EXP Diferente IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COND ::= EXP Igual IF_FUNC_TYPE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COND ::= IF_FUNC_TYPE Or EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COND ::= IF_FUNC_TYPE And EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COND ::= IF_FUNC_TYPE Menor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND ::= IF_FUNC_TYPE Menor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND ::= IF_FUNC_TYPE Mayor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND ::= IF_FUNC_TYPE Mayor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND ::= IF_FUNC_TYPE Diferente EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND ::= IF_FUNC_TYPE Igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND ::= EXP Or EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND ::= EXP And EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND ::= EXP Menor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP <= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND ::= EXP Menor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP < EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND ::= EXP Mayor_igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP >= EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND ::= EXP Mayor EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP > EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COND ::= EXP Diferente EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP != EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND ::= EXP Igual EXP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND ::= [ EXP == EXP ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND_IF_2 ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND_IF_2 ::= Llave_izq STMT_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF_2 ::= [ { IF_FUNC_TYPE }  ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF_2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COND_IF ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND_IF ::= Parentesis_izq error COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND_IF ::= error Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e014 - Sintaxis errona de la Sentencia If -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND_IF ::= Parentesis_izq COND Parentesis_der COND_IF_2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> COND_IF ::= [ ( COND ) COND_IF_2 ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF_STMT ::= If COND_IF 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> IF_STMT ::= [ If COND_IF ; ]\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_STMT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STMT ::= ERROR3 NT$17 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$17 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$17",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STMT ::= ERROR NT$16 error PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$16 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$16",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STMT ::= error NT$15 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$15 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$15",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STMT ::= IN_OUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ IN_OUT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STMT ::= FUNC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ FUNC ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STMT ::= ACT_PORT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ ACT_PORT ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STMT ::= DECL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> STMT ::= [ DECL ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CIERRE ::= IF_STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ IF_STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CIERRE ::= STMT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ STMT ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CIERRE ::= ERROR2 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CIERRE ::= ERROR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CIERRE ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE  ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> ");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Falta estructura de cierre del Método Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CIERRE ::= Llave_der Parentesis_der PComa error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa error ]\n"); 
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CIERRE ::= Llave_der Parentesis_der PComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> CIERRE ::= [ Llave_der Parentesis_der PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLS ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ---> DECLS ::= [ error ; ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e016 - Se espera un valor -> "); 
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLS ::= Numero_Flotante 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLS ::= Numero_Entero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLS ::= Cadena 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> DECLS ::= [   "+s+" ]\n");
        Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= Bool 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Bool ]\n");
        Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= Float 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Float ]\n");
        Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO ::= Text 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Text ]\n");
        Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO ::= Int 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) ----> TIPO ::= [  Int ]\n");
        Main.listaIdValor.add(s+"");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLVA ::= TIPO Identificador Asignacion DECLS NT$14 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$14 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLVA ::= [ TIPO "+s+" = DECLS ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$14",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLVA ::= TIPO Identificador NT$13 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLVA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$13 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> DECLVA ::= [ TIPO "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPOR ::= Import Identificador Punto Identificador NT$12 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$12 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" Punto "+a+" PComa ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IMPOR ::= Import Identificador NT$11 PComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPOR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$11 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> IMPOR ::= [ Import "+s+" ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STMT_LIST ::= CIERRE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ CIERRE ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STMT_LIST ::= FOR_STMT NT$10 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ FOR_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STMT_LIST ::= IF_STMT NT$9 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IF_STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STMT_LIST ::= STMT NT$8 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ STMT STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STMT_LIST ::= error NT$7 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ error STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e006 - Sentencia inválida -> "); 
        Main.error = true;   
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STMT_LIST ::= DECLVA NT$6 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ DECLVA STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STMT_LIST ::= IMPOR NT$5 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STMT_LIST",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        Main.arbolSin.add("( "+(sright+1)+" ) --> STMT_LIST ::= [ IMPOR STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= error 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e003 - No se encontró el Metodo Initialize -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= ERROR2 NT$4 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= ERROR NT$3 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error NT$2 INICIO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO error ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e005 - Una o más sentencias fuera del bloque principal -> "); 
        Main.error = true; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Identificador error NT$1 STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ "+s+" error { STMT_LIST ]\n");
        Main.listaErroresSin.add("> Linea ( "+ (sright+1) +" ) - Error sintáctico - e004 - Sintaxis del Metodo Initialize Erronea -> ");  
        Main.error = true;  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Identificador NT$0 Punto Initialize Parentesis_izq Home Llave_izq STMT_LIST 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 
        Main.arbolSin.add("( "+(sright+1)+" ) -> INICIO ::= [ INICIO "+s+".Initialize(Home{ STMT_LIST ]\n"); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

